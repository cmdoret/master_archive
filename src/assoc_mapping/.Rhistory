colindex <- 1
par(mfrow=c(2,6))
centrolist <- list()
centrolist[['slideMean']] <- data.frame(pos = rep(0,6), Chr=levels(fix$Chr), val=rep(0,6))
store_means <- data.frame(BP=numeric(0),Chr=numeric(0),S.Mean=numeric(0))
for(chrom in levels(fix$Chr)){
plot(x=c(),y=c(),xlim=c(0,max(fix$BP[fix$Chr==chrom])), ylim=c(-0.05,1),
xlab=chrom,ylab="Homozygosity")
abline(h=-0.01)
for(w in wsize_range){
HOM = zoo(fix$Prop.Hom[fix$Chr==chrom],order.by = fix$BP[fix$Chr==chrom])
sliMean = rollapply(HOM, width=w, by=1, FUN=mean, partial=F)
bp_idx = index(sliMean)
points(bp_idx[order(bp_idx)],sliMean[order(bp_idx)], type='l',col=alpha(virilist[colindex],0.4),lwd=1.3)
points(bp_idx[which(sliMean==min(sliMean))],rep(-0.01,length(which(sliMean==min(sliMean)))),
col=alpha(virilist[colindex],0.4),pch=16, cex=1.5)
centrolist$slideMean$pos[centrolist$slideMean$Chr==chrom] <- bp_idx[which(sliMean==min(sliMean))]
centrolist$slideMean$val[centrolist$slideMean$Chr==chrom] <- sliMean[sliMean==min(sliMean)]
colindex <- colindex+1
}
colindex <- 1
tmp_df <- data.frame(BP=bp_idx, Chr=rep(chrom), S.Mean=sliMean)
store_means <- rbind(store_means,tmp_df)
}
warnings()
View(fix)
View(fix)
levels(fix$Chr)
chrom
plot(x=c(),y=c(),xlim=c(0,max(fix$BP[fix$Chr==chrom])), ylim=c(-0.05,1),
xlab=chrom,ylab="Homozygosity")
plot(x=c(),y=c(),xlim=c(0,max(fix$BP[fix$Chr==chrom])), ylim=c(-0.05,1),
xlab=chrom,ylab="Homozygosity")
abline(h=-0.01)
for(w in wsize_range){
HOM = zoo(fix$Prop.Hom[fix$Chr==chrom],order.by = fix$BP[fix$Chr==chrom])
sliMean = rollapply(HOM, width=w, by=1, FUN=mean, partial=F)
bp_idx = index(sliMean)
points(bp_idx[order(bp_idx)],sliMean[order(bp_idx)], type='l',col=alpha(virilist[colindex],0.4),lwd=1.3)
points(bp_idx[which(sliMean==min(sliMean))],rep(-0.01,length(which(sliMean==min(sliMean)))),
col=alpha(virilist[colindex],0.4),pch=16, cex=1.5)
centrolist$slideMean$pos[centrolist$slideMean$Chr==chrom] <- bp_idx[which(sliMean==min(sliMean))]
centrolist$slideMean$val[centrolist$slideMean$Chr==chrom] <- sliMean[sliMean==min(sliMean)]
colindex <- colindex+1
}
w
HOM = zoo(fix$Prop.Hom[fix$Chr==chrom],order.by = fix$BP[fix$Chr==chrom])
fix$Prop.Hom
fix$Prop.Hom[fix$Chr==chrom]
fix$BP[fix$Chr==chrom]
duplicated(fix$BP[fix$Chr==chrom])
x = fix$BP[fix$Chr==chrom])]
x = fix$BP[fix$Chr==chrom]
x[duplicated(x)]
length(x[duplicated(x)])
fix <- test %>%
group_by(Chr, BP) %>%
summarise(N.Samples=sum(N.Samples), Prop.Hom=mean(Prop.Hom))
fix$Chr <- factor(fix$Chr)
x[duplicated(x)]
x = fix$BP[fix$Chr==chrom]
x[duplicated(x)]
plot(x=c(),y=c(),xlim=c(0,max(fix$BP[fix$Chr==chrom])), ylim=c(-0.05,1),
xlab=chrom,ylab="Homozygosity")
abline(h=-0.01)
HOM = zoo(fix$Prop.Hom[fix$Chr==chrom],order.by = fix$BP[fix$Chr==chrom])
sliMean = rollapply(HOM, width=w, by=1, FUN=mean, partial=F)
bp_idx = index(sliMean)
points(bp_idx[order(bp_idx)],sliMean[order(bp_idx)], type='l',col=alpha(virilist[colindex],0.4),lwd=1.3)
points(bp_idx[which(sliMean==min(sliMean))],rep(-0.01,length(which(sliMean==min(sliMean)))),
col=alpha(virilist[colindex],0.4),pch=16, cex=1.5)
centrolist$slideMean$pos[centrolist$slideMean$Chr==chrom] <- bp_idx[which(sliMean==min(sliMean))]
w=2000
HOM = zoo(fix$Prop.Hom[fix$Chr==chrom],order.by = fix$BP[fix$Chr==chrom])
sliMean = rollapply(HOM, width=w, by=1, FUN=mean, partial=F)
bp_idx = index(sliMean)
points(bp_idx[order(bp_idx)],sliMean[order(bp_idx)], type='l',col=alpha(virilist[colindex],0.4),lwd=1.3)
points(bp_idx[which(sliMean==min(sliMean))],rep(-0.01,length(which(sliMean==min(sliMean)))),
col=alpha(virilist[colindex],0.4),pch=16, cex=1.5)
centrolist$slideMean$pos[centrolist$slideMean$Chr==chrom] <- bp_idx[which(sliMean==min(sliMean))]
w=20000
HOM = zoo(fix$Prop.Hom[fix$Chr==chrom],order.by = fix$BP[fix$Chr==chrom])
sliMean = rollapply(HOM, width=w, by=1, FUN=mean, partial=F)
bp_idx = index(sliMean)
points(bp_idx[order(bp_idx)],sliMean[order(bp_idx)], type='l',col=alpha(virilist[colindex],0.4),lwd=1.3)
points(bp_idx[which(sliMean==min(sliMean))],rep(-0.01,length(which(sliMean==min(sliMean)))),
col=alpha(virilist[colindex],0.4),pch=16, cex=1.5)
centrolist$slideMean$pos[centrolist$slideMean$Chr==chrom] <- bp_idx[which(sliMean==min(sliMean))]
fix0 <- read_tsv("../../data/assoc_mapping/fam_prop_hom_fixed_sites.tsv", col_names=T)
fix <- fix0[fix0$N.Samples>0,]
fix <- fix[grep("chr.*",fix$Chr),]
oldnames <- colnames(fix[,4:length(colnames(fix))])
test <- select(fix,-Family)
fix <- test %>%
group_by(Chr, BP) %>%
summarise(N.Samples=sum(N.Samples), Prop.Hom=mean(Prop.Hom))
fix$Chr <- factor(fix$Chr)
virilist <- viridis(n=length(wsize_range))
colindex <- 1
par(mfrow=c(2,6))
centrolist <- list()
centrolist[['slideMean']] <- data.frame(pos = rep(0,6), Chr=levels(fix$Chr), val=rep(0,6))
store_means <- data.frame(BP=numeric(0),Chr=numeric(0),S.Mean=numeric(0))
for(chrom in levels(fix$Chr)){
plot(x=c(),y=c(),xlim=c(0,max(fix$BP[fix$Chr==chrom])), ylim=c(-0.05,1),
xlab=chrom,ylab="Homozygosity")
abline(h=-0.01)
for(w in wsize_range){
HOM = zoo(fix$Prop.Hom[fix$Chr==chrom],order.by = fix$BP[fix$Chr==chrom])
sliMean = rollapply(HOM, width=w, by=1, FUN=mean, partial=F)
bp_idx = index(sliMean)
points(bp_idx[order(bp_idx)],sliMean[order(bp_idx)], type='l',col=alpha(virilist[colindex],0.4),lwd=1.3)
points(bp_idx[which(sliMean==min(sliMean))],rep(-0.01,length(which(sliMean==min(sliMean)))),
col=alpha(virilist[colindex],0.4),pch=16, cex=1.5)
centrolist$slideMean$pos[centrolist$slideMean$Chr==chrom] <- bp_idx[which(sliMean==min(sliMean))]
centrolist$slideMean$val[centrolist$slideMean$Chr==chrom] <- sliMean[sliMean==min(sliMean)]
colindex <- colindex+1
}
colindex <- 1
tmp_df <- data.frame(BP=bp_idx, Chr=rep(chrom), S.Mean=sliMean)
store_means <- rbind(store_means,tmp_df)
}
View(fix)
fix <- fix[fix$Prop.Hom<1,]
w
virilist <- viridis(n=length(wsize_range))
colindex <- 1
par(mfrow=c(2,6))
centrolist <- list()
centrolist[['slideMean']] <- data.frame(pos = rep(0,6), Chr=levels(fix$Chr), val=rep(0,6))
store_means <- data.frame(BP=numeric(0),Chr=numeric(0),S.Mean=numeric(0))
for(chrom in levels(fix$Chr)){
plot(x=c(),y=c(),xlim=c(0,max(fix$BP[fix$Chr==chrom])), ylim=c(-0.05,1),
xlab=chrom,ylab="Homozygosity")
abline(h=-0.01)
for(w in wsize_range){
HOM = zoo(fix$Prop.Hom[fix$Chr==chrom],order.by = fix$BP[fix$Chr==chrom])
sliMean = rollapply(HOM, width=w, by=1, FUN=mean, partial=F)
bp_idx = index(sliMean)
points(bp_idx[order(bp_idx)],sliMean[order(bp_idx)], type='l',col=alpha(virilist[colindex],0.4),lwd=1.3)
points(bp_idx[which(sliMean==min(sliMean))],rep(-0.01,length(which(sliMean==min(sliMean)))),
col=alpha(virilist[colindex],0.4),pch=16, cex=1.5)
centrolist$slideMean$pos[centrolist$slideMean$Chr==chrom] <- bp_idx[which(sliMean==min(sliMean))]
centrolist$slideMean$val[centrolist$slideMean$Chr==chrom] <- sliMean[sliMean==min(sliMean)]
colindex <- colindex+1
}
colindex <- 1
tmp_df <- data.frame(BP=bp_idx, Chr=rep(chrom), S.Mean=sliMean)
store_means <- rbind(store_means,tmp_df)
}
hom_path <- "../../data/assoc_mapping/fam_prop_hom_fixed_sites.tsv"
indv <- read.table('../../data/individuals', header=T)
scaffolds <- read.table("../../data/ref_genome/ordered_genome/merged.fasta.ann", stringsAsFactors = F)
grouped <- "T"
chrom_sizes <- data.frame(); chrom_names=c()
for(row in seq(1,nrow(scaffolds))){
if(length(grep('chr',scaffolds[row,2]))){
chrom_names <- append(chrom_names,as.character(scaffolds[row,2]))
chrom_sizes <- rbind(chrom_sizes, scaffolds[row+1,c(1,2)])
}
}
chrom_sizes <- cbind(chrom_names, chrom_sizes)
rownames(chrom_sizes) <- NULL
colnames(chrom_sizes) <- c("chrom","start","length")
chrom_sizes$length <- as.numeric(chrom_sizes$length)
chrom_sizes$mid <- chrom_sizes$start + (chrom_sizes$length/2)  # Middle position in chrom. used for plotting
sum_stat <- read_tsv(hom_path, col_names=T)
sum_stat <- sum_stat[sum_stat$N.Samples>0,]
CSD_like <- sum_stat %>% mutate(CSD=((1-Prop.Hom.F)+Prop.Hom.M)/2)
CSD_like <- CSD_like %>% arrange(Chr, BP)
chrom <- CSD_like[grep("chr.*", CSD_like$Chr),]
chrom$pos <- paste(chrom$Chr,chrom$BP, sep="_")
chrom$Chr <- as.factor(chrom$Chr)
chrom$Chr <- droplevels(chrom$Chr)
genomic_pos <- function(snp){
# Computing total basepair position in genome as start(chrom)+bp
gen_pos <- as.numeric(snp["BP"]) + chrom_sizes[chrom_sizes$chr==snp["Chr"],"start"]
return(gen_pos)
}
chrom$tot_BP <-apply(X = chrom,MARGIN = 1, FUN=genomic_pos)
ggplot(data=chrom,aes(x=BP,y=CSD, col=Family)) + geom_point() +facet_grid(~Chr, scales = "free_x")
compact_chrom <- chrom %>%
group_by(Locus.ID) %>%
summarise(avg=mean(CSD), BP=mean(tot_BP)) %>%
arrange(BP)
plot(compact_chrom$BP, compact_chrom$avg, type="l", ylab='prop. CSD', xlab="genomic position",
main="Proportion of CSD individuals, averaged across families")
plot(compact_chrom$BP, compact_chrom$avg, type="l", ylab='prop. CSD', xlab="genomic position",
main="Proportion of CSD individuals, averaged across families")
abline(v=chrom_sizes$start, lty=2,col="blue")
text(x = chrom_sizes$mid,y=0.2,labels = chrom_sizes$chrom)
highCSD <- chrom %>%
group_by(fam) %>%
filter(CSD==max(CSD))
top_CSD <- chrom[chrom$CSD>=0.8,]
hist(top_CSD$tot_BP,breaks=100, main="Top CSD candidates", xlab="Genomic position", ylab="N hits >= 0.8", col="grey")
abline(v=chrom_sizes$start, lty=2,col="blue")
text(x = chrom_sizes$mid,y=17,labels = chrom_sizes$chrom)
ggplot(data=chrom, aes(x=tot_BP, y=CSD))+ geom_line() +
facet_wrap(~Family,drop = F) + #geom_text(data=highCSD,aes(label=pos, y=CSD), size=1.9)+
geom_vline(data=chrom_sizes, aes(xintercept=start), col="blue", lty=2) +
ylab("Prop.CSD")
20*106/656
178*106/656
wsize_range <- 20  # Size of the moving average window
sp_range <- 0.75  # Proportion of SNPs to be included in each local regression
pack <- c("ggplot2","dplyr","viridis","zoo", "readr")
lapply(pack, require, character.only = TRUE)
indv <- read.table('../../data/individuals', header=T)
grouped <- "F"
fix0 <- read.table("../../data/assoc_mapping/grouped_outpool_prop_hom_fixed_sites.tsv",
header=T, na.strings='NA', sep='\t')
fix <- fix[!is.na(fix$Prop.Hom),]
fix <- fix0[fix0$N.Samples>0,]
fix <- fix[!is.na(fix$Prop.Hom),]
fix0 <- read.table("../../data/assoc_mapping/fam_outpool_prop_hom_fixed_sites.tsv",
header=T, na.strings='NA', sep='\t')
fix <- fix0[fix0$N.Samples>0,]
fix <- fix[!is.na(fix$Prop.Hom),]
fix <- fix0[fix0$N.Samples>0,]
fix <- fix[grep("chr.*",fix$Chr),]
fix$Chr <- factor(fix$Chr)
fix$Chr <- droplevels(fix$Chr)
fix <- fix[!is.na(fix$Prop.Hom),]
virilist <- viridis(n=length(wsize_range))
colindex <- 1
par(mfrow=c(2,6))
centrolist <- list()
centrolist[['slideMean']] <- data.frame(pos = rep(0,6), Chr=levels(fix$Chr), val=rep(0,6))
store_means <- data.frame(BP=numeric(0),Chr=numeric(0),S.Mean=numeric(0))
for(chrom in levels(fix$Chr)){
plot(x=c(),y=c(),xlim=c(0,max(fix$BP[fix$Chr==chrom])), ylim=c(-0.05,1),
xlab=chrom,ylab="Homozygosity")
abline(h=-0.01)
for(w in wsize_range){
HOM = zoo(fix$Prop.Hom[fix$Chr==chrom],order.by = fix$BP[fix$Chr==chrom])
sliMean = rollapply(HOM, width=w, by=1, FUN=mean, partial=F)
bp_idx = index(sliMean)
points(bp_idx[order(bp_idx)],sliMean[order(bp_idx)], type='l',col=alpha(virilist[colindex],0.4),lwd=1.3)
points(bp_idx[which(sliMean==min(sliMean, na.rm=T))],rep(-0.01,length(which(sliMean==min(sliMean, na.rm=T)))),
col=alpha(virilist[colindex],0.4),pch=16, cex=1.5)
centrolist$slideMean$pos[centrolist$slideMean$Chr==chrom] <- bp_idx[which(sliMean==min(sliMean, na.rm=T))]
centrolist$slideMean$val[centrolist$slideMean$Chr==chrom] <- sliMean[sliMean==min(sliMean, na.rm=T)]
colindex <- colindex+1
}
colindex <- 1
tmp_df <- data.frame(BP=bp_idx, Chr=rep(chrom), S.Mean=sliMean)
store_means <- rbind(store_means,tmp_df)
}
wsize_range <- seq(5, 40, 1)
sp_range <- seq(0.15, 1, 0.01)
virilist <- viridis(n=length(wsize_range))
colindex <- 1
par(mfrow=c(2,6))
centrolist <- list()
centrolist[['slideMean']] <- data.frame(pos = rep(0,6), Chr=levels(fix$Chr), val=rep(0,6))
store_means <- data.frame(BP=numeric(0),Chr=numeric(0),S.Mean=numeric(0))
for(chrom in levels(fix$Chr)){
plot(x=c(),y=c(),xlim=c(0,max(fix$BP[fix$Chr==chrom])), ylim=c(-0.05,1),
xlab=chrom,ylab="Homozygosity")
abline(h=-0.01)
for(w in wsize_range){
HOM = zoo(fix$Prop.Hom[fix$Chr==chrom],order.by = fix$BP[fix$Chr==chrom])
sliMean = rollapply(HOM, width=w, by=1, FUN=mean, partial=F)
bp_idx = index(sliMean)
points(bp_idx[order(bp_idx)],sliMean[order(bp_idx)], type='l',col=alpha(virilist[colindex],0.4),lwd=1.3)
points(bp_idx[which(sliMean==min(sliMean, na.rm=T))],rep(-0.01,length(which(sliMean==min(sliMean, na.rm=T)))),
col=alpha(virilist[colindex],0.4),pch=16, cex=1.5)
centrolist$slideMean$pos[centrolist$slideMean$Chr==chrom] <- bp_idx[which(sliMean==min(sliMean, na.rm=T))]
centrolist$slideMean$val[centrolist$slideMean$Chr==chrom] <- sliMean[sliMean==min(sliMean, na.rm=T)]
colindex <- colindex+1
}
colindex <- 1
tmp_df <- data.frame(BP=bp_idx, Chr=rep(chrom), S.Mean=sliMean)
store_means <- rbind(store_means,tmp_df)
}
warnings()
virilist <- viridis(n=length(sp_range))
colindex <- 1
#par(mfrow=c(1,6))
centrolist[['loess']] <- data.frame(pos = rep(0,6), Chr=levels(fix$Chr), val=rep(0,6))
for(chrom in levels(fix$Chr)){
plot(x=c(),y=c(),xlim=c(0,max(fix$BP[fix$Chr==chrom])), ylim=c(-0.05,1),
xlab=chrom,ylab="Homozygosity")
abline(h=-0.01)
for(sp in sp_range){
mod <- loess(data=fix[fix$Chr==chrom,], degree=2,
formula=Prop.Hom~BP, weights=N.Samples, span=sp, model=T)
points(mod$x[order(mod$x)],mod$fitted[order(mod$x)], type='l',col=alpha(virilist[colindex],0.4),lwd=1.3)
points(mod$x[mod$fitted==min(mod$fitted)],rep(-0.01,length(mod$x[mod$fitted==min(mod$fitted)])),
col=alpha(virilist[colindex],0.4),pch=16, cex=1.5)
centrolist$loess$pos[centrolist$loess$Chr==chrom] <- mod$x[mod$fitted==min(mod$fitted)]
centrolist$loess$val[centrolist$loess$Chr==chrom] <- min(mod$fitted)
colindex <- colindex+1
}
colindex <- 1
}
pack <- c("ggplot2","dplyr","viridis","zoo", "readr")
lapply(pack, require, character.only = TRUE)
indv <- read.table('../../data/individuals', header=T)
grouped <- "F"
#fix0 <- read_tsv("../../data/assoc_mapping/fam_prop_hom_fixed_sites.tsv", col_names=T, na='NA')
fix0 <- read.table("../../data/assoc_mapping/grouped_outpool_prop_hom_fixed_sites.tsv",
header=T, na.strings='NA', sep='\t')
fix <- fix0[fix0$N.Samples>0,]
fix <- fix[grep("chr.*",fix$Chr),]
#test <- select(fix,-Family)
#fix <- test %>%
#  group_by(Chr, BP) %>%
#  summarise(N.Samples=sum(N.Samples, na.rm=T), Prop.Hom=mean(Prop.Hom, na.rm=T))
fix$Chr <- factor(fix$Chr)
fix$Chr <- droplevels(fix$Chr)
fix <- fix[!is.na(fix$Prop.Hom),]
#==== COMPUTE SLIDING MEANS ====#
# Allows to try different values of window size in a range
# Note that the step size is fixed to 1 but can be changed
# directly in the code if neded.
virilist <- viridis(n=length(wsize_range))
colindex <- 1
par(mfrow=c(2,6))
centrolist <- list()
centrolist[['slideMean']] <- data.frame(pos = rep(0,6), Chr=levels(fix$Chr), val=rep(0,6))
store_means <- data.frame(BP=numeric(0),Chr=numeric(0),S.Mean=numeric(0))
for(chrom in levels(fix$Chr)){
plot(x=c(),y=c(),xlim=c(0,max(fix$BP[fix$Chr==chrom])), ylim=c(-0.05,1),
xlab=chrom,ylab="Homozygosity")
abline(h=-0.01)
for(w in wsize_range){
HOM = zoo(fix$Prop.Hom[fix$Chr==chrom],order.by = fix$BP[fix$Chr==chrom])
sliMean = rollapply(HOM, width=w, by=1, FUN=mean, partial=F)
bp_idx = index(sliMean)
points(bp_idx[order(bp_idx)],sliMean[order(bp_idx)], type='l',col=alpha(virilist[colindex],0.4),lwd=1.3)
points(bp_idx[which(sliMean==min(sliMean, na.rm=T))],rep(-0.01,length(which(sliMean==min(sliMean, na.rm=T)))),
col=alpha(virilist[colindex],0.4),pch=16, cex=1.5)
centrolist$slideMean$pos[centrolist$slideMean$Chr==chrom] <- bp_idx[which(sliMean==min(sliMean, na.rm=T))]
centrolist$slideMean$val[centrolist$slideMean$Chr==chrom] <- sliMean[sliMean==min(sliMean, na.rm=T)]
colindex <- colindex+1
}
colindex <- 1
tmp_df <- data.frame(BP=bp_idx, Chr=rep(chrom), S.Mean=sliMean)
store_means <- rbind(store_means,tmp_df)
}
#==== COMPUTE LOCAL REGRESSIONS ====#
# Allows to try all different values of span in a range.
virilist <- viridis(n=length(sp_range))
colindex <- 1
#par(mfrow=c(1,6))
centrolist[['loess']] <- data.frame(pos = rep(0,6), Chr=levels(fix$Chr), val=rep(0,6))
for(chrom in levels(fix$Chr)){
plot(x=c(),y=c(),xlim=c(0,max(fix$BP[fix$Chr==chrom])), ylim=c(-0.05,1),
xlab=chrom,ylab="Homozygosity")
abline(h=-0.01)
for(sp in sp_range){
mod <- loess(data=fix[fix$Chr==chrom,], degree=2,
formula=Prop.Hom~BP, weights=N.Samples, span=sp, model=T)
points(mod$x[order(mod$x)],mod$fitted[order(mod$x)], type='l',col=alpha(virilist[colindex],0.4),lwd=1.3)
points(mod$x[mod$fitted==min(mod$fitted)],rep(-0.01,length(mod$x[mod$fitted==min(mod$fitted)])),
col=alpha(virilist[colindex],0.4),pch=16, cex=1.5)
centrolist$loess$pos[centrolist$loess$Chr==chrom] <- mod$x[mod$fitted==min(mod$fitted)]
centrolist$loess$val[centrolist$loess$Chr==chrom] <- min(mod$fitted)
colindex <- colindex+1
}
colindex <- 1
}
View(fix0)
if(length(sp_range)==1 & length(wsize_range)==1){
zoomfactor <- 1000000  # For aesthetics
loessPlot <- ggplot(fix, aes(x=BP/zoomfactor, y=Prop.Hom, weight=N.Samples)) + facet_grid(~Chr, scales = 'free_x') +
geom_point(col='grey70') + geom_smooth(aes(col='Local regression'),
method='loess', span=sp_range) +
xlab("Genomic position (Mb)") + ylab("Homozygosity") +
geom_segment(data=centrolist$loess, aes(x=pos/zoomfactor,xend=pos/zoomfactor, y=0, yend=val, col='Local regression'),
lty=2, lwd=1.1, inherit.aes = F) + theme_bw() +
geom_line(data=store_means, aes(x=BP/zoomfactor, y=S.Mean, col='Moving average'), lwd=1.1, inherit.aes = F) +
geom_segment(data=centrolist$slideMean, aes(x=pos/zoomfactor,xend=pos/zoomfactor, y=0, yend=val, col='Moving average'),
lty=2, lwd=0.9, inherit.aes = F) +
scale_color_brewer(palette="Set1") + scale_fill_brewer(palette="Set1") +
guides(color=guide_legend(title="Method")) +
geom_point(data=centrolist$slideMean, aes(x=pos/zoomfactor, y=0, col='Moving average'), inherit.aes = F, size=2) +
geom_point(data=centrolist$loess, aes(x=pos/zoomfactor, y=0, col='Local regression'), inherit.aes = F, size=2)
loessPlot
}
loessPlot <- ggplot(fix, aes(x=BP/zoomfactor, y=Prop.Hom, weight=N.Samples)) + facet_grid(~Chr, scales = 'free_x') +
geom_point(col='grey70') + geom_smooth(aes(col='Local regression'),
method='loess', span=sp_range) +
xlab("Genomic position (Mb)") + ylab("Homozygosity") +
geom_segment(data=centrolist$loess, aes(x=pos/zoomfactor,xend=pos/zoomfactor, y=0, yend=val, col='Local regression'),
lty=2, lwd=1.1, inherit.aes = F) + theme_bw() +
geom_line(data=store_means, aes(x=BP/zoomfactor, y=S.Mean, col='Moving average'), lwd=1.1, inherit.aes = F) +
geom_segment(data=centrolist$slideMean, aes(x=pos/zoomfactor,xend=pos/zoomfactor, y=0, yend=val, col='Moving average'),
lty=2, lwd=0.9, inherit.aes = F) +
scale_color_brewer(palette="Set1") + scale_fill_brewer(palette="Set1") +
guides(color=guide_legend(title="Method")) +
geom_point(data=centrolist$slideMean, aes(x=pos/zoomfactor, y=0, col='Moving average'), inherit.aes = F, size=2) +
geom_point(data=centrolist$loess, aes(x=pos/zoomfactor, y=0, col='Local regression'), inherit.aes = F, size=2)
loessPlot
zoomfactor <- 1000000  # For aesthetics
loessPlot <- ggplot(fix, aes(x=BP/zoomfactor, y=Prop.Hom, weight=N.Samples)) + facet_grid(~Chr, scales = 'free_x') +
geom_point(col='grey70') + geom_smooth(aes(col='Local regression'),
method='loess', span=sp_range) +
xlab("Genomic position (Mb)") + ylab("Homozygosity") +
geom_segment(data=centrolist$loess, aes(x=pos/zoomfactor,xend=pos/zoomfactor, y=0, yend=val, col='Local regression'),
lty=2, lwd=1.1, inherit.aes = F) + theme_bw() +
geom_line(data=store_means, aes(x=BP/zoomfactor, y=S.Mean, col='Moving average'), lwd=1.1, inherit.aes = F) +
geom_segment(data=centrolist$slideMean, aes(x=pos/zoomfactor,xend=pos/zoomfactor, y=0, yend=val, col='Moving average'),
lty=2, lwd=0.9, inherit.aes = F) +
scale_color_brewer(palette="Set1") + scale_fill_brewer(palette="Set1") +
guides(color=guide_legend(title="Method")) +
geom_point(data=centrolist$slideMean, aes(x=pos/zoomfactor, y=0, col='Moving average'), inherit.aes = F, size=2) +
geom_point(data=centrolist$loess, aes(x=pos/zoomfactor, y=0, col='Local regression'), inherit.aes = F, size=2)
loessPlot
wsize_range <- 20  # Size of the moving average window
sp_range <- 0.75  # Pro
# This script is used to differentiate between telocentric and metacentric
# chromosomes and locate each centromere. This is done by using the density
# of heterozygous sites in the mother that become homozygous in offspring
# along the chromosome.
# 30.07.2017
# Cyril Matthey-Doret
#==== SELECT PARAMETERS ====#
wsize_range <- 20  # Size of the moving average window
sp_range <- 0.75  # Proportion of SNPs to be included in each local regression
# wsize_range <- seq(5, 40, 1)
# sp_range <- seq(0.15, 1, 0.01)
#==== LOAD PACKAGES AND DATA ====#
pack <- c("ggplot2","dplyr","viridis","zoo", "readr")
lapply(pack, require, character.only = TRUE)
indv <- read.table('../../data/individuals', header=T)
grouped <- "F"
fix0 <- read.table("../../data/assoc_mapping/grouped_outpool_prop_hom_fixed_sites.tsv",
header=T, na.strings='NA', sep='\t')
fix <- fix0[fix0$N.Samples>0,]
fix <- fix[grep("chr.*",fix$Chr),]
#test <- select(fix,-Family)
#fix <- test %>%
#  group_by(Chr, BP) %>%
#  summarise(N.Samples=sum(N.Samples, na.rm=T), Prop.Hom=mean(Prop.Hom, na.rm=T))
fix$Chr <- factor(fix$Chr)
fix$Chr <- droplevels(fix$Chr)
fix <- fix[!is.na(fix$Prop.Hom),]
#==== COMPUTE SLIDING MEANS ====#
# Allows to try different values of window size in a range
# Note that the step size is fixed to 1 but can be changed
# directly in the code if neded.
virilist <- viridis(n=length(wsize_range))
colindex <- 1
par(mfrow=c(2,6))
centrolist <- list()
centrolist[['slideMean']] <- data.frame(pos = rep(0,6), Chr=levels(fix$Chr), val=rep(0,6))
store_means <- data.frame(BP=numeric(0),Chr=numeric(0),S.Mean=numeric(0))
for(chrom in levels(fix$Chr)){
plot(x=c(),y=c(),xlim=c(0,max(fix$BP[fix$Chr==chrom])), ylim=c(-0.05,1),
xlab=chrom,ylab="Homozygosity")
abline(h=-0.01)
for(w in wsize_range){
HOM = zoo(fix$Prop.Hom[fix$Chr==chrom],order.by = fix$BP[fix$Chr==chrom])
sliMean = rollapply(HOM, width=w, by=1, FUN=mean, partial=F)
bp_idx = index(sliMean)
points(bp_idx[order(bp_idx)],sliMean[order(bp_idx)], type='l',col=alpha(virilist[colindex],0.4),lwd=1.3)
points(bp_idx[which(sliMean==min(sliMean, na.rm=T))],rep(-0.01,length(which(sliMean==min(sliMean, na.rm=T)))),
col=alpha(virilist[colindex],0.4),pch=16, cex=1.5)
centrolist$slideMean$pos[centrolist$slideMean$Chr==chrom] <- bp_idx[which(sliMean==min(sliMean, na.rm=T))]
centrolist$slideMean$val[centrolist$slideMean$Chr==chrom] <- sliMean[sliMean==min(sliMean, na.rm=T)]
colindex <- colindex+1
}
colindex <- 1
tmp_df <- data.frame(BP=bp_idx, Chr=rep(chrom), S.Mean=sliMean)
store_means <- rbind(store_means,tmp_df)
}
#==== COMPUTE LOCAL REGRESSIONS ====#
# Allows to try all different values of span in a range.
virilist <- viridis(n=length(sp_range))
colindex <- 1
#par(mfrow=c(1,6))
centrolist[['loess']] <- data.frame(pos = rep(0,6), Chr=levels(fix$Chr), val=rep(0,6))
for(chrom in levels(fix$Chr)){
plot(x=c(),y=c(),xlim=c(0,max(fix$BP[fix$Chr==chrom])), ylim=c(-0.05,1),
xlab=chrom,ylab="Homozygosity")
abline(h=-0.01)
for(sp in sp_range){
mod <- loess(data=fix[fix$Chr==chrom,], degree=2,
formula=Prop.Hom~BP, weights=N.Samples, span=sp, model=T)
points(mod$x[order(mod$x)],mod$fitted[order(mod$x)], type='l',col=alpha(virilist[colindex],0.4),lwd=1.3)
points(mod$x[mod$fitted==min(mod$fitted)],rep(-0.01,length(mod$x[mod$fitted==min(mod$fitted)])),
col=alpha(virilist[colindex],0.4),pch=16, cex=1.5)
centrolist$loess$pos[centrolist$loess$Chr==chrom] <- mod$x[mod$fitted==min(mod$fitted)]
centrolist$loess$val[centrolist$loess$Chr==chrom] <- min(mod$fitted)
colindex <- colindex+1
}
colindex <- 1
}
#==== VISUALIZE ====#
# Will only run if the user chose one single value for each parameter.
if(length(sp_range)==1 & length(wsize_range)==1){
zoomfactor <- 1000000  # For aesthetics
loessPlot <- ggplot(fix, aes(x=BP/zoomfactor, y=Prop.Hom, weight=N.Samples)) + facet_grid(~Chr, scales = 'free_x') +
geom_point(col='grey70') + geom_smooth(aes(col='Local regression'),
method='loess', span=sp_range) +
xlab("Genomic position (Mb)") + ylab("Homozygosity") +
geom_segment(data=centrolist$loess, aes(x=pos/zoomfactor,xend=pos/zoomfactor, y=0, yend=val, col='Local regression'),
lty=2, lwd=1.1, inherit.aes = F) + theme_bw() +
geom_line(data=store_means, aes(x=BP/zoomfactor, y=S.Mean, col='Moving average'), lwd=1.1, inherit.aes = F) +
geom_segment(data=centrolist$slideMean, aes(x=pos/zoomfactor,xend=pos/zoomfactor, y=0, yend=val, col='Moving average'),
lty=2, lwd=0.9, inherit.aes = F) +
scale_color_brewer(palette="Set1") + scale_fill_brewer(palette="Set1") +
guides(color=guide_legend(title="Method")) +
geom_point(data=centrolist$slideMean, aes(x=pos/zoomfactor, y=0, col='Moving average'), inherit.aes = F, size=2) +
geom_point(data=centrolist$loess, aes(x=pos/zoomfactor, y=0, col='Local regression'), inherit.aes = F, size=2)
loessPlot
}
centrolist$loess
centrolist$loess
