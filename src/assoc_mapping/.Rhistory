stopifnot(load_packages())
}
sum_table <- in_table %>%
filter(Generation=='F4') %>%  # Excluding mothers (F3 generation)
select(Sex, Family, Ploidy) %>%  # Subsetting only factors of interest
group_by(Family) %>%
unite(identity, c(Family, Sex, Ploidy), remove=T, sep="_") %>%  # uniting 3 columns into 1 containing 3 informations
table(.)  # Getting counts for each combination (all individuals together)
extr_ID <- function(family, sex, ploidy){
# Function for extracting counts of haploid males/diploid males/females per family
ID_count <- sum_table[names(sum_table)==paste(family, sex, ploidy, sep='_')]
return(ifelse(test = length(ID_count)>0, yes = ID_count, no = 0))
}
store_fam_ploidy <- as.data.frame(matrix(nrow=length(levels(in_table$Family)), ncol = 4))
colnames(store_fam_ploidy) <- c('Family', 'diploid_son', 'haploid_son', 'daughter')
rownames(store_fam_ploidy) <- as.character(levels(in_table$Family))
pdf(paste0('reports/lab_book/ploidy_per_fam/', basename(in_path), ".pdf"))
par(mfrow=c(2, 6))
for(i in LETTERS){  # Producing a piechart for each family
if(i %in% levels(in_table$Family)){
fam_count <- rep(0, 3)
fam_count[1] <- extr_ID(i, 'M', 'D')
fam_count[2] <- extr_ID(i, 'M', 'H')
fam_count[3] <- extr_ID(i, 'F', 'D')
tmp_table <- data.frame(identity = c('Diploid Son', 'Haploid Son', 'Daughter'),
count = fam_count)
store_fam_ploidy[i,] <- append(i,fam_count)
pie(x = tmp_table$count, labels = tmp_table$identity, main=i)
}
}
par(mfrow=c(4, 6))
for(i in LETTERS){  # Producing a piechart for each family
if(i %in% levels(in_table$Family)){
fam_count <- rep(0, 3)
fam_count[1] <- extr_ID(i, 'M', 'D')
fam_count[2] <- extr_ID(i, 'M', 'H')
fam_count[3] <- extr_ID(i, 'F', 'D')
tmp_table <- data.frame(identity = c('Diploid Son', 'Haploid Son', 'Daughter'),
count = fam_count)
store_fam_ploidy[i,] <- append(i,fam_count)
pie(x = tmp_table$count, labels = tmp_table$identity, main=i)
}
}
par(mfrow=c(3, 6))
for(i in LETTERS){  # Producing a piechart for each family
if(i %in% levels(in_table$Family)){
fam_count <- rep(0, 3)
fam_count[1] <- extr_ID(i, 'M', 'D')
fam_count[2] <- extr_ID(i, 'M', 'H')
fam_count[3] <- extr_ID(i, 'F', 'D')
tmp_table <- data.frame(identity = c('Diploid Son', 'Haploid Son', 'Daughter'),
count = fam_count)
store_fam_ploidy[i,] <- append(i,fam_count)
pie(x = tmp_table$count, labels = tmp_table$identity, main=i)
}
}
par(mfrow=c(3, 7))
for(i in LETTERS){  # Producing a piechart for each family
if(i %in% levels(in_table$Family)){
fam_count <- rep(0, 3)
fam_count[1] <- extr_ID(i, 'M', 'D')
fam_count[2] <- extr_ID(i, 'M', 'H')
fam_count[3] <- extr_ID(i, 'F', 'D')
tmp_table <- data.frame(identity = c('Diploid Son', 'Haploid Son', 'Daughter'),
count = fam_count)
store_fam_ploidy[i,] <- append(i,fam_count)
pie(x = tmp_table$count, labels = tmp_table$identity, main=i)
}
}
levels(indv$Family)
par(mfrow=c(3, 7))
for(i in levels(indv$Family)){  # Producing a piechart for each family
if(i %in% levels(in_table$Family)){
fam_count <- rep(0, 3)
fam_count[1] <- extr_ID(i, 'M', 'D')
fam_count[2] <- extr_ID(i, 'M', 'H')
fam_count[3] <- extr_ID(i, 'F', 'D')
tmp_table <- data.frame(identity = c('Diploid Son', 'Haploid Son', 'Daughter'),
count = fam_count)
store_fam_ploidy[i,] <- append(i,fam_count)
pie(x = tmp_table$count, labels = tmp_table$identity, main=i)
}
}
store_fam_ploidy
require(ggplot2)
sum_table
in_table
in_table %>%
filter(Generation=='F4')
off_prop <- in_table %>%
filter(Generation=='F4') %>%
select(Family, Sex, Ploidy) %>%
group_by(Family) %>%
summarise(`Haploid male`=nrow(Ploidy=='H'),
`Diploid male`=nrow(Ploidy=='D' & Sex=='M'),
`Female`=nrow(Sex=='F'))
off_prop <- in_table %>%
filter(Generation=='F4') %>%
select(Family, Sex, Ploidy) %>%
group_by(Family)
off_prop <- in_table %>%
filter(Generation=='F4') %>%
select(Family, Sex, Ploidy) %>%
group_by(Family) %>%
summarise(`Haploid male`=nrow(Ploidy=='H'),
`Diploid male`=nrow(Ploidy=='D' & Sex=='M'),
`Female`=nrow(Sex=='F'))
off_prop <- in_table %>%
filter(Generation=='F4') %>%
select(Family, Sex, Ploidy) %>%
group_by(Family) %>%
summarise(Haploid_male=nrow(Ploidy=='H'),
Diploid_male=nrow(Ploidy=='D' & Sex=='M'),
Female=nrow(Sex=='F'))
in_table %>%
filter(Generation=='F4') %>%
select(Family, Sex, Ploidy) %>%
group_by(Family)
off_prop <- in_table %>%
filter(Generation=='F4') %>%
select(Family, Sex, Ploidy) %>%
group_by(Family) %>%
summarise(`Haploid male`=nrow(Ploidy=='H'))
off_prop <- in_table %>%
filter(Generation=='F4') %>%
select(Family, Sex, Ploidy) %>%
group_by(Family) %>%
summarise(`Haploid male`=sum(Ploidy=='H'))
off_prop
off_prop <- in_table %>%
filter(Generation=='F4') %>%
select(Family, Sex, Ploidy) %>%
group_by(Family) %>%
summarise(`Haploid male`=sum(Ploidy=='H'),
`Diploid male`=sum(Ploidy=='D' & Sex=='M'),
`Female`=sum(Sex=='F'))
View(off_prop)
in_table %>%
filter(Generation=='F4') %>%
select(Family, Sex, Ploidy) %>%
group_by(Family) %>%
summarise(`Haploid male`=sum(Ploidy=='H'),
`Diploid male`=sum(Ploidy=='D' & Sex=='M'),
`Female`=sum(Sex=='F')) %>%
unite(`Haploid male`, `Diploid male`, `Female`)
off_prop <- in_table %>%
filter(Generation=='F4') %>%
select(Family, Sex, Ploidy) %>%
group_by(Family) %>%
summarise(`Haploid male`=sum(Ploidy=='H'),
`Diploid male`=sum(Ploidy=='D' & Sex=='M'),
`Female`=sum(Sex=='F')) %>%
unite(col=category, `Haploid male`, `Diploid male`, `Female`)
View(off_prop)
library(reshape2)
off_prop <- in_table %>%
filter(Generation=='F4') %>%
select(Family, Sex, Ploidy) %>%
group_by(Family) %>%
summarise(`Haploid male`=sum(Ploidy=='H'),
`Diploid male`=sum(Ploidy=='D' & Sex=='M'),
`Female`=sum(Sex=='F')) %>%
melt(category, `Haploid male`, `Diploid male`, `Female`)
off_prop <- in_table %>%
filter(Generation=='F4') %>%
select(Family, Sex, Ploidy) %>%
group_by(Family) %>%
summarise(`Haploid male`=sum(Ploidy=='H'),
`Diploid male`=sum(Ploidy=='D' & Sex=='M'),
`Female`=sum(Sex=='F')) %>%
melt(value.name = category, `Haploid male`, `Diploid male`, `Female`)
off_prop <- in_table %>%
filter(Generation=='F4') %>%
select(Family, Sex, Ploidy) %>%
group_by(Family) %>%
summarise(`Haploid male`=sum(Ploidy=='H'),
`Diploid male`=sum(Ploidy=='D' & Sex=='M'),
`Female`=sum(Sex=='F'))
melt(off_prop, value.name = category, `Haploid male`, `Diploid male`, `Female`)
melt(off_prop, value.name = category, "Haploid male", `Diploid male`, `Female`)
melt(off_prop, value.name = category, "Haploid male", "Diploid male", "Female")
melt(off_prop, value.name = "category", "Haploid male", "Diploid male", "Female")
melt(off_prop, value.name = "Count", id.vars = c("Haploid male", "Diploid male", "Female"))
melt(off_prop, id.vars = "Family", value.name = "Count", measure.vars = c("Haploid male", "Diploid male", "Female"))
off_prop <- melt(off_prop, id.vars = "Family", value.name = "Count",
measure.vars = c("Haploid male", "Diploid male", "Female"))
require(reshape2)
ggplot(data=off_prop, aes(x=Family, y=Count, fill=variable))
ggplot(data=off_prop, aes(x=Family, y=Count, fill=variable)) + geom_bar(stat='identity')
mean(off_prop[off_prop$variable=='Haploid male'])
mean(off_prop$Count[off_prop$variable=='Haploid male'])
mean(off_prop$Count[off_prop$variable=='Diploid male'])
mean(off_prop$Count[off_prop$variable=='Female'])
library(ggplot2)
library(dplyr)
library(tidyr)
depth <- read.table("../../data/coverage/site_depth.txt", header=T)  # Loading data
depth <- depth[grep("chr*",depth$CHROM),]
depth$CHROM <- droplevels(depth$CHROM)
depth$POS <- round(depth$POS, digits=-3)
depth <- depth %>%
group_by(CHROM, POS, Family) %>%
mutate(avg=mean(MEAN_DEPTH)) %>%
select(-MEAN_DEPTH) %>%
rename(MEAN_DEPTH=avg)
depth <- subset(depth, !duplicated(subset(
depth, select=c(CHROM, POS, Family))))
sp_depth <- spread(depth,Family,MEAN_DEPTH)
sp_depth <- sp_depth[rowSums(!is.na(sp_depth[,3:14]))>0,]
ggplot(data=depth,aes(x=POS,y=MEAN_DEPTH,col=Family)) +
facet_grid(CHROM~., scales = 'free_x') + geom_point(size=0.3) +
geom_line(alpha=0.4) + theme_bw() + ggtitle("Coverage across genome, 1kb windows") +
xlab("Genomic position of SNP") + ylab("Mean coverage")
if(FALSE){
mergecov <- depth
ggplot(data=depth,(aes(x=POS,y=MEAN_DEPTH,col=Family))) +
facet_grid(~CHROM,scales = 'free_x') + geom_point(alpha=0.3)
slide <- data.frame()
for(chr in levels(mergecov$CHROM)){
for(bp in unique(mergecov$POS[mergecov$CHROM==chr])){
curr <- data.frame(chr,bp,round(mean(mergecov$MEAN_DEPTH[mergecov$POS==bp & mergecov$CHROM==chr]),3))
slide <- rbind(slide,curr)
}
}
colnames(slide) <- c("CHROM","POS","DEPTH")
ggplot(data=slide,aes(x=POS,y=DEPTH)) + geom_line() + facet_wrap(~CHROM,scales = 'free_x')
}
mergecov <- depth
ggplot(data=depth,(aes(x=POS,y=MEAN_DEPTH,col=Family))) +
facet_grid(~CHROM,scales = 'free_x') + geom_point(alpha=0.3)
slide <- data.frame()
for(chr in levels(mergecov$CHROM)){
for(bp in unique(mergecov$POS[mergecov$CHROM==chr])){
curr <- data.frame(chr,bp,round(mean(mergecov$MEAN_DEPTH[mergecov$POS==bp & mergecov$CHROM==chr]),3))
slide <- rbind(slide,curr)
}
}
colnames(slide) <- c("CHROM","POS","DEPTH")
ggplot(data=slide,aes(x=POS,y=DEPTH)) + geom_line() + facet_wrap(~CHROM,scales = 'free_x')
mergecov <- depth
ggplot(data=depth,(aes(x=POS,y=MEAN_DEPTH,col=Family))) +
facet_grid(~CHROM,scales = 'free_x') + geom_point(alpha=0.3)
slide <- data.frame()
for(chr in levels(mergecov$CHROM)){
for(bp in unique(mergecov$POS[mergecov$CHROM==chr])){
curr <- data.frame(chr,bp,round(mean(mergecov$MEAN_DEPTH[mergecov$POS==bp & mergecov$CHROM==chr]),-3))
slide <- rbind(slide,curr)
}
}
colnames(slide) <- c("CHROM","POS","DEPTH")
ggplot(data=slide,aes(x=POS,y=DEPTH)) + geom_line() + facet_wrap(~CHROM,scales = 'free_x')
ggplot(data=depth,aes(x=POS,y=MEAN_DEPTH,col=Family)) +
facet_grid(CHROM~., scales = 'free_x') + geom_point(size=0.3) +
geom_line(alpha=0.4) + theme_bw() + ggtitle("Coverage across genome, 1kb windows") +
xlab("Genomic position of SNP") + ylab("Mean coverage")
View(depth)
depth <- read.table("../../data/coverage/site_depth.txt", header=T)  # Loading data
depth <- depth[grep("chr*",depth$CHROM),]
depth$CHROM <- droplevels(depth$CHROM)
depth$POS <- round(depth$POS, digits=-5)
depth <- depth %>%
group_by(CHROM, POS, Family) %>%
mutate(avg=mean(MEAN_DEPTH)) %>%
select(-MEAN_DEPTH) %>%
rename(MEAN_DEPTH=avg)
depth <- subset(depth, !duplicated(subset(
depth, select=c(CHROM, POS, Family))))
sp_depth <- spread(depth,Family,MEAN_DEPTH)
sp_depth <- sp_depth[rowSums(!is.na(sp_depth[,3:14]))>0,]
ggplot(data=depth,aes(x=POS,y=MEAN_DEPTH,col=Family)) +
facet_grid(CHROM~., scales = 'free_x') + geom_point(size=0.3) +
geom_line(alpha=0.4) + theme_bw() + ggtitle("Coverage across genome, 1kb windows") +
xlab("Genomic position of SNP") + ylab("Mean coverage")
depth$POS <- round(depth$POS, digits=-6)
depth <- depth %>%
group_by(CHROM, POS, Family) %>%
mutate(avg=mean(MEAN_DEPTH)) %>%
select(-MEAN_DEPTH) %>%
rename(MEAN_DEPTH=avg)
depth <- subset(depth, !duplicated(subset(
depth, select=c(CHROM, POS, Family))))
sp_depth <- spread(depth,Family,MEAN_DEPTH)
sp_depth <- sp_depth[rowSums(!is.na(sp_depth[,3:14]))>0,]
ggplot(data=depth,aes(x=POS,y=MEAN_DEPTH,col=Family)) +
facet_grid(CHROM~., scales = 'free_x') + geom_point(size=0.3) +
geom_line(alpha=0.4) + theme_bw() + ggtitle("Coverage across genome, 1kb windows") +
xlab("Genomic position of SNP") + ylab("Mean coverage")
depth$POS <- round(depth$POS, digits=-4)
depth <- depth %>%
group_by(CHROM, POS, Family) %>%
mutate(avg=mean(MEAN_DEPTH)) %>%
select(-MEAN_DEPTH) %>%
rename(MEAN_DEPTH=avg)
depth <- subset(depth, !duplicated(subset(
depth, select=c(CHROM, POS, Family))))
sp_depth <- spread(depth,Family,MEAN_DEPTH)
sp_depth <- sp_depth[rowSums(!is.na(sp_depth[,3:14]))>0,]
ggplot(data=depth,aes(x=POS,y=MEAN_DEPTH,col=Family)) +
facet_grid(CHROM~., scales = 'free_x') + geom_point(size=0.3) +
geom_line(alpha=0.4) + theme_bw() + ggtitle("Coverage across genome, 1kb windows") +
xlab("Genomic position of SNP") + ylab("Mean coverage")
depth <- read.table("../../data/coverage/site_depth.txt", header=T)  # Loading data
depth <- depth[grep("chr*",depth$CHROM),]
depth$CHROM <- droplevels(depth$CHROM)
depth$POS <- round(depth$POS, digits=-5)
depth <- depth %>%
group_by(CHROM, POS, Family) %>%
mutate(avg=mean(MEAN_DEPTH)) %>%
select(-MEAN_DEPTH) %>%
rename(MEAN_DEPTH=avg)
depth <- subset(depth, !duplicated(subset(
depth, select=c(CHROM, POS, Family))))
sp_depth <- spread(depth,Family,MEAN_DEPTH)
sp_depth <- sp_depth[rowSums(!is.na(sp_depth[,3:14]))>0,]
ggplot(data=depth,aes(x=POS,y=MEAN_DEPTH,col=Family)) +
facet_grid(CHROM~., scales = 'free_x') + geom_point(size=0.3) +
geom_line(alpha=0.4) + theme_bw() + ggtitle("Coverage across genome, 1kb windows") +
xlab("Genomic position of SNP") + ylab("Mean coverage")
depth <- read.table("../../data/coverage/site_depth.txt", header=T)  # Loading data
depth <- depth[grep("chr*",depth$CHROM),]
depth$CHROM <- droplevels(depth$CHROM)
depth$POS <- round(depth$POS, digits=-3)
depth <- depth %>%
group_by(CHROM, POS, Family) %>%
mutate(avg=mean(MEAN_DEPTH)) %>%
select(-MEAN_DEPTH) %>%
rename(MEAN_DEPTH=avg)
depth <- subset(depth, !duplicated(subset(
depth, select=c(CHROM, POS, Family))))
sp_depth <- spread(depth,Family,MEAN_DEPTH)
sp_depth <- sp_depth[rowSums(!is.na(sp_depth[,3:14]))>0,]
ggplot(data=depth,aes(x=POS,y=MEAN_DEPTH,col=Family)) +
facet_grid(CHROM~., scales = 'free_x') + geom_point(size=0.3) +
geom_line(alpha=0.4) + theme_bw() + ggtitle("Coverage across genome, 1kb windows") +
xlab("Genomic position of SNP") + ylab("Mean coverage")
library(ggplot2)
library(dplyr)
library(tidyr)
depth <- read.table("../../data/coverage/site_depth.txt", header=T)  # Loading data
# Excluding unordered contigs
depth <- depth[grep("chr*",depth$CHROM),]
depth$CHROM <- droplevels(depth$CHROM)
# Grouping SNPs every 1kb
depth$POS <- round(depth$POS, digits=-3)
depth <- depth %>%
group_by(CHROM, POS, Family) %>%
mutate(avg=mean(MEAN_DEPTH)) %>%
select(-MEAN_DEPTH) %>%
rename(MEAN_DEPTH=avg)
depth <- subset(depth, !duplicated(subset(
depth, select=c(CHROM, POS, Family))))
# Spread families into columns
sp_depth <- spread(depth,Family,MEAN_DEPTH)
sp_depth <- sp_depth[rowSums(!is.na(sp_depth[,3:14]))>0,]
# Plotting coverage by family
ggplot(data=depth,aes(x=POS,y=MEAN_DEPTH,col=Family)) +
facet_grid(CHROM~., scales = 'free_x') + geom_point(size=0.3) +
geom_line(alpha=0.4) + theme_bw() + ggtitle("Coverage across genome, 1kb windows") +
xlab("Genomic position of SNP") + ylab("Mean coverage")
depth <- read.table("../../data/coverage/site_depth.txt", header=T)  # Loading data
depth
depth <- read.table("../../data/coverage/site_depth.txt", header=T)  # Loading data
depth <- depth[grep("chr*",depth$CHROM),]
depth$CHROM <- droplevels(depth$CHROM)
depth <- depth %>%
group_by(CHROM, POS, Family) %>%
mutate(avg=mean(MEAN_DEPTH)) %>%
select(-MEAN_DEPTH) %>%
rename(MEAN_DEPTH=avg)
depth <- subset(depth, !duplicated(subset(
depth, select=c(CHROM, POS, Family))))
sp_depth <- spread(depth,Family,MEAN_DEPTH)
sp_depth <- sp_depth[rowSums(!is.na(sp_depth[,3:14]))>0,]
ggplot(data=depth,aes(x=POS,y=MEAN_DEPTH,col=Family)) +
facet_grid(CHROM~., scales = 'free_x') + geom_point(size=0.3) +
geom_line(alpha=0.4) + theme_bw() + ggtitle("Coverage across genome, 1kb windows") +
xlab("Genomic position of SNP") + ylab("Mean coverage")
depth <- read.table("../../data/coverage/site_depth.txt", header=T)  # Loading data
depth <- depth[grep("chr*",depth$CHROM),]
depth$CHROM <- droplevels(depth$CHROM)
sp_depth <- spread(depth,Family,MEAN_DEPTH)
sp_depth <- sp_depth[rowSums(!is.na(sp_depth[,3:14]))>0,]
ggplot(data=depth,aes(x=POS,y=MEAN_DEPTH,col=Family)) +
facet_grid(CHROM~., scales = 'free_x') + geom_point(size=0.3) +
geom_line(alpha=0.4) + theme_bw() + ggtitle("Coverage across genome, 1kb windows") +
xlab("Genomic position of SNP") + ylab("Mean coverage")
library(zoo)
zoo(x = depth$MEAN_DEPTH)
dep_test <- zoo(x = depth$MEAN_DEPTH)
dep_win <- rollapply(dep_test, FUN=mean, width = 1000, by=1)
plot(dep_win)
plot(dep_win)
dep_win <- rollapply(dep_test, FUN=mean, width = 1000, by=10)
plot(dep_win)
dep_win <- rollapply(dep_test, FUN=mean, width = 100, by=10)
plot(dep_win)
dep_win <- rollapply(dep_test, FUN=mean, width = 10, by=1)
plot(dep_win)
dep_win <- rollapply(dep_test, FUN=mean, width = 30, by=1)
plot(dep_win)
dep_win <- rollapply(dep_test, FUN=mean, width = 30, by=10)
plot(dep_win)
depth <- read.table("../../data/coverage/site_depth.txt", header=T)  # Loading data
depth <- depth[grep("chr*",depth$CHROM),]
depth$CHROM <- droplevels(depth$CHROM)
depth$POS <- round(depth$POS, digits=-3)
depth <- depth %>%
group_by(CHROM, POS, Family) %>%
mutate(avg=mean(MEAN_DEPTH)) %>%
select(-MEAN_DEPTH) %>%
rename(MEAN_DEPTH=avg)
depth <- subset(depth, !duplicated(subset(
depth, select=c(CHROM, POS, Family))))
sp_depth <- spread(depth,Family,MEAN_DEPTH)
sp_depth <- sp_depth[rowSums(!is.na(sp_depth[,3:14]))>0,]
ggplot(data=depth,aes(x=POS,y=MEAN_DEPTH,col=Family)) +
facet_grid(CHROM~., scales = 'free_x') + geom_point(size=0.3) +
geom_line(alpha=0.4) + theme_bw() + ggtitle("Coverage across genome, 1kb windows") +
xlab("Genomic position of SNP") + ylab("Mean coverage")
indv <- read.table("../../data/ploidy/thresholds/fixed",header = T)
mother <- indv[indv$Generation=="F3",]
offspring <- indv[indv$Generation=="F4",]
hist(indv$N_SITES, breaks=20, main="Number of sites per individual (both 1n and 2n)", xlab="Number of sites")
hist(indv$MEAN_DEPTH,breaks=20, main="Mean depth per individual (both 1n and 2n)", xlab="Mean depth")
indv <- read.table("../../data/ploidy/thresholds/fixed_fam_d-20_r-80",header = T)
hist(indv$MEAN_DEPTH,breaks=20, main="Mean depth per individual (both 1n and 2n)", xlab="Mean depth")
indv <- read.table("../../data/ploidy/thresholds/fixed",header = T)
hist(indv$MEAN_DEPTH,breaks=20, main="Mean depth per individual (both 1n and 2n)", xlab="Mean depth")
indv[order(indv$MEAN_DEPTH),]
library(ggplot2)
indv <- read.table("../../data/ploidy/thresholds/fixed",header = T)
library(ggplot2); library(ggjoy)
ggplot(data=indv, aes(x=MEAN_DEPTH, y=Family)) + geom_joy()
indv <- read.table("../../data/ploidy/thresholds/fixed_fam_d-20_r-80",header = T)
ggplot(data=indv, aes(x=MEAN_DEPTH, y=Family)) + geom_joy()
indv <- read.table("../../data/ploidy/thresholds/fixed",header = T)
ggplot(data=indv, aes(x=MEAN_DEPTH, y=Family)) + geom_joy()
View(indv)
ggplot(data=indv, aes(x=HOM, y=Family)) + geom_joy()
ggplot(data=indv, aes(x=HOM, y=N_SITES)) + geom_joy()
ggplot(data=indv, aes(x=N_SITES, y=Family)) + geom_joy()
ggplot(data=indv, aes(x=MEAN_DEPTH, y=Family)) + geom_joy()
indv$lib <- "0"
indv
i="7"
indv <- read.table("../../data/ploidy/thresholds/fixed",header = T)
indv$lib <- "0"
for(i in c("7","7b","10","10b")){
tmp_lib <- read.table(paste0("../../data/barcodes/barcodes_radwasp", i))
indv$lib[indv$Name %in% tmp_lib[,2]] <- i
}
indv
indv <- read.table("../../data/ploidy/thresholds/fixed",header = T)
indv$lib <- "0"
for(i in c("6","7","7b","10","10b")){
tmp_lib <- read.table(paste0("../../data/barcodes/barcodes_radwasp", i))
indv$lib[indv$Name %in% tmp_lib[,2]] <- i
}
indv <- read.table("../../data/ploidy/thresholds/fixed",header = T)
indv$lib <- "0"
for(i in c("6","7","7b","10","10b")){
tmp_lib <- read.table(paste0("../../data/barcodes/barcodes_radwasp", i))
indv$lib[indv$Name %in% tmp_lib[,2]] <- i
}
indv
ggplot(data=indv, aes(x=MEAN_DEPTH, y=Family, fill=lib)) + geom_joy()
ggplot(data=indv, aes(x=MEAN_DEPTH, y=Family, fill=lib)) + geom_joy(stat = "binline", bins=20, scale=0.95, draw_baseline=F)
ggplot(data=indv, aes(x=MEAN_DEPTH, y=Family, fill=lib)) +
geom_joy(stat = "binline", bins=20, scale=0.95, draw_baseline=T)
ggplot(data=indv, aes(x=MEAN_DEPTH, y=lib)) +
geom_joy(stat = "binline", bins=20, scale=0.95, draw_baseline=T)
View(indv)
View(indv)
indv$lib <- "Mothers"
for(i in c("6","7","7b","10","10b")){
tmp_lib <- read.table(paste0("../../data/barcodes/barcodes_radwasp", i))
indv$lib[indv$Name %in% tmp_lib[,2]] <- i
}
ggplot(data=indv, aes(x=MEAN_DEPTH, y=lib)) +
geom_joy(stat = "binline", bins=20, scale=0.95, draw_baseline=T)
ggplot(data=indv, aes(x=MEAN_DEPTH, y=lib)) +
geom_joy(stat = "binline", bins=20, scale=0.95, draw_baseline=T)+
ylab("Library")
ggplot(data=indv, aes(x=MEAN_DEPTH, y=lib, fill=N_SITES)) +
geom_joy(stat = "binline", bins=20, scale=0.95, draw_baseline=T)+
ylab("Library")
ggplot(data=indv, aes(x=MEAN_DEPTH, y=lib, fill=N_SITES)) +
geom_joy(stat = "binline", bins=20, scale=0.95, draw_baseline=T)+
ylab("Library")
ggplot(data=indv, aes(x=MEAN_DEPTH, y=lib), fill=N_SITES)) +
geom_joy(stat = "binline", bins=20, scale=0.95, draw_baseline=T)+
ylab("Library")
ggplot(data=indv, aes(x=MEAN_DEPTH, y=lib), fill=N_SITES) +
geom_joy(stat = "binline", bins=20, scale=0.95, draw_baseline=T)+
ylab("Library")
ggplot(data=indv, aes(x=MEAN_DEPTH, y=lib)) +
geom_joy(stat = "binline", bins=20, scale=0.95, draw_baseline=T, fill=N_SITES)+
ylab("Library")
indv
ggplot(data=indv, aes(x=MEAN_DEPTH, y=lib)) +
geom_joy(stat = "binline", bins=20, scale=0.95, draw_baseline=T, fill=indv$N_SITES)+
ylab("Library")
ggplot(data=indv, aes(x=MEAN_DEPTH, y=lib)) +
geom_joy(stat = "binline", bins=20, scale=0.95, draw_baseline=T)+
ylab("Library")
ggplot(data=indv, aes(x=MEAN_DEPTH, y=lib, height=..density..)) +
geom_joy(stat = "binline", bins=20, scale=0.95, draw_baseline=T)+
ylab("Library")
ggplot(data=indv, aes(x=N_SITES, y=lib, height=..density..)) +
geom_joy(stat = "binline", bins=20, scale=0.95, draw_baseline=T)+
ylab("Library")
View(depth)
