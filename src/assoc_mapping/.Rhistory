}
loessGCV <- function (x) {
## Modified from code by Michael Friendly
## http://tolstoy.newcastle.edu.au/R/help/05/11/15899.html
if (!(inherits(x,"loess"))) stop("Error: argument must be a loess object")
## extract values from loess object
span <- x$pars$span
n <- x$n
traceL <- x$trace.hat
sigma2 <- sum(resid(x)^2) / (n-1)
gcv  <- n*sigma2 / (n-traceL)^2
result <- list(span=span, gcv=gcv)
result
}
estLoess <- function(model, spans = c(.05, .95)) {
f <- function(span) {
mod <- update(model, span = span)
loessGCV(mod)[["gcv"]]
}
result <- optimize(f, spans)
result
}
library(viridis)
sp_range <- seq(0.2,1,0.05)
par(mfrow=c(3,2))
for(chrom in levels(chrom_stat$Chr)){
plot(x=c(),y=c(),xlim=c(0,max(chrom_stat$BP[chrom_stat$Chr==chrom])), ylim=c(-0.05,1))
abline(h=-0.01)
mod <- (x = chrom_stat$BP[chrom_stat$Chr==chrom],
y = chrom_stat$hom[chrom_stat$Chr==chrom],
weight = chrom_stat$weight[chrom_stat$Chr==chrom])
mod.cv <- estLoess(mod)
points(mod.cv$x[order(mod.cv$x)],mod.cv$fitted[order(mod.cv$x)], type='l')
points(mod.cv$x[mod.cv$fitted==min(mod.cv$fitted)],rep(-0.01,length(mod.cv$x[mod.cv$fitted==min(mod.cv$fitted)])),
pch=16, cex=1.5)
}
library(viridis)
sp_range <- seq(0.2,1,0.05)
par(mfrow=c(3,2))
for(chrom in levels(chrom_stat$Chr)){
plot(x=c(),y=c(),xlim=c(0,max(chrom_stat$BP[chrom_stat$Chr==chrom])), ylim=c(-0.05,1))
abline(h=-0.01)
mod <- loess(x = chrom_stat$BP[chrom_stat$Chr==chrom],
y = chrom_stat$hom[chrom_stat$Chr==chrom],
weight = chrom_stat$weight[chrom_stat$Chr==chrom])
mod.cv <- estLoess(mod)
points(mod.cv$x[order(mod.cv$x)],mod.cv$fitted[order(mod.cv$x)], type='l')
points(mod.cv$x[mod.cv$fitted==min(mod.cv$fitted)],rep(-0.01,length(mod.cv$x[mod.cv$fitted==min(mod.cv$fitted)])),
pch=16, cex=1.5)
}
loess(x = chrom_stat$BP[chrom_stat$Chr==chrom],
y = chrom_stat$hom[chrom_stat$Chr==chrom],
weight = chrom_stat$weight[chrom_stat$Chr==chrom])
loess(x = chrom_stat$BP[chrom_stat$Chr==chrom],
y = chrom_stat$hom[chrom_stat$Chr==chrom],
weight = chrom_stat$weight[chrom_stat$Chr==chrom])
library(viridis)
sp_range <- seq(0.2,1,0.05)
par(mfrow=c(3,2))
for(chrom in levels(chrom_stat$Chr)){
plot(x=c(),y=c(),xlim=c(0,max(chrom_stat$BP[chrom_stat$Chr==chrom])), ylim=c(-0.05,1))
abline(h=-0.01)
mod <- loess(data = chrom_stat[chrom_stat$Chr==chrom,], hom ~ BP,
weight = weight)
mod.cv <- estLoess(mod)
points(mod.cv$x[order(mod.cv$x)],mod.cv$fitted[order(mod.cv$x)], type='l')
points(mod.cv$x[mod.cv$fitted==min(mod.cv$fitted)],rep(-0.01,length(mod.cv$x[mod.cv$fitted==min(mod.cv$fitted)])),
pch=16, cex=1.5)
}
library(viridis)
sp_range <- seq(0.2,1,0.05)
par(mfrow=c(3,2))
for(chrom in levels(chrom_stat$Chr)){
plot(x=c(),y=c(),xlim=c(0,max(chrom_stat$BP[chrom_stat$Chr==chrom])), ylim=c(-0.05,1))
abline(h=-0.01)
mod <- loess(data = chrom_stat[chrom_stat$Chr==chrom,], hom ~ BP,
weights = weight)
mod.cv <- estLoess(mod)
points(mod.cv$x[order(mod.cv$x)],mod.cv$fitted[order(mod.cv$x)], type='l')
points(mod.cv$x[mod.cv$fitted==min(mod.cv$fitted)],rep(-0.01,length(mod.cv$x[mod.cv$fitted==min(mod.cv$fitted)])),
pch=16, cex=1.5)
}
mod
library(viridis)
sp_range <- seq(0.2,1,0.05)
par(mfrow=c(3,2))
for(chrom in levels(chrom_stat$Chr)){
plot(x=c(),y=c(),xlim=c(0,max(chrom_stat$BP[chrom_stat$Chr==chrom])), ylim=c(-0.05,1))
abline(h=-0.01)
mod <- loess(data = chrom_stat[chrom_stat$Chr==chrom,], hom ~ BP,
weights = weight)
mod.best <- estLoess(mod)
mod.cv <- loess(data = chrom_stat[chrom_stat$Chr==chrom,], formula=hom~BP,
degree=1, weights=weight, span=mod.best$minimum, model=T)
points(mod.cv$x[order(mod.cv$x)],mod.cv$fitted[order(mod.cv$x)], type='l')
points(mod.cv$x[mod.cv$fitted==min(mod.cv$fitted)],rep(-0.01,length(mod.cv$x[mod.cv$fitted==min(mod.cv$fitted)])),
pch=16, cex=1.5)
}
warnings()
library(viridis)
sp_range <- seq(0.2,1,0.05)
par(mfrow=c(3,2))
for(chrom in levels(chrom_stat$Chr)){
plot(x=c(),y=c(),xlim=c(0,max(chrom_stat$BP[chrom_stat$Chr==chrom])), ylim=c(-0.05,1))
abline(h=-0.01)
mod <- loess(data = chrom_stat[chrom_stat$Chr==chrom,], hom ~ BP,
weights = weight)
mod.best <- estLoess(mod)
mod.cv <- loess(data = chrom_stat[chrom_stat$Chr==chrom,], formula=hom~BP,
degree=2, weights=weight, span=mod.best$minimum, model=T)
points(mod.cv$x[order(mod.cv$x)],mod.cv$fitted[order(mod.cv$x)], type='l')
points(mod.cv$x[mod.cv$fitted==min(mod.cv$fitted)],rep(-0.01,length(mod.cv$x[mod.cv$fitted==min(mod.cv$fitted)])),
pch=16, cex=1.5)
}
estLoess <- function(model, spans = c(.2, .95)) {
f <- function(span) {
mod <- update(model, span = span)
loessGCV(mod)[["gcv"]]
}
result <- optimize(f, spans)
result
}
library(viridis)
sp_range <- seq(0.2,1,0.05)
par(mfrow=c(3,2))
for(chrom in levels(chrom_stat$Chr)){
plot(x=c(),y=c(),xlim=c(0,max(chrom_stat$BP[chrom_stat$Chr==chrom])), ylim=c(-0.05,1))
abline(h=-0.01)
mod <- loess(data = chrom_stat[chrom_stat$Chr==chrom,], hom ~ BP,
weights = weight)
mod.best <- estLoess(mod)
mod.cv <- loess(data = chrom_stat[chrom_stat$Chr==chrom,], formula=hom~BP,
degree=2, weights=weight, span=mod.best$minimum, model=T)
points(mod.cv$x[order(mod.cv$x)],mod.cv$fitted[order(mod.cv$x)], type='l')
points(mod.cv$x[mod.cv$fitted==min(mod.cv$fitted)],rep(-0.01,length(mod.cv$x[mod.cv$fitted==min(mod.cv$fitted)])),
pch=16, cex=1.5)
}
estLoess <- function(model, spans = c(.2, .95)) {
f <- function(span) {
mod <- update(model, span = span)
loessGCV(mod)[["gcv"]]
}
result <- optimize(f, spans)
print(result)
result
}
library(viridis)
sp_range <- seq(0.2,1,0.05)
par(mfrow=c(3,2))
for(chrom in levels(chrom_stat$Chr)){
plot(x=c(),y=c(),xlim=c(0,max(chrom_stat$BP[chrom_stat$Chr==chrom])), ylim=c(-0.05,1))
abline(h=-0.01)
mod <- loess(data = chrom_stat[chrom_stat$Chr==chrom,], hom ~ BP,
weights = weight)
mod.best <- estLoess(mod)
mod.cv <- loess(data = chrom_stat[chrom_stat$Chr==chrom,], formula=hom~BP,
degree=2, weights=weight, span=mod.best$minimum, model=T)
points(mod.cv$x[order(mod.cv$x)],mod.cv$fitted[order(mod.cv$x)], type='l')
points(mod.cv$x[mod.cv$fitted==min(mod.cv$fitted)],rep(-0.01,length(mod.cv$x[mod.cv$fitted==min(mod.cv$fitted)])),
pch=16, cex=1.5)
}
mod$n
mod$fitted
mod$residuals
mod$enp
mod$s
mod$one.delta
mod$trace.hat
estLoess <- function(model, spans = c(.3, .95)) {
f <- function(span) {
mod <- update(model, span = span)
loessGCV(mod)[["gcv"]]
}
result <- optimize(f, spans)
result
}
library(viridis)
sp_range <- seq(0.2,1,0.05)
par(mfrow=c(3,2))
for(chrom in levels(chrom_stat$Chr)){
plot(x=c(),y=c(),xlim=c(0,max(chrom_stat$BP[chrom_stat$Chr==chrom])), ylim=c(-0.05,1))
abline(h=-0.01)
mod <- loess(data = chrom_stat[chrom_stat$Chr==chrom,], hom ~ BP,
weights = weight)
mod.best <- estLoess(mod)
mod.cv <- loess(data = chrom_stat[chrom_stat$Chr==chrom,], formula=hom~BP,
degree=2, weights=weight, span=mod.best$minimum, model=T)
points(mod.cv$x[order(mod.cv$x)],mod.cv$fitted[order(mod.cv$x)], type='l')
points(mod.cv$x[mod.cv$fitted==min(mod.cv$fitted)],rep(-0.01,length(mod.cv$x[mod.cv$fitted==min(mod.cv$fitted)])),
pch=16, cex=1.5)
}
estLoess <- function(model, spans = c(.1, .95)) {
f <- function(span) {
mod <- update(model, span = span)
loessGCV(mod)[["gcv"]]
}
result <- optimize(f, spans)
result
}
library(viridis)
sp_range <- seq(0.2,1,0.05)
par(mfrow=c(3,2))
for(chrom in levels(chrom_stat$Chr)){
plot(x=c(),y=c(),xlim=c(0,max(chrom_stat$BP[chrom_stat$Chr==chrom])), ylim=c(-0.05,1))
abline(h=-0.01)
mod <- loess(data = chrom_stat[chrom_stat$Chr==chrom,], hom ~ BP,
weights = weight)
mod.best <- estLoess(mod)
mod.cv <- loess(data = chrom_stat[chrom_stat$Chr==chrom,], formula=hom~BP,
degree=2, weights=weight, span=mod.best$minimum, model=T)
points(mod.cv$x[order(mod.cv$x)],mod.cv$fitted[order(mod.cv$x)], type='l')
points(mod.cv$x[mod.cv$fitted==min(mod.cv$fitted)],rep(-0.01,length(mod.cv$x[mod.cv$fitted==min(mod.cv$fitted)])),
pch=16, cex=1.5)
}
library(ggplot2); library(dplyr)
stat_path <- '../../data/populations/d-20_r-80/'
indv <- read.table('../../data/individuals', header=T)
sum_stat <- data.frame()
for(fam in list.dirs(stat_path)[2:length(list.dirs(stat_path))]){  # Excluding first dir (parent)
tmp_stat <- read.csv(paste0(fam,'/batch_0.sumstats.tsv'),header=T,skip=2,sep='\t')
tmp_stat$fam <- rep(basename(fam))
sum_stat <- rbind(sum_stat, tmp_stat)
mother_hom <- NULL
}
rm_snps<- sum_stat %>%
group_by(fam,Locus.ID,Col) %>%  # Each group contains one SNP (both male and female pop)
summarise(hom_mot = sum(Pop.ID=='F' & Q.Nuc=='-'))  # If all females are homozygous -> mother is homozygous
stat_path <- '../../data/populations/d-5_r-10/'
indv <- read.table('../../data/individuals', header=T)
sum_stat <- data.frame()
for(fam in list.dirs(stat_path)[2:length(list.dirs(stat_path))]){  # Excluding first dir (parent)
tmp_stat <- read.csv(paste0(fam,'/batch_0.sumstats.tsv'),header=T,skip=2,sep='\t')
tmp_stat$fam <- rep(basename(fam))
sum_stat <- rbind(sum_stat, tmp_stat)
mother_hom <- NULL
}
sum_stat <- read.csv(paste0(stat_path,"/batch_0.sumstats.tsv", header=T, skip=2, sep='\t'))
sum_stat <- read.csv(paste0(stat_path,"/batch_0.sumstats.tsv"), header=T, skip=2, sep='\t')
View(sum_stat)
View(sum_stat)
male_stat <- sum_stat[sum_stat$Pop.ID=="M",c('Chr','BP','Obs.Hom', 'fam', 'N',"Locus.ID")]
View(sum_stat)
sum_stat$fam <- 'all'
sum_stat
rm_snps<- sum_stat %>%
group_by(fam,Locus.ID,Col) %>%  # Each group contains one SNP (both male and female pop)
summarise(hom_mot = sum(Pop.ID=='F' & Q.Nuc=='-'))  # If all females are homozygous -> mother is homozygous
rm_snps <- rm_snps[rm_snps$hom_mot==0, 1:3]
male_stat <- sum_stat[sum_stat$Pop.ID=="M",c('Chr','BP','Obs.Hom', 'fam', 'N',"Locus.ID")]
female_stat <- sum_stat[sum_stat$Pop.ID=="F",c('Chr','BP','Obs.Hom', 'fam', 'N')]
chrom_stat <- merge(male_stat,female_stat,by=c('Chr','BP','fam'))
attach(chrom_stat)
chrom_stat$hom <- (Obs.Hom.x * N.x + Obs.Hom.y * N.y)/(N.x + N.y)
chrom_stat <- rename(chrom_stat, Nm=N.x,Nf=N.y, Male.Hom=Obs.Hom.x, Fem.Hom=Obs.Hom.y)
chrom_stat$weight <- chrom_stat$Nf + chrom_stat$Nm
chrom_stat <- chrom_stat[grep("chr.*", chrom_stat$Chr),]
chrom_stat$Chr <- droplevels(chrom_stat$Chr)
ggplot(chrom_stat, aes(x=BP, y=hom, weight=weight)) + facet_grid(~Chr, scales='free_x') +
geom_point(col='grey70') + stat_smooth(fill='steelblue', method='loess', fullrange = F, span=0.4)
chr_models <- list()
for(chrom in levels(chrom_stat$Chr)){
chr_models[[chrom]] <- loess(data=chrom_stat[chrom_stat$Chr==chrom,],
formula=hom~BP, weights=weight, span=1, model=T)
}
library(viridis)
sp_range <- seq(0.2,1,0.05)
virilist <- viridis(n=length(sp_range))
colindex <- 1
par(mfrow=c(3,2))
for(chrom in levels(chrom_stat$Chr)){
plot(x=c(),y=c(),xlim=c(0,max(chrom_stat$BP[chrom_stat$Chr==chrom])), ylim=c(-0.05,1))
abline(h=-0.01)
for(sp in sp_range){
mod <- loess(data=chrom_stat[chrom_stat$Chr==chrom,], degree=1,
formula=hom~BP, weights=weight, span=sp, model=T)
points(mod$x[order(mod$x)],mod$fitted[order(mod$x)], type='l',col=alpha(virilist[colindex],0.4))
points(mod$x[mod$fitted==min(mod$fitted)],rep(-0.01,length(mod$x[mod$fitted==min(mod$fitted)])),
col=alpha(virilist[colindex],0.4),pch=16, cex=1.5)
colindex <- colindex+1
}
colindex <- 1
}
loessGCV <- function (x) {
## Modified from code by Michael Friendly
## http://tolstoy.newcastle.edu.au/R/help/05/11/15899.html
if (!(inherits(x,"loess"))) stop("Error: argument must be a loess object")
## extract values from loess object
span <- x$pars$span
n <- x$n
traceL <- x$trace.hat
sigma2 <- sum(resid(x)^2) / (n-1)
gcv  <- n*sigma2 / (n-traceL)^2
result <- list(span=span, gcv=gcv)
result
}
estLoess <- function(model, spans = c(.1, .95)) {
f <- function(span) {
mod <- update(model, span = span)
loessGCV(mod)[["gcv"]]
}
result <- optimize(f, spans)
result
}
library(viridis)
sp_range <- seq(0.2,1,0.05)
par(mfrow=c(3,2))
for(chrom in levels(chrom_stat$Chr)){
plot(x=c(),y=c(),xlim=c(0,max(chrom_stat$BP[chrom_stat$Chr==chrom])), ylim=c(-0.05,1))
abline(h=-0.01)
mod <- loess(data = chrom_stat[chrom_stat$Chr==chrom,], hom ~ BP,
weights = weight)
mod.best <- estLoess(mod)
mod.cv <- loess(data = chrom_stat[chrom_stat$Chr==chrom,], formula=hom~BP,
degree=2, weights=weight, span=mod.best$minimum, model=T)
points(mod.cv$x[order(mod.cv$x)],mod.cv$fitted[order(mod.cv$x)], type='l')
points(mod.cv$x[mod.cv$fitted==min(mod.cv$fitted)],rep(-0.01,length(mod.cv$x[mod.cv$fitted==min(mod.cv$fitted)])),
pch=16, cex=1.5)
}
library(dplyr)
library(readr)
library(ggplot2)
scaffolds <- read.table("../../data/ref_genome/ordered_genome/merged.fasta.ann", stringsAsFactors = F)
chrom_sizes <- data.frame(); chrom_names=c()
for(row in seq(1,nrow(scaffolds))){
if(length(grep('chr',scaffolds[row,2]))){
chrom_names <- append(chrom_names,as.character(scaffolds[row,2]))
chrom_sizes <- rbind(chrom_sizes, scaffolds[row+1,c(1,2)])
}
}
chrom_sizes <- cbind(chrom_names, chrom_sizes)
rownames(chrom_sizes) <- NULL
colnames(chrom_sizes) <- c("chrom","start","length")
chrom_sizes$length <- as.numeric(chrom_sizes$length)
chrom_sizes$mid <- chrom_sizes$start + (chrom_sizes$length/2)  # Middle position in chrom. used for plotting
hom_filt <- function(fam){
# Function for filtering loci homozygous in mother of given family
mother <- as.character(indv$Name[indv$Family==fam & indv$Generation=='F3'])
# Using mother's genotype from snps file
snp_gz <- gzfile(paste0('../../data/sstacks/',fam,'/',mother,'.snps.tsv.gz'),"rt")
# Uncompresing file (lengthy process)
snp_mother <- read.table(snp_gz); close(snp_gz)
# keeping all loci where all SNPs are hom
hom_loc <- snp_mother %>% group_by(V3) %>% filter(all(V5=='O'))
# Find loci which have only homozygous positions in pstacks snps file
hom_ID_local <- unique(hom_loc$V3)
match_gz <- gzfile(paste0('../../data/sstacks/',fam,'/',mother,'.matches.tsv.gz'),"rt")
# uncompressing...
match_mother <- read.table(match_gz); close(match_gz)
hom_ID_global <- unique(match_mother$V3[match_mother$V4 %in% hom_ID_local])
# Finding catalog locus IDs matching sample locus IDs using sstacks matches file
return(hom_ID_global)
}
`%not in%` <- function (x, table) is.na(match(x, table, nomatch=NA_integer_))
stat_path <- '../../data/populations/d-20_r-80/'
indv <- read.table('../../data/individuals', header=T)
stat_path <- '../../data/populations/d-5_r-10/'
indv <- read.table('../../data/individuals', header=T)
sum_stat <- data.frame()
for(fam in list.dirs(stat_path)[2:length(list.dirs(stat_path))]){  # Excluding first dir (parent)
tmp_stat <- read.csv(paste0(fam,'/batch_0.sumstats.tsv'),header=T,skip=2,sep='\t')
tmp_stat$fam <- rep(basename(fam))
sum_stat <- rbind(sum_stat, tmp_stat)
mother_hom <- NULL
}
rm_snps<- sum_stat %>%
group_by(fam,Locus.ID,Col) %>%  # Each group contains one SNP (both male and female pop)
summarise(hom_mot = sum(Pop.ID=='F' & Q.Nuc=='-'))  # If all females are homozygous -> mother is homozygous
rm_snps <- rm_snps[rm_snps$hom_mot==0, 1:3]
sum_stat <- read.csv(paste0(stat_path, '/batch_0.sumstats.tsv'), header=T, skip=2, sep='\t')
sum_stat <- 'fam'
male_stat <- sum_stat[sum_stat$Pop.ID=="M",c('Chr','BP','Obs.Hom', 'fam', 'N',"Locus.ID")]
female_stat <- sum_stat[sum_stat$Pop.ID=="F",c('Chr','BP','Obs.Het', 'fam', 'N')]
CSD_like <- merge(male_stat,female_stat,by=c('Chr','BP','fam'))
sum_stat <- read.csv(paste0(stat_path, '/batch_0.sumstats.tsv'), header=T, skip=2, sep='\t')
sum_stat$fam <- 'all'
male_stat <- sum_stat[sum_stat$Pop.ID=="M",c('Chr','BP','Obs.Hom', 'fam', 'N',"Locus.ID")]
female_stat <- sum_stat[sum_stat$Pop.ID=="F",c('Chr','BP','Obs.Het', 'fam', 'N')]
CSD_like <- merge(male_stat,female_stat,by=c('Chr','BP','fam'))
CSD_like$CSD <- (CSD_like$Obs.Hom+CSD_like$Obs.Het)/2
CSD_like <- rename(CSD_like, Nm=N.x,Nf=N.y, Male.Hom=Obs.Hom, Fem.Het=Obs.Het)
CSD_like <- CSD_like %>% arrange(Chr, BP)
chrom <- CSD_like[grep("chr.*", CSD_like$Chr),]
chrom$pos = paste(chrom$Chr,chrom$BP, sep="_")
chrom$Chr=droplevels(chrom$Chr)
genomic_pos <- function(snp){
# Computing total basepair position in genome as start(chrom)+bp
gen_pos <- as.numeric(snp["BP"]) + chrom_sizes[chrom_sizes$chr==snp["Chr"],"start"]
return(gen_pos)
}
chrom$tot_BP <-apply(X = chrom,MARGIN = 1, FUN=genomic_pos)
ggplot(data=chrom,aes(x=BP,y=((1-Fem.Het)+Male.Hom))) + geom_point() +facet_grid(~Chr, scales = "free_x")
compact_chrom <- chrom %>%
group_by(Locus.ID) %>%
summarise(avg=mean(CSD), BP=mean(tot_BP)) %>%
arrange(BP)
plot(compact_chrom$BP, compact_chrom$avg, type="l", ylab='prop. CSD', xlab="genomic position",
main="Proportion of CSD individuals, averaged across families")
plot(compact_chrom$BP, compact_chrom$avg, type="l", ylab='prop. CSD', xlab="genomic position",
main="Proportion of CSD individuals, averaged across families")
abline(v=chrom_sizes$start, lty=2,col="blue")
text(x = chrom_sizes$mid,y=0.2,labels = chrom_sizes$chrom)
highCSD <- chrom %>%
group_by(fam) %>%
filter(CSD==max(CSD))
top_CSD <- chrom[chrom$CSD>=0.8,]
hist(top_CSD$tot_BP,breaks=100, main="Top CSD candidates", xlab="Genomic position", ylab="N hits >= 0.8", col="grey")
abline(v=chrom_sizes$start, lty=2,col="blue")
text(x = chrom_sizes$mid,y=17,labels = chrom_sizes$chrom)
ggplot(data=chrom, aes(x=tot_BP, y=CSD))+ geom_line() +
facet_wrap(~fam,drop = F) + #geom_text(data=highCSD,aes(label=pos, y=CSD), size=1.9)+
geom_vline(data=chrom_sizes, aes(xintercept=start), col="blue", lty=2) +
ylab("Prop.CSD")
ggplot(data=chrom, aes(x=tot_BP, y=CSD, col=fam))+ geom_line() +
#geom_text(data=highCSD,aes(label=pos, y=CSD), size=1.9)+
geom_vline(data=chrom_sizes, aes(xintercept=start), col="blue", lty=2) +
ylab("Prop.CSD")
ggplot(data=chrom, aes(x=tot_BP, y=CSD))+ geom_line() +
facet_wrap(~fam,drop = F) + #geom_text(data=highCSD,aes(label=pos, y=CSD), size=1.9)+
geom_vline(data=chrom_sizes, aes(xintercept=start), col="blue", lty=2) +
ylab("Prop.CSD")
uniq_CSD = top_CSD[order(top_CSD[,'tot_BP'],-top_CSD[,'CSD']),]
uniq_CSD$tot_BP <- round(uniq_CSD$tot_BP,digits=-3)
uniq_CSD$BP <- round(uniq_CSD$BP,digits=-3)
uniq_CSD = uniq_CSD[!duplicated(uniq_CSD$tot_BP),]
out_CSD <- uniq_CSD[,c("Locus.ID","Chr","BP","tot_BP","Nf","Nm","CSD")]
out_CSD
top_CSD <- chrom[chrom$CSD>=0.8,]
top_CSD
library(dplyr)
library(readr)
library(ggplot2)
scaffolds <- read.table("../../data/ref_genome/ordered_genome/merged.fasta.ann", stringsAsFactors = F)
scaffolds <- read.table("../../data/ref_genome/ordered_genome/merged.fasta.ann", stringsAsFactors = F)
phi_path <- '../../data/populations/d-20_r-80/'
scaffolds <- read.table("../../data/ref_genome/ordered_genome/merged.fasta.ann", stringsAsFactors = F)
phi_path <- '../../data/populations/d-5_r-10/'
chrom_sizes <- data.frame(); chrom_names=c()
for(row in seq(1,nrow(scaffolds))){
if(length(grep('chr',scaffolds[row,2]))){
chrom_names <- append(chrom_names,as.character(scaffolds[row,2]))
chrom_sizes <- rbind(chrom_sizes, scaffolds[row+1,c(1,2)])
}
}
chrom_sizes <- cbind(chrom_names, chrom_sizes)
rownames(chrom_sizes) <- NULL
colnames(chrom_sizes) <- c("chrom","start","length")
chrom_sizes$length <- as.numeric(chrom_sizes$length)
chrom_sizes$mid <- chrom_sizes$start + (chrom_sizes$length/2)
phi_stat <- data.frame()
for(fam in list.dirs(phi_path)[2:length(list.dirs(phi_path))]){  # Excluding first dir (parent)
tmp_phi <- read.csv(paste0(fam,'/batch_0.phistats_F-M.tsv'),header=T,skip=2,sep='\t')
tmp_phi$fam <- rep(basename(fam))
phi_stat <- rbind(phi_stat, tmp_phi)
}
grouped <- 'T'
phi_stat <- read.csv(paste0(phi_path, '/batch_0.phistats_F-M.tsv'), header=T, skip=2, sep='\t')
phi_sta$fam <- 'all'
phi_sta$fam <- 'all'
phi_stat$fam <- 'all'
phi_stat <- phi_stat %>% arrange(Chr, BP)
chrom <- phi_stat[grep("chr.*", phi_stat$Chr),]
chrom$pos = paste(chrom$Chr,chrom$BP, sep="_")
chrom$Chr=droplevels(chrom$Chr)
genomic_pos <- function(snp){
# Computing total basepair position in genome as start(chrom)+bp
gen_pos <- as.numeric(snp["BP"]) + chrom_sizes[chrom_sizes$chr==snp["Chr"],"start"]
return(gen_pos)
}
chrom$tot_BP <-apply(X = chrom,MARGIN = 1, FUN=genomic_pos)
compact_chrom <- chrom %>%
group_by(Locus.ID) %>%
summarise(avg=mean(Smoothed.Fst.), BP=mean(tot_BP)) %>%
arrange(BP)
plot(compact_chrom$BP, compact_chrom$avg, type="l", ylab='Fst', xlab="genomic position")
abline(v=chrom_sizes$start, lty=2,col="blue")
text(x = chrom_sizes$mid,y=-0.2,labels = chrom_sizes$chrom)
hit_ID <-compact_chrom$Locus.ID[order(compact_chrom$avg,decreasing = T)][1:3]
text(x = chrom$tot_BP[chrom$Locus.ID %in% hit_ID],
y= compact_chrom$avg[compact_chrom$Locus.ID %in% hit_ID],
labels = chrom$pos[chrom$Locus.ID %in% hit_ID])
highFST <- chrom %>%
group_by(fam) %>%
filter(Smoothed.Fst.==max(Smoothed.Fst.))
ggplot(data=chrom, aes(x=tot_BP, y=Smoothed.Fst.))+ geom_vline(data=chrom_sizes, aes(xintercept=start), col="blue", lty=2) +
geom_line() + facet_wrap(~fam,drop = F) + geom_text(data=highFST,aes(label=pos, y=Fst.+0.2), size=1.9)
ggplot(data=chrom, aes(x=tot_BP, y=Smoothed.Fst., col=fam))+ geom_vline(data=chrom_sizes, aes(xintercept=start), col="blue", lty=2) +
geom_line()
top_Fst<- chrom[chrom$Fst.>=0.7,]
hist(top_Fst$tot_BP,breaks=100, main="Top CSD candidates", xlab="Genomic position", ylab="N hits >= 0.8", col="grey")
top_Fst<- chrom[chrom$Fst.>=0.7,]
top_Fst
View(chrom)
top_Fst<- chrom[chrom$Fst.>=0.05,]
top_Fst
hist(top_Fst$tot_BP,breaks=100, main="Top CSD candidates", xlab="Genomic position", ylab="N hits >= 0.8", col="grey")
abline(v=chrom_sizes$start, lty=2,col="blue")
uniq_Fst = top_Fst[order(top_Fst[,'tot_BP'],-top_Fst[,'Fst.']),]
uniq_Fst$tot_BP <- round(uniq_Fst$tot_BP,digits=-3)
uniq_Fst$BP <- round(uniq_Fst$BP,digits=-3)
uniq_Fst = uniq_Fst[!duplicated(uniq_Fst$tot_BP),]
out_Fst <- uniq_Fst[,c("Locus.ID","Chr","BP","tot_BP")]
out_Fst
top_Fst<- chrom[chrom$Fst.>=0.07,]
hist(top_Fst$tot_BP,breaks=100, main="Top CSD candidates", xlab="Genomic position", ylab="N hits >= 0.8", col="grey")
abline(v=chrom_sizes$start, lty=2,col="blue")
top_Fst<- chrom[chrom$Fst.>=0.1,]
hist(top_Fst$tot_BP,breaks=100, main="Top CSD candidates", xlab="Genomic position", ylab="N hits >= 0.8", col="grey")
top_Fst<- chrom[chrom$Fst.>=0.2,]
hist(top_Fst$tot_BP,breaks=100, main="Top CSD candidates", xlab="Genomic position", ylab="N hits >= 0.8", col="grey")
abline(v=chrom_sizes$start, lty=2,col="blue")
top_Fst<- chrom[chrom$Fst.>=0.15,]
hist(top_Fst$tot_BP,breaks=100, main="Top CSD candidates", xlab="Genomic position", ylab="N hits >= 0.8", col="grey")
