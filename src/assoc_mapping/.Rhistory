for(chrom in unique(gen$Chr)){
chr_gen <- gen[gen$Chr==chrom,]
win_chr <- data.frame(lapply(chr_gen[,indv$Name],  function(x) slide_het(x, chr_gen$centroD)))
if(nrow(win_chr)>0){
win_chr$Chr <- chrom
win_chr$centro_dist <- rownames(win_chr);rownames(win_chr) <- NULL
full_win <- rbind(full_win, win_chr)
}
}
full_win <- melt(full_win, measure.vars = indv$Name, id.vars = c("Chr","centro_dist"), variable.name="Name",value.name="Het.")
full_win <- merge(full_win, indv, by="Name")
full_win$centro_dist <- as.numeric(full_win$centro_dist)
genofull= data.frame()
for(size in seq(50000,5000000,50000)){
for ( chrom in unique(gen$Chr)){
chr_start <- centro$pos[centro$Chr==chrom] - size
chr_end <- centro$pos[centro$Chr==chrom] + size
cen_chr <- gen %>%
filter(Chr == chrom & BP > chr_start & BP < chr_end) %>%
select(indv$Name[indv$Generation=='F4'])
chr_prop <- cen_chr %>%
summarise_all(function(x){sum(x=='E')/sum(x %in% c('E','O'))})
chr_loci <- cen_chr %>%
summarise_all(function(x){sum(x %in% c('E','O'))})
cen_chr <- data.frame(t(rbind(chr_prop, chr_loci)))
colnames(cen_chr) <- c("Het.", "Num.Loci")
cen_chr <- cen_chr %>%
tibble::rownames_to_column(var = "Name")%>%
merge(indv, by="Name")
cen_chr <- cen_chr %>%
mutate(centrosize=size, Chr=chrom)
genofull <- rbind(genofull, cen_chr)
}
print(size)
}
genofull$Chr <- 'all_chr';full_win$Chr <- 'all_chr'
full_win <- full_win %>%
group_by(Chr,Family) %>%
mutate(norm_het = (Het. - mean(Het.))/sd(Het.))
ggplot(data=full_win[full_win$Family %in% big_fam,], aes(x=centro_dist, y=Het., col=Name,group=Name)) +
geom_line(stat='smooth', method='loess',alpha=0.5, se=F) + guides(col=FALSE) + facet_grid(Family~Chr)
smoothScatter(genofull$Num.Loci, genofull$Het.)
famorder <- cen_chr %>%
group_by(Family) %>%
summarise(avg=mean(Het.))
cen_chr$Family <- factor(cen_chr$Family, ordered = T, levels = famorder$Family[order(famorder$avg)])
ggplot(data=genofull, aes(x=Het., y=Family)) + geom_joy()
genofull <- genofull %>%
group_by(Chr, Family) %>%
mutate(norm_het=(Het.-mean(Het., na.rm=T))/sd(Het., na.rm=T))
ggplot(data=genofull[genofull$Family %in% big_fam,], aes(x=centrosize, y=Het.,col=Name, weight=Num.Loci)) + stat_smooth(method='loess') +
facet_grid(Family~Chr)+ guides(col=FALSE)
ggplot(data=genofull[genofull$Family %in% big_fam,], aes(x=centrosize, y=Het.,col=Name, weight=Num.Loci)) + stat_smooth(method='loess') +
facet_grid(.~Family)+ guides(col=FALSE)
ggplot(data=full_win[full_win$Family %in% big_fam,], aes(x=centro_dist, y=Het., col=Name,group=Name)) +
geom_line(stat='smooth', method='loess',alpha=0.5, se=F) + guides(col=FALSE) + facet_grid(Family~Chr)
ggplot(data=full_win[full_win$Family %in% big_fam,], aes(x=centro_dist, y=Het., col=Name,group=Name)) +
geom_line(stat='smooth', method='loess',alpha=0.5, se=F) + guides(col=FALSE) + facet_grid(~.Family)
ggplot(data=full_win[full_win$Family %in% big_fam,], aes(x=centro_dist, y=Het., col=Name,group=Name)) +
geom_line(stat='smooth', method='loess',alpha=0.5, se=F) + guides(col=FALSE) + facet_grid(.~Family)
library(dplyr);library(ggplot2)
args_list <- commandArgs(trailingOnly = T)
library(dplyr);library(ggplot2)
scenario <- 2
indv <- read.table("../../data/individuals.tsv",header=T)
diplo <- indv[indv$Generation=="F4" & indv$Ploidy=='D',]
off_comp <- data.frame(table(diplo$Family, diplo$Sex))
colnames(off_comp) <- c("Family", "Sex", "Count")
tot_off <- read.table("../../data/total_offspring_count.tsv", header=T)
tot_off <- read.table("../../data/total_offspring_count.tsv", header=T)
tot_off <- read.table("../../data/total_offspring_count.tsv", header=T)
View(tot_off)
diplo <- indv[indv$Generation=="F4" & indv$Ploidy=='D',]
View(tot_off)
View(diplo)
diplo <- indv[indv$Generation=="F4" & indv$Ploidy=='D',]
View(indv)
indv <- read.table("../../data/ploidy/thresholds/fixed.tsv",header=T)
diplo <- indv[indv$Generation=="F4" & indv$Ploidy=='D',]
diplo <- indv[indv$Generation=="F4" & indv$Ploidy=='D',]
View(diplo)
indv <- read.table("../../data/ploidy/thresholds/fixed.tsv",header=T)
View(indv)
diplo <- indv[indv$Generation=="F4" & indv$Ploidy=='D',]
View(diplo)
off_comp <- data.frame(table(diplo$Family, diplo$Sex))
colnames(off_comp) <- c("Family", "Sex", "Count")
View(off_comp)
off_seq <- indv[indv$Generation=="F4",]
tot_off
indv
pwd()
getwd()
fam_list <- read.table("../../data/families.txt", header=T)
fam_list <- read.table("../../data/families.txt", header=T,fill = T)
View(fam_list)
View(fam_list)
fam_list <- read.table(pipe("cut -f1-3 ../../data/families.txt"), header=T)
View(fam_list)
head(fam_list)
head(tot_off)
head indv
head(indv)
fam_list <- read.table(pipe("cut -f1-4 ../../data/families.txt"), header=T)
View(fam_list)
head(fam_list)
head(indv)
head(tot_off)
unique(fam_list$Family[fam_list$parent.id=="C266",])
unique(fam_list$Family[fam_list$parent.id=="C266"])
fam_list <- read.table(pipe("cut -f2,4 ../../data/families.txt"), header=T)
fam_list
tot_off
tot_off
head(tot_off)
head(fam_list)
tot_off2 <- merge(tot_off, fam_list, by.x='mother', by.y='parent.id', all=F)
tot_off2
unique(fam_list)
fam_list <- unique(fam_list)
tot_off2 <- merge(tot_off, fam_list, by.x='mother', by.y='parent.id', all=F)
tot_off2
off_seq <- indv[indv$Generation=="F4",]  # Sequenced offspring
off_seq
head(off_seq)
male_seq <- indv[indv$Sex=='M',]  # Sequenced offspring
male_seq
off_comp <- data.frame(table(diplo$Family, diplo$Ploidy))
off_comp
indv <- read.table("../../data/ploidy/thresholds/fixed.tsv",header=T)
indv
male_seq <- indv[indv$Sex=='M',]  # Sequenced offspring
male_ploidy <- data.frame(table(male_seq$Family, male_seq$Ploidy))
male_ploidy
colnames(off_comp) <- c("Family", "Ploidy", "Count")
male_pl <- data.frame(table(male_seq$Family, male_seq$Ploidy))
colnames(male_pl) <- c("Family", "Ploidy", "Count")
male_pl
male_pl <- male_pl %>%
group_by(Family) %>%
mutate(prop_2n=round(Count[Ploidy=='D']/sum(Count),3)) %>%
filter(Ploidy=='D') %>%
select(-Ploidy)
male_pl
male_pl <- male_pl %>%
group_by(Family) %>%
mutate(prop_2n=round(Count[Ploidy=='D']/sum(Count),3),
count_M=sum(Count)) %>%
filter(Ploidy=='D') %>%
select(-Ploidy)
male_pl <- data.frame(table(male_seq$Family, male_seq$Ploidy))
colnames(male_pl) <- c("Family", "Ploidy", "Count")
male_pl <- male_pl %>%
group_by(Family) %>%
mutate(prop_2n=round(Count[Ploidy=='D']/sum(Count),3),
count_M=sum(Count)) %>%
filter(Ploidy=='D') %>%
select(-Ploidy)
ngroups <- 2^scenario-1
male_pl
male_pl <- male_pl %>%
group_by(Family) %>%
mutate(prop_2n=round(Count[Ploidy=='D']/sum(Count),3),
tot_M=sum(Count)) %>%
filter(Ploidy=='D') %>%
select(-Ploidy, -Count)
male_pl <- data.frame(table(male_seq$Family, male_seq$Ploidy))
colnames(male_pl) <- c("Family", "Ploidy", "Count")
male_pl <- male_pl %>%
group_by(Family) %>%
mutate(prop_2n=round(Count[Ploidy=='D']/sum(Count),3),
tot_M=sum(Count)) %>%
filter(Ploidy=='D') %>%
select(-Ploidy, -Count)
male_pl
ngroups <- 2^scenario-1
tot_off
tot_off <- merge(tot_off, fam_list, by.x='mother', by.y='parent.id', all=F)
male_seq <- indv[indv$Sex=='M',]  # Sequenced offspring
tot_off <- read.table("../../data/total_offspring_count.tsv", header=T)
fam_list <- read.table(pipe("cut -f2,4 ../../data/families.txt"), header=T)
fam_list <- unique(fam_list)
tot_off <- merge(tot_off, fam_list, by.x='mother', by.y='parent.id', all=F)
View(tot_off)
male_pl$prop_2n
male_pl
tot_off
tot_off %>%
merge(male_pl, by="Family",all=F)
x = 'èéà'
x
Encoding(x)
iconv(x, from="ASCII", to="UTF-8")
enc2utf8(x)
enc2utf8(x = x)
enc2native(x)
tot_off <- read.table("../../data/total_offspring.tsv", header=T)
View(tot_off)
fam_list <- unique(fam_list)  # Used for mother ID - Family name correspondance
tot_off <- merge(tot_off, fam_list, by.x='mother', by.y='parent.id', all=F)
male_seq <- indv[indv$Sex=='M',]  # Sequenced offspring
View(tot_off)
male_seq <- indv  # Sequenced offspring
male_pl <- data.frame(table(male_seq$Family, male_seq$Ploidy))
colnames(male_pl) <- c("Family", "Ploidy", "Count")
male_pl
indv
male_seq <- indv[indv$Sex=='M',]  # Sequenced offspring
male_pl <- data.frame(table(male_seq$Family, male_seq$Ploidy))
colnames(male_pl) <- c("Family", "Ploidy", "Count")
male_pl <- male_pl %>%
group_by(Family) %>%
mutate(prop_2n=round(Count[Ploidy=='D']/sum(Count),3),
tot_M=sum(Count)) %>%
filter(Ploidy=='D') %>%
select(-Ploidy, -Count)
library(dplyr);library(ggplot2)
args_list <- commandArgs(trailingOnly = T)
scenario=2
indv=read.table("../../data/ploidy/thresholds/fixed.tsv")
indv=read.table("../../data/ploidy/thresholds/fixed.tsv", header=T)
fam_list <- read.table(pipe("cut -f2,4 ../../data/families.txt"), header=T)
tot_off <- read.table("../../data/total_offspring.tsv", header=T)
fam_list <- unique(fam_list)  # Used for mother ID - Family name correspondance
tot_off <- merge(tot_off, fam_list, by.x='mother', by.y='parent.id', all=F)
male_seq <- indv[indv$Sex=='M',]  # Sequenced offspring
male_pl <- data.frame(table(male_seq$Family, male_seq$Ploidy))
colnames(male_pl) <- c("Family", "Ploidy", "Count")
male_pl <- male_pl %>%
group_by(Family) %>%
mutate(prop_2n=round(Count[Ploidy=='D']/sum(Count),3),
tot_M=sum(Count)) %>%
filter(Ploidy=='D') %>%
select(-Ploidy, -Count)
male_pl
tot_off <- tot_off %>%
merge(male_pl, by="Family",all=F)
tot_off
casp <- tot_off %>% select(-prop_2n)
casp
write.table(casp, "~/compare_male_count.tsv", col.names = T, sep='\t', row.names=F, quote = F)
fem_seq <- indv[indv$Sex=='F',]  # Sequenced offspring
fem_seq
fem_pl <- data.frame(table(male_seq$Family, male_seq$Ploidy))
colnames(male_pl) <- c("Family", "Ploidy", "Count")
fem_pl
fem_seq <- indv[indv$Sex=='F' & indv$Generation=='F4',]  # Sequenced offspring
fem_pl <- data.frame(table(male_seq$Family, male_seq$Ploidy))
colnames(male_pl) <- c("Family", "Ploidy", "Count")
fem_pl
fem_pl <- data.frame(table(fem_seq$Family, male_seq$Ploidy))
fem_pl
fem_pl <- data.frame(table(fem_seq$Family, femseq$Ploidy))
fem_pl
fem_seq <- indv[indv$Sex=='F' & indv$Generation=='F4',]  # Sequenced offspring
fem_seq
fem_pl <- data.frame(table(fem_seq$Family, femseq$Ploidy))
fem_pl <- data.frame(table(fem_seq$Family, fem_seq$Ploidy))
fem_pl
colnames(male_pl) <- c("Family", "Ploidy", "Count")
fem_pl <- fem_pl %>%
group_by(Family) %>%
mutate(prop_2n=round(Count[Ploidy=='D']/sum(Count),3),
tot_M=sum(Count)) %>%
filter(Ploidy=='D') %>%
select(-Ploidy, -Count)
fem_pl
tot_off <- tot_off %>%
merge(fem_pl, by="Family",all=F)
tot_off
fem_pl
colnames(fem_pl) <- c("Family", "Ploidy", "Count")
fem_pl
tot_off <- tot_off %>%
merge(fem_pl, by="Family",all=F)
tot_off
fem_pl <- fem_pl %>%
group_by(Family) %>%
mutate(prop_2n=round(Count[Ploidy=='D']/sum(Count),3),
tot_M=sum(Count)) %>%
filter(Ploidy=='D') %>%
select(-Ploidy, -Count)
fem_pl
# Loading additional files
fam_list <- read.table(pipe("cut -f2,4 ../../data/families.txt"), header=T)
# Total number of non-sequenced offspring in each family
tot_off <- read.table("../../data/total_offspring.tsv", header=T)
#==== PROCESSING ====#
fam_list <- unique(fam_list)  # Used for mother ID - Family name correspondance
tot_off <- merge(tot_off, fam_list, by.x='mother', by.y='parent.id', all=F)
male_seq <- indv[indv$Sex=='M',]  # Sequenced offspring
male_pl <- data.frame(table(male_seq$Family, male_seq$Ploidy))
colnames(male_pl) <- c("Family", "Ploidy", "Count")
male_pl <- male_pl %>%
group_by(Family) %>%
mutate(prop_2n=round(Count[Ploidy=='D']/sum(Count),3),
tot_M=sum(Count)) %>%
filter(Ploidy=='D') %>%
select(-Ploidy, -Count)
tot_off <- tot_off %>%
merge(male_pl, by="Family",all=F)
colnames(fem_pl)
colnames(fem_pl)[3] <- "tot_F"
colnames(fem_pl)
tot_off
tot_off <- tot_off %>%
merge(fem_pl, by="Family",all=F)
tot_off
casp = tot_off[,c(1,2,3,4,5,7,9)]
casp
View(indv)
write.table(casp, "~/compare_male_count.tsv", col.names = T, sep='\t', row.names=F, quote = F)
fam_list <- read.table(pipe("cut -f2,4 ../../data/families.txt"), header=T)
# Total number of non-sequenced offspring in each family
tot_off <- read.table("../../data/total_offspring.tsv", header=T)
#==== PROCESSING ====#
fam_list <- unique(fam_list)  # Used for mother ID - Family name correspondance
tot_off <- merge(tot_off, fam_list, by.x='mother', by.y='parent.id', all=F)
male_seq <- indv[indv$Sex=='M',]  # Sequenced offspring
male_pl <- data.frame(table(male_seq$Family, male_seq$Ploidy))
colnames(male_pl) <- c("Family", "Ploidy", "Count")
male_pl <- male_pl %>%
group_by(Family) %>%
mutate(prop_2n=round(Count[Ploidy=='D']/sum(Count),3),
tot_M=sum(Count)) %>%
filter(Ploidy=='D') %>%
select(-Ploidy, -Count)
tot_off <- tot_off %>%
merge(male_pl, by="Family",all=F)
tot_off
tot_off <- tot_off %>%
merge(male_pl, by="Family",all=F) %>%
mutate(infer_2n=sons*prop_2n) %>%
select(-unknown, -prop_2n)
# Loading additional files
fam_list <- read.table(pipe("cut -f2,4 ../../data/families.txt"), header=T)
# Total number of non-sequenced offspring in each family
tot_off <- read.table("../../data/total_offspring.tsv", header=T)
#==== PROCESSING ====#
fam_list <- unique(fam_list)  # Used for mother ID - Family name correspondance
tot_off <- merge(tot_off, fam_list, by.x='mother', by.y='parent.id', all=F)
male_seq <- indv[indv$Sex=='M',]  # Sequenced offspring
male_pl <- data.frame(table(male_seq$Family, male_seq$Ploidy))
colnames(male_pl) <- c("Family", "Ploidy", "Count")
male_pl <- male_pl %>%
group_by(Family) %>%
mutate(prop_2n=round(Count[Ploidy=='D']/sum(Count),3),
tot_M=sum(Count)) %>%
filter(Ploidy=='D') %>%
select(-Ploidy, -Count)
tot_off <- tot_off %>%
merge(male_pl, by="Family",all=F) %>%
mutate(infer_2n=sons*prop_2n) %>%
select(-unknown, -prop_2n)
tot_off
male_pl
37*0.2
View(tot_off)
fam_list <- read.table(pipe("cut -f2,4 ../../data/families.txt"), header=T)
# Total number of non-sequenced offspring in each family
tot_off <- read.table("../../data/total_offspring.tsv", header=T)
#==== PROCESSING ====#
fam_list <- unique(fam_list)  # Used for mother ID - Family name correspondance
tot_off <- merge(tot_off, fam_list, by.x='mother', by.y='parent.id', all=F)
male_seq <- indv[indv$Sex=='M',]  # Sequenced offspring
male_pl <- data.frame(table(male_seq$Family, male_seq$Ploidy))
colnames(male_pl) <- c("Family", "Ploidy", "Count")
male_pl <- male_pl %>%
group_by(Family) %>%
mutate(prop_2n=round(Count[Ploidy=='D']/sum(Count),3),
tot_M=sum(Count)) %>%
filter(Ploidy=='D') %>%
select(-Ploidy, -Count)
diplo_off <- tot_off %>%
merge(male_pl, by="Family",all=F) %>%
mutate(infer_2n=sons*prop_2n) %>%
select(-unknown, -prop_2n, -tot_M, -sons) %>%
mutate(prop_male=infer_2n/daughters)
diplo_off
diplo_off <- tot_off %>%
merge(male_pl, by="Family",all=F) %>%
mutate(infer_2n=sons*prop_2n) %>%
select(-unknown, -prop_2n, -tot_M, -sons) %>%
mutate(prop_male=round(infer_2n/daughters,3)
#=== CLUSTERING ===#
# Expected number of categories is a function of the number of CSD loci
ngroups <- 2^scenario-1
# exp_prop <- 1/(2^scenario)
# Using Pascal's triangle to get count of genotypes
# with n het loci where 0 < n <= scenario
# Note: n < 0 since 0 het loci lead to male
#x <- 1
#for (i in 1:scenario) { x <- c(0, x) + c(x, 0)}
# Number of centers for k-means clustering
#centers <- sum(x[2:length(x)])  # First value is only homozygous loci
km_output <- kmeans(off_comp$prop_males,centers = ngroups)
off_comp$cluster <- km_output$cluster
#ggplot(data=off_comp, aes(x=prop_males, fill=as.factor(cluster))) + geom_histogram() +
#  ggtitle("Male proportion per family") + xlab("Proportion of males") + theme_bw() +
#  scale_fill_discrete(name="Heterozygous loci", labels=c("a","a+b", "b")) + ylab("Number of families") +
#  ylab("Number of families") + geom_vline(data=data.frame(km_output$centers),
#                                          aes(xintercept=km_output.centers), col='red', lty=2)
write.table(off_comp, out, sep='\t', row.names=F, quote=F)
fam_list <- read.table(pipe("cut -f2,4 ../../data/families.txt"), header=T)
# Total number of non-sequenced offspring in each family
tot_off <- read.table("../../data/total_offspring.tsv", header=T)
#==== PROCESSING ====#
fam_list <- unique(fam_list)  # Used for mother ID - Family name correspondance
tot_off <- merge(tot_off, fam_list, by.x='mother', by.y='parent.id', all=F)
male_seq <- indv[indv$Sex=='M',]  # Sequenced offspring
male_pl <- data.frame(table(male_seq$Family, male_seq$Ploidy))
colnames(male_pl) <- c("Family", "Ploidy", "Count")
male_pl <- male_pl %>%
group_by(Family) %>%
mutate(prop_2n=round(Count[Ploidy=='D']/sum(Count),3),
tot_M=sum(Count)) %>%
filter(Ploidy=='D') %>%
select(-Ploidy, -Count)
diplo_off <- tot_off %>%
merge(male_pl, by="Family",all=F) %>%
mutate(infer_2n=sons*prop_2n) %>%
select(-unknown, -prop_2n, -tot_M, -sons) %>%
mutate(prop_male=round(infer_2n/daughters,3)
diplo_off
diplo_off <- tot_off %>%
merge(male_pl, by="Family",all=F) %>%
mutate(infer_2n=sons*prop_2n) %>%
select(-unknown, -prop_2n, -tot_M, -sons) %>%
mutate(prop_male=round(infer_2n/daughters,3))
diplo_off
fam_list <- read.table(pipe("cut -f2,4 ../../data/families.txt"), header=T)
# Total number of non-sequenced offspring in each family
tot_off <- read.table("../../data/total_offspring.tsv", header=T)
fam_list <- unique(fam_list)  # Used for mother ID - Family name correspondance
tot_off <- merge(tot_off, fam_list, by.x='mother', by.y='parent.id', all=F)
male_seq <- indv[indv$Sex=='M',]  # Sequenced offspring
male_pl <- data.frame(table(male_seq$Family, male_seq$Ploidy))
colnames(male_pl) <- c("Family", "Ploidy", "Count")
male_pl
male_pl <- male_pl %>%
group_by(Family) %>%
mutate(prop_2n=round(Count[Ploidy=='D']/sum(Count),3),
tot_M=sum(Count)) %>%
filter(Ploidy=='D') %>%
select(-Ploidy, -Count)
male_pl
View(tot_off)
View(tot_off)
diplo_off <- tot_off %>%
merge(male_pl, by="Family",all=F)
View(diplo_off)
diplo_off[diplo_off$sons<diplo_off$tot_M,]
tot_off <- read.table("../../data/total_offspring.tsv", header=T)
fam_list <- unique(fam_list)  # Used for mother ID - Family name correspondance
tot_off <- merge(tot_off, fam_list, by.x='mother', by.y='parent.id', all=F)
male_seq <- indv[indv$Sex=='M',]  # Sequenced offspring
male_pl <- data.frame(table(male_seq$Family, male_seq$Ploidy))
colnames(male_pl) <- c("Family", "Ploidy", "Count")
male_pl <- male_pl %>%
group_by(Family) %>%
mutate(prop_2n=round(Count[Ploidy=='D']/sum(Count),3),
tot_M=sum(Count)) %>%
filter(Ploidy=='D') %>%
select(-Ploidy, -Count)
diplo_off <- tot_off %>%
merge(male_pl, by="Family",all=F) %>%
mutate(infer_2n=sons*prop_2n) %>%
select(-unknown, -prop_2n, -tot_M, -sons) %>%
mutate(prop_male=round(infer_2n/daughters,3))
diplo_off
diplo_off <- tot_off %>%
merge(male_pl, by="Family",all=F) %>%
mutate(infer_2n=sons*prop_2n) %>%
select(-unknown, -prop_2n, -tot_M, -sons) %>%
mutate(prop_male=round(infer_2n/(daughters+infer_2n),3))
diplo_off
ngroups <- 2^scenario-1
km_output <- kmeans(off_comp$prop_males,centers = ngroups)
off_comp$cluster <- km_output$cluster
km_output <- kmeans(diplo_off$prop_males,centers = ngroups)
km_output <- kmeans(diplo_off$prop_male,centers = ngroups)
off_comp$cluster <- km_output$cluster
diplo_off$cluster <- km_output$cluster
diplo_off
ggplot(data=diplo_off, aes(x=prop_male, fill=as.factor(cluster))) + geom_histogram() +
ggtitle("Male proportion per family") + xlab("Proportion of males") + theme_bw() +
scale_fill_discrete(name="Heterozygous loci", labels=c("a","a+b", "b")) + ylab("Number of families") +
ylab("Number of families") + geom_vline(data=data.frame(km_output$centers),
aes(xintercept=km_output.centers), col='red', lty=2)
km_output <- kmeans(diplo_off$prop_male,centers = 2)
off_comp$cluster <- km_output$cluster
diplo_off$cluster <- km_output$cluster
ggplot(data=diplo_off, aes(x=prop_male, fill=as.factor(cluster))) + geom_histogram() +
ggtitle("Male proportion per family") + xlab("Proportion of males") + theme_bw() +
scale_fill_discrete(name="Heterozygous loci", labels=c("a","a+b", "b")) + ylab("Number of families") +
ylab("Number of families") + geom_vline(data=data.frame(km_output$centers),
aes(xintercept=km_output.centers), col='red', lty=2)
ggplot(data=diplo_off, aes(x=prop_male, fill=as.factor(cluster))) + geom_histogram(binwidth=0.3) +
ggtitle("Male proportion per family") + xlab("Proportion of males") + theme_bw() +
scale_fill_discrete(name="Heterozygous loci", labels=c("a","a+b", "b")) + ylab("Number of families") +
ylab("Number of families") + geom_vline(data=data.frame(km_output$centers),
aes(xintercept=km_output.centers), col='red', lty=2)
ggplot(data=diplo_off, aes(x=prop_male, fill=as.factor(cluster))) + geom_histogram(binwidth=0.1) +
ggtitle("Male proportion per family") + xlab("Proportion of males") + theme_bw() +
scale_fill_discrete(name="Heterozygous loci", labels=c("a","a+b", "b")) + ylab("Number of families") +
ylab("Number of families") + geom_vline(data=data.frame(km_output$centers),
aes(xintercept=km_output.centers), col='red', lty=2)
ggplot(data=diplo_off, aes(x=prop_male, fill=as.factor(cluster))) + geom_histogram(binwidth=0.05) +
ggtitle("Male proportion per family") + xlab("Proportion of males") + theme_bw() +
scale_fill_discrete(name="Heterozygous loci", labels=c("a","a+b", "b")) + ylab("Number of families") +
ylab("Number of families") + geom_vline(data=data.frame(km_output$centers),
aes(xintercept=km_output.centers), col='red', lty=2)
