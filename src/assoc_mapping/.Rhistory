ggplot(data=indv, aes(x=MEAN_DEPTH, y=lib, fill=N_SITES)) +
geom_joy(stat = "binline", bins=20, scale=0.95, draw_baseline=T)+
ylab("Library")
ggplot(data=indv, aes(x=MEAN_DEPTH, y=lib, fill=N_SITES)) +
geom_joy(stat = "binline", bins=20, scale=0.95, draw_baseline=T)+
ylab("Library")
ggplot(data=indv, aes(x=MEAN_DEPTH, y=lib), fill=N_SITES)) +
geom_joy(stat = "binline", bins=20, scale=0.95, draw_baseline=T)+
ylab("Library")
ggplot(data=indv, aes(x=MEAN_DEPTH, y=lib), fill=N_SITES) +
geom_joy(stat = "binline", bins=20, scale=0.95, draw_baseline=T)+
ylab("Library")
ggplot(data=indv, aes(x=MEAN_DEPTH, y=lib)) +
geom_joy(stat = "binline", bins=20, scale=0.95, draw_baseline=T, fill=N_SITES)+
ylab("Library")
indv
ggplot(data=indv, aes(x=MEAN_DEPTH, y=lib)) +
geom_joy(stat = "binline", bins=20, scale=0.95, draw_baseline=T, fill=indv$N_SITES)+
ylab("Library")
ggplot(data=indv, aes(x=MEAN_DEPTH, y=lib)) +
geom_joy(stat = "binline", bins=20, scale=0.95, draw_baseline=T)+
ylab("Library")
ggplot(data=indv, aes(x=MEAN_DEPTH, y=lib, height=..density..)) +
geom_joy(stat = "binline", bins=20, scale=0.95, draw_baseline=T)+
ylab("Library")
ggplot(data=indv, aes(x=N_SITES, y=lib, height=..density..)) +
geom_joy(stat = "binline", bins=20, scale=0.95, draw_baseline=T)+
ylab("Library")
View(depth)
gen[,sampleID] <- apply(gen[,sampleID], 2, as.character)
pack <- c("stringr","dplyr", "readr")
lapply(pack, require, character.only = TRUE)
pop_path <- "../../data/populations/grouped_d-3_r-80"
sampleID <- read_tsv(paste(pop_path, 'batch_0.sumstats.tsv', sep='/'),
n_max = 2, col_names = F)
gen <- read_tsv(paste(pop_path, "batch_0.genomic.tsv", sep='/'),
skip = 1, col_names = F)
sampleID <- append(unlist(str_split(sampleID[1,2], ',')),
unlist(str_split(sampleID[2,2], ',')))
colnames(gen)[1:3] <- c("Locus.ID","Chr","BP")
colnames(gen)[4:length(colnames(gen))] <- sampleID
gen[,sampleID] <- apply(gen[,sampleID], 2, function(x) ifelse(x>10,yes = 0,no=x))
gen[,sampleID] <- apply(gen[,sampleID], 2, as.character)
geno <- list('0'='M')
for(g in as.character(1:10)){geno[[g]] <- ifelse(g %in% c('1','5','8','10'), yes='O', no='E')}
geno
gen[,sampleID] <- apply(gen[,sampleID], 2, function(x) geno[[x]])
gen[,sampleID] <- lapply(gen[,sampleID], function(x) geno[[x]])
lapply(gen[,sampleID], function(x) print(x))
test <- gen[,sampleID] %>%
mutate_each(funs(function(x) geno[[x]]))
test <- gen[,sampleID] %>%
mutate_each(funs(geno[[x]]))
test <- gen[,sampleID] %>%
mutate_each(funs(function(x){geno[[x]]}))
geno[[gen[,'C209']]]
gen[,'C209']
geno[[gen[1,'C209']]]
gen[1,'C209']
as.character(gen[1,'C209'])
geno[[as.character(gen[1,'C209'])]]
test <- gen[,sampleID] %>%
mutate_each(funs(function(x){geno[[as.character(x)]]}))
gen[,sampleID] <- lapply(gen[,sampleID], , function(x) geno[[as.character(x)]])
lapply(gen[,sampleID], function(x) geno[[as.character(x)]])
Vectorize(function(x) geno[[as.character(x)]])
vec_geno <- Vectorize(function(x) geno[[as.character(x)]])
gen[,sampleID] <- lapply(gen[,sampleID], FUN=vec_geno)
View(gen)
centro <- read_tsv("../../data/assoc_mapping/centro/centrolist.tsv")
centro
View(centro)
centro$start <- centro$pos - 100000
centro$end <- centro$pos + 100000
View(centro)
centrosize <- 100000
?switch
for ( chrom in levels(gen$Chr)){
print(chrom)
}
levels(gen$Chr)
for ( chrom in unique(gen$Chr)){
print(chrom)
}
gen <- gen[grep(pattern = "chr.*", x = gen$Chr),]
gen
View(gen)
# Path to folder containing STACKS populations output files
pop_path <- "../../data/populations/grouped_d-3_r-80"
# File with sample names ordered as in genomic output
sampleID <- read_tsv(paste(pop_path, 'batch_0.sumstats.tsv', sep='/'),
n_max = 2, col_names = F)
# Genomic output from populations
gen <- read_tsv(paste(pop_path, "batch_0.genomic.tsv", sep='/'),
skip = 1, col_names = F)
# Loading centromere list
centro <- read_tsv("../../data/assoc_mapping/centro/centrolist.tsv")
#==== PROCESSING ====#
# Concatenating sample names into a single vector
sampleID <- append(unlist(str_split(sampleID[1,2], ',')),
unlist(str_split(sampleID[2,2], ',')))
# Meaningful column names
colnames(gen)[1:3] <- c("Locus.ID","Chr","BP")
gen[grep(pattern = "chr.*", x = gen$Chr),]
gen %>%
filter(grep("chr.*", Chr))
grep("chr.*", Chr)
grep("chr.*", gen$Chr)
gen <- gen %>%
filter(str_detect(pattern = "chr.*"))
gen %>%
filter(str_detect(string= Chr,pattern = "chr.*"))
str_detect(string= gen$Chr,pattern = "chr.*")
t1 <- gen %>%
filter(str_detect(string= Chr,pattern = "chr.*"))
t2 <- gen[grep(pattern = "chr.*", x = gen$Chr),]
profvis::profvis({t1 <- gen %>%
filter(str_detect(string= Chr,pattern = "chr.*"))
t2 <- gen[grep(pattern = "chr.*", x = gen$Chr),]})
gen <- gen %>%
filter(str_detect(string= Chr,pattern = "chr.*"))
pack <- c("stringr","dplyr", "readr")
lapply(pack, require, character.only = TRUE)
centrosize <- 100000
pop_path <- "../../data/populations/grouped_d-3_r-80"
sampleID <- read_tsv(paste(pop_path, 'batch_0.sumstats.tsv', sep='/'),
n_max = 2, col_names = F)
gen <- read_tsv(paste(pop_path, "batch_0.genomic.tsv", sep='/'),
skip = 1, col_names = F)
centro <- read_tsv("../../data/assoc_mapping/centro/centrolist.tsv")
sampleID <- append(unlist(str_split(sampleID[1,2], ',')),
unlist(str_split(sampleID[2,2], ',')))
colnames(gen)[1:3] <- c("Locus.ID","Chr","BP")
gen <- gen %>%
filter(str_detect(string= Chr,pattern = "chr.*"))
colnames(gen)[4:length(colnames(gen))] <- sampleID
gen[,sampleID] <- apply(gen[,sampleID], 2, function(x) ifelse(x>10,yes = 0,no=x))
gen[,sampleID] <- apply(gen[,sampleID], 2, as.character)
geno <- list('0'='M')
for(g in as.character(1:10)){geno[[g]] <- ifelse(g %in% c('1','5','8','10'), yes='O', no='E')}
vec_geno <- Vectorize(function(x) geno[[as.character(x)]])
gen[,sampleID] <- lapply(gen[,sampleID], FUN=vec_geno)
centro$start <- centro$pos - centrosize
centro$end <- centro$pos + centrosize
unique(gen$Chr)
centro$start[centro$Chr == chrom]
chrom='chr1'
centro$start[centro$Chr == chrom]
gen %>%
filter(Chr == chrom & BP > chr_start & BP < chr_end)
chr_start <- centro$start[centro$Chr == chrom]
chr_end <- centro$end[centro$Chr == chrom]
gen %>%
filter(Chr == chrom & BP > chr_start & BP < chr_end)
cen_chr <- gen %>%
filter(Chr == chrom & BP > chr_start & BP < chr_end)
View(gen)
View(cen_chr)
vars(sampleID)
gen <- gen %>%
filter(vars(sampleID), is.character)
gen <- gen %>%
filter(vars(sampleID), any_vars(.=='E'))
gen <- gen %>%
filter(vars(sampleID), all_vars(.=='E'))
gen <- gen %>%
filter(vars(sampleID), .=='E')
gen %>%
filter(vars(sampleID), any(.=='E'))
version
install.packages(tidyverse)
install.packages("tidyverse")
detach("package:dplyr", unload=TRUE)
library("dplyr", lib.loc="~/R/x86_64-redhat-linux-gnu-library/3.3")
install.packages(c("acepack", "AER", "ape", "arm", "assertthat", "BH", "car", "chron", "coda", "colorspace", "corpcor", "cubature", "curl", "data.table", "DBI", "dendextend", "devtools", "digest", "dplyr", "evaluate", "factoextra", "FactoMineR", "flexmix", "formatR", "Formula", "ggjoy", "ggpubr", "ggsci", "git2r", "haven", "Hmisc", "htmltools", "htmlwidgets", "httpuv", "httr", "jsonlite", "knitr", "ks", "lme4", "lmerTest", "lmtest", "mapproj", "maps", "maptools", "markdown", "Matrix", "mclust", "MCMCglmm", "memoise", "modelr", "multicool", "mvtnorm", "nlme", "openssl", "pander", "pbkrtest", "proto", "purrr", "quantreg", "R6", "Rcpp", "RcppEigen", "reshape2", "rgl", "RgoogleMaps", "rmarkdown", "sandwich", "scales", "scatterplot3d", "shiny", "sp", "SparseM", "stringi", "stringr", "TH.data", "tibble", "tidyr", "viridis", "withr", "yaml", "zoo"))
library(tidyverse)
gen %>% filter(vars(sampleID), any_vars(.=='E'))
gen %>% filter_at(vars(sampleID), any_vars(.=='E'))
gen <- gen %>% filter_at(vars(sampleID), any_vars(.=='E'))
View(gen)
chr_start <- centro$start[centro$Chr == chrom]
chr_end <- centro$end[centro$Chr == chrom]
cen_chr <- gen %>%
filter(Chr == chrom & BP > chr_start & BP < chr_end) %>%
aggr
gen %>%
filter(Chr == chrom & BP > chr_start & BP < chr_end)
pack <- c("stringr","dplyr", "readr")
lapply(pack, require, character.only = TRUE)
gen %>%
filter(Chr == chrom & BP > chr_start & BP < chr_end) %>%
summarise_at(vars(sampleID), function(x) str_count('E')/str_count('[OE]'))
View(cen_chr)
cen_chr <- gen %>%
filter(Chr == chrom & BP > chr_start & BP < chr_end) %>%
summarise_at(vars(sampleID), function(x) str_count('E')/str_count('[OE]'))
View(cen_chr)
iris
starwars
iris
iris %>% group_by(Speices) %>% summarise_all(mean)
iris %>% group_by(Species) %>% summarise_all(mean)
iris %>% group_by(Species) %>% summarise_at(vars(c("Petal.Length","Petal.Width")),mean)
cen_chr
gen$C266
str_count(gen$C266, "E")
cen_chr <- gen %>%
filter(Chr == chrom & BP > chr_start & BP < chr_end) %>%
summarise_at(vars(sampleID), function(x) sum(str_count('E'))/sum(str_count('[OE]')))
cen_chr
View(centro)
View(cen_chr)
sum(str_count(gen$C266, "E"))
sum(str_count(gen$C266, "[OE]"))
sum(str_count(gen$C266, "E"))/sum(str_count(gen$C266, "[OE]"))
sum(str_count(gen$C209, "E"))/sum(str_count(gen$C266, "[OE]"))
cen_chr <- gen %>%
filter(Chr == chrom & BP > chr_start & BP < chr_end) %>%
summarise_at(vars(sampleID), function(x){sum(str_count('E'))/sum(str_count('[OE]'))})
cen_chr
cen_chr <- gen %>%
filter(Chr == chrom & BP > chr_start & BP < chr_end) %>%
summarise_at(vars(sampleID), mean)
warnings()
View(cen_chr)
cen_chr <- gen %>%
filter(Chr == chrom & BP > chr_start & BP < chr_end) %>%
summarise_all(vars(sampleID), function(x){sum(str_count('E'))/sum(str_count('[OE]'))})
cen_chr <- gen %>%
filter(Chr == chrom & BP > chr_start & BP < chr_end) %>%
summarise_at(vars(sampleID), .funs=function(x){sum(str_count('E'))/sum(str_count('[OE]'))})
cen_chr
cen_chr <- gen %>%
filter(Chr == chrom & BP > chr_start & BP < chr_end) %>%
summarise_at(vars(sampleID), .funs=function(x){sum(str_count('E'))})
cen_chr
cen_chr <- gen %>%
filter(Chr == chrom & BP > chr_start & BP < chr_end) %>%
summarise_at(vars(sampleID), .funs=function(x){sum(str_count('[OE]'))})
cen_chr
cen_chr <- gen %>%
filter(Chr == chrom & BP > chr_start & BP < chr_end)
View(cen_chr)
cen_chr <- gen %>%
filter(Chr == chrom & BP > chr_start & BP < chr_end) %>%
summarise_at(vars(sampleID), function(x){sum(x=='E')})
cen_chr
cen_chr <- gen %>%
filter(Chr == chrom & BP > chr_start & BP < chr_end) %>%
summarise_at(vars(sampleID), function(x){sum(x=='E')/sum(x %in% c('E','O'))})
cen_chr
View(cen_chr)
centrosize <- 1000000
centro$start <- centro$pos - centrosize
centro$end <- centro$pos + centrosize
chr_start <- centro$start[centro$Chr == chrom]
chr_end <- centro$end[centro$Chr == chrom]
cen_chr <- gen %>%
filter(Chr == chrom & BP > chr_start & BP < chr_end) %>%
summarise_at(vars(sampleID), function(x){sum(x=='E')/sum(x %in% c('E','O'))})
View(cen_chr)
pack <- c("stringr","dplyr", "readr")
lapply(pack, require, character.only = TRUE)
centrosize <- 1000000
#==== LOADING DATA ====#
# Path to folder containing STACKS populations output files
pop_path <- "../../data/populations/grouped_d-3_r-80"
# File with sample names ordered as in genomic output
sampleID <- read_tsv(paste(pop_path, 'batch_0.sumstats.tsv', sep='/'),
n_max = 2, col_names = F)
# Genomic output from populations
gen <- read_tsv(paste(pop_path, "batch_0.genomic.tsv", sep='/'),
skip = 1, col_names = F)
# Loading centromere list
centro <- read_tsv("../../data/assoc_mapping/centro/centrolist.tsv")
#==== PROCESSING ====#
# Concatenating sample names into a single vector
sampleID <- append(unlist(str_split(sampleID[1,2], ',')),
unlist(str_split(sampleID[2,2], ',')))
# Meaningful column names
colnames(gen)[1:3] <- c("Locus.ID","Chr","BP")
gen <- gen %>%
filter(str_detect(string= Chr,pattern = "chr.*"))
# Replacing numeric headers with sample names
colnames(gen)[4:length(colnames(gen))] <- sampleID
# If populations error yielded high number, replace with missing code
gen[,sampleID] <- apply(gen[,sampleID], 2, function(x) ifelse(x>10,yes = 0,no=x))
# Get sample columns into character format
gen[,sampleID] <- apply(gen[,sampleID], 2, as.character)
# Constructing genotype dictionary to match numeric genotype with hetero/homozygous/missing
geno <- list('0'='M')
for(g in as.character(1:10)){geno[[g]] <- ifelse(g %in% c('1','5','8','10'), yes='O', no='E')}
# Replacing numeric encoding with matching genotype letter
vec_geno <- Vectorize(function(x) geno[[as.character(x)]])
gen[,sampleID] <- lapply(gen[,sampleID], FUN=vec_geno)
centro$start <- centro$pos - centrosize
centro$end <- centro$pos + centrosize
chr_start <- centro$start[centro$Chr == chrom]
chr_end <- centro$end[centro$Chr == chrom]
cen_chr <- gen %>%
filter(Chr == chrom & BP > chr_start & BP < chr_end) %>%
summarise_at(vars(sampleID), function(x){sum(x=='E')/sum(x %in% c('E','O'))})
View(cen_chr)
centrosize <- 2000000
centro$start <- centro$pos - centrosize
centro$end <- centro$pos + centrosize
chr_start <- centro$start[centro$Chr == chrom]
chr_end <- centro$end[centro$Chr == chrom]
cen_chr <- gen %>%
filter(Chr == chrom & BP > chr_start & BP < chr_end) %>%
summarise_at(vars(sampleID), function(x){sum(x=='E')/sum(x %in% c('E','O'))})
View(cen_chr)
hist(t(cen_chr))
pack <- c("stringr","dplyr", "readr", "zoo", "ggplot2", "ggjoy", "reshape2")
lapply(pack, require, character.only = TRUE)
centrosize <- 1000000
#==== LOADING DATA ====#
# Path to folder containing STACKS populations output files
geno_path <- "../../data/assoc_mapping/grouped_geno_EOM.tsv"
# Genomic output from populations
gen <- read_tsv(geno_path, col_names = T)
# Loading centromere list
centro <- read_tsv("../../data/assoc_mapping/centro/centrolist.tsv")
# Loading list of individuals
indv <- read_tsv("../../data/individuals")
indv <- indv %>%
filter(Name %in% colnames(gen)[4:dim(gen)[2]]) %>%
filter(Generation=='F4')
#==== PROCESSING ===#
gen <- gen %>%
filter(str_detect(string=Chr, pattern="chr.*"))
centro$start <- centro$pos - centrosize
centro$end <- centro$pos + centrosize
#==== ANALYSIS ====#
gen <- gen %>%
group_by(Chr) %>%
merge(centro, by="Chr")
gen <- gen %>%
mutate(centroD=abs(gen$pos - gen$BP)) %>%
select(-start, -end, -pos, -val)
slide_het <- function(seq,dist,w=30,step=1){
zoo_seq <- zoo(seq,order.by = dist)
win_het <- rollapply(zoo_seq,width = w, by=step, function(x){sum(x=='E')/sum(x %in% c('E','O'))})
return(win_het)
}
slide_het <- function(seq,dist,w=list(500000),step=1){
zoo_seq <- zoo(seq,order.by = dist)
win_het <- rollapply(zoo_seq,width = w, by=step, function(x){sum(x=='E')/sum(x %in% c('E','O'))})
return(win_het)
}
slide_het <- function(seq,dist,w=list(500000),step=10000){
zoo_seq <- zoo(seq,order.by = dist)
win_het <- rollapply(zoo_seq,width = w, by=step, function(x){sum(x=='E')/sum(x %in% c('E','O'))})
return(win_het)
}
full_win <- data.frame()
for(chrom in unique(gen$Chr)){
chr_gen <- gen[gen$Chr==chrom,]
win_chr <- data.frame(lapply(chr_gen[,indv$Name],  function(x) slide_het(x, chr_gen$centroD)))
if(nrow(win_chr)>0){
win_chr$Chr <- chrom
win_chr$centro_dist <- rownames(win_chr);rownames(win_chr) <- NULL
full_win <- rbind(full_win, win_chr)
}
}
full_win <- melt(full_win, measure.vars = indv$Name, id.vars = c("Chr","centro_dist"), variable.name="Name",value.name="Het.")
full_win <- merge(full_win, indv, by="Name")
colnames(full_win)
chr_gen
win_chr
nrow(win_chr)
slide_het <- function(seq,dist,w=500,step=1){
zoo_seq <- zoo(seq,order.by = dist)
win_het <- rollapply(zoo_seq,width = w, by=step, function(x){sum(x=='E')/sum(x %in% c('E','O'))})
return(win_het)
}
full_win <- data.frame()
full_win <- data.frame()
for(chrom in unique(gen$Chr)){
chr_gen <- gen[gen$Chr==chrom,]
win_chr <- data.frame(lapply(chr_gen[,indv$Name],  function(x) slide_het(x, chr_gen$centroD)))
if(nrow(win_chr)>0){
win_chr$Chr <- chrom
win_chr$centro_dist <- rownames(win_chr);rownames(win_chr) <- NULL
full_win <- rbind(full_win, win_chr)
}
}
full_win <- melt(full_win, measure.vars = indv$Name, id.vars = c("Chr","centro_dist"), variable.name="Name",value.name="Het.")
full_win <- merge(full_win, indv, by="Name")
ggplot(data=full_win, aes(x=centro_dist, y=Het., group=Family)) + stat_smooth(se=F) +
facet_grid(~Chr) + guides(col=FALSE)
ggplot(data=full_win, aes(x=centro_dist, y=Het., group=Name, col=Family)) + geom_line() +
facet_grid(~Chr) + guides(col=FALSE)
View(full_win)
pack <- c("stringr","dplyr", "readr", "zoo", "ggplot2", "ggjoy", "reshape2")
lapply(pack, require, character.only = TRUE)
centrosize <- 1000000
#==== LOADING DATA ====#
# Path to folder containing STACKS populations output files
geno_path <- "../../data/assoc_mapping/grouped_geno_EOM.tsv"
# Genomic output from populations
gen <- read_tsv(geno_path, col_names = T)
# Loading centromere list
centro <- read_tsv("../../data/assoc_mapping/centro/centrolist.tsv")
# Loading list of individuals
indv <- read_tsv("../../data/individuals")
indv <- indv %>%
filter(Name %in% colnames(gen)[4:dim(gen)[2]]) %>%
filter(Generation=='F4')
#==== PROCESSING ===#
gen <- gen %>%
filter(str_detect(string=Chr, pattern="chr.*"))
centro$start <- centro$pos - centrosize
centro$end <- centro$pos + centrosize
#==== ANALYSIS ====#
gen <- gen %>%
group_by(Chr) %>%
merge(centro, by="Chr")
gen <- gen %>%
mutate(centroD=abs(gen$pos - gen$BP)) %>%
select(-start, -end, -pos, -val)
gen <- filter_at(vars(indv$Name), any_vars(str_detect("[OE]")))
gen1 <- gen %>% filter_at(vars(indv$Name), any_vars(str_detect("[OE]")))
gen1 <- gen %>% filter_at(vars(indv$Name), any_vars(str_detect(pattern="[OE]")))
gen1 <- gen %>% filter_at(vars(indv$Name), any_vars(str_detect(string=.,pattern="[OE]")))
View(gen1)
View(gen1)
slide_het <- function(seq,dist,w=50,step=1){
zoo_seq <- zoo(seq,order.by = dist)
win_het <- rollapply(zoo_seq,width = w, by=step, function(x){sum(x=='E')/sum(x %in% c('E','O'))})
return(win_het)
}
gen <- gen1
full_win <- data.frame()
for(chrom in unique(gen$Chr)){
chr_gen <- gen[gen$Chr==chrom,]
win_chr <- data.frame(lapply(chr_gen[,indv$Name],  function(x) slide_het(x, chr_gen$centroD)))
if(nrow(win_chr)>0){
win_chr$Chr <- chrom
win_chr$centro_dist <- rownames(win_chr);rownames(win_chr) <- NULL
full_win <- rbind(full_win, win_chr)
}
}
full_win <- melt(full_win, measure.vars = indv$Name, id.vars = c("Chr","centro_dist"), variable.name="Name",value.name="Het.")
full_win <- merge(full_win, indv, by="Name")
ggplot(data=full_win, aes(x=centro_dist, y=Het., group=Name, col=Family)) + geom_line() +
facet_grid(~Chr) + guides(col=FALSE)
ggplot(data=full_win, aes(x=centro_dist, y=Het., group=Name, col=Family)) + stat_smooth() +
facet_grid(~Chr) + guides(col=FALSE)
ggplot(data=full_win, aes(x=centro_dist, y=Het., group=Name, col=Family)) + stat_smooth(se=F) +
facet_grid(~Chr) + guides(col=FALSE) + geom_rect(data=centro, aes(xmin=start,xmax=end,ymin=0,ymax=1))
ggplot(data=full_win, aes(x=centro_dist, y=Het., group=Name, col=Family)) + stat_smooth(se=F) +
facet_grid(~Chr) + guides(col=FALSE) + geom_rect(data=centro, aes(xmin=start,xmax=end,ymin=0,ymax=1),inherit.aes = F)
ggplot(data=full_win, aes(x=centro_dist, y=Het., group=Name, col=Family)) + stat_smooth(se=F) +
facet_grid(~Chr) + guides(col=FALSE)
ggplot(data=full_win, aes(x=centro_dist, y=Het., group=Name, col=Family)) + stat_smooth(se=F,alpha=0.2) +
facet_grid(~Chr) + guides(col=FALSE)
ggplot(data=full_win, aes(x=centro_dist, y=Het., group=Name, col=Family), alpha=0.12) + stat_smooth(se=F) +
facet_grid(~Chr) + guides(col=FALSE)
ggplot(data=full_win, aes(x=centro_dist, y=Het., group=Name, col=Name), alpha=0.12) + stat_smooth(se=F) +
facet_grid(Family~Chr) + guides(col=FALSE)
ggplot(data=full_win, aes(x=centro_dist, y=Het., group=Name, col=alpha(Family,0.12))) + stat_smooth(se=F) +
facet_grid(~Chr) + guides(col=FALSE)
ggplot(data=full_win, aes(x=centro_dist, y=Het., group=Name, col=alpha(as.factor(Family),0.12))) + stat_smooth(se=F) +
facet_grid(~Chr) + guides(col=FALSE)
full_win$Family <- as.factor(full_win$Family)
ggplot(data=full_win, aes(x=centro_dist, y=Het., group=Name, col=alpha(Family,0.12))) + stat_smooth(se=F) +
facet_grid(~Chr) + guides(col=FALSE)
full_win$Family <- factor(full_win$Family)
ggplot(data=full_win, aes(x=centro_dist, y=Het., group=Name, col=alpha(Family,0.12))) + stat_smooth(se=F) +
facet_grid(~Chr) + guides(col=FALSE)
ggplot(data=full_win, aes(x=centro_dist, y=Het., group=Name, col=Family)) + stat_smooth(alpha=0.1, se=F) +
facet_grid(~Chr) + guides(col=FALSE)
ggplot(data=full_win, aes(x=centro_dist, y=Het., group=Name, col=Family)) + geom_line(stat='smooth', method='loess',alpha=0.1, se=F) +
facet_grid(~Chr) + guides(col=FALSE)
ggplot(data=full_win, aes(x=centro_dist, y=Het., group=Name, col=Family)) + geom_line(stat='smooth', method='loess',alpha=0.3, se=F) +
facet_grid(~Chr) + guides(col=FALSE)
genofull= data.frame()
for(size in c(100000,3000000)){
for ( chrom in unique(gen$Chr)){
chr_start <- centro$pos[centro$Chr==chrom] - size
chr_end <- centro$pos[centro$Chr==chrom] + size
cen_chr <- gen %>%
filter(Chr == chrom & BP > chr_start & BP < chr_end) %>%
select(indv$Name[indv$Generation=='F4'])
chr_prop <- cen_chr %>%
summarise_all(function(x){sum(x=='E')/sum(x %in% c('E','O'))})
chr_loci <- cen_chr %>%
summarise_all(function(x){sum(x %in% c('E','O'))})
cen_chr <- data.frame(t(rbind(chr_prop, chr_loci)))
colnames(cen_chr) <- c("Het.", "Num.Loci")
cen_chr <- cen_chr %>%
tibble::rownames_to_column(var = "Name")%>%
merge(indv, by="Name")
cen_chr <- cen_chr %>%
mutate(centrosize=size, Chr=chrom)
genofull <- rbind(genofull, cen_chr)
}
print(size)
}
plot(genofull$Num.Loci, genofull$Het.)
smoothScatter(genofull$Num.Loci, genofull$Het.)
famorder <- cen_chr %>%
group_by(Family) %>%
summarise(avg=mean(Het.))
cen_chr$Family <- factor(cen_chr$Family, ordered = T, levels = famorder$Family[order(famorder$avg)])
ggplot(data=cen_chr, aes(x=Het., y=Family)) + geom_joy()
genofull <- genofull %>%
group_by(Chr, Family) %>%
mutate(norm_het=(Het.-mean(Het., na.rm=T))/sd(Het., na.rm=T))
ggplot(data=genofull, aes(x=centrosize, y=Het., col=Family, group=Name, weight=Num.Loci)) + geom_line() +
facet_grid(.~Chr)+ guides(col=FALSE)
