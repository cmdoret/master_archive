sum_stat <- merged[is.na(merged$EXTRACOL),]
sum_stat$EXTRACOL <- NULL
male_stat <- sum_stat[sum_stat$Pop.ID=="M",c('Chr','BP','Obs.Hom', 'fam', 'N',"Locus.ID")]
female_stat <- sum_stat[sum_stat$Pop.ID=="F",c('Chr','BP','Obs.Het', 'fam', 'N')]
CSD_like <- merge(male_stat,female_stat,by=c('Chr','BP','fam'))
CSD_like$CSD <- (CSD_like$Obs.Hom+CSD_like$Obs.Het)/2
CSD_like <- rename(CSD_like, Nm=N.x,Nf=N.y, Male.Hom=Obs.Hom, Fem.Het=Obs.Het)
CSD_like <- CSD_like %>% arrange(Chr, BP)
chrom <- CSD_like[grep("chr.*", CSD_like$Chr),]
chrom$pos = paste(chrom$Chr,chrom$BP, sep="_")
chrom$Chr=droplevels(chrom$Chr)
genomic_pos <- function(snp){
# Computing total basepair position in genome as start(chrom)+bp
gen_pos <- as.numeric(snp["BP"]) + chrom_sizes[chrom_sizes$chr==snp["Chr"],"start"]
return(gen_pos)
}
chrom$tot_BP <-apply(X = chrom,MARGIN = 1, FUN=genomic_pos)
compact_chrom <- chrom %>%
group_by(Locus.ID) %>%
summarise(avg=mean(CSD), BP=mean(tot_BP)) %>%
arrange(BP)
plot(compact_chrom$BP, compact_chrom$avg, type="l", ylab='prop. CSD', xlab="genomic position",
main="Proportion of CSD individuals, averaged across families")
abline(v=chrom_sizes$start, lty=2,col="blue")
text(x = chrom_sizes$mid,y=0.2,labels = chrom_sizes$chrom)
highCSD <- chrom %>%
group_by(fam) %>%
filter(CSD==max(CSD))
top_CSD <- chrom[chrom$CSD>=0.8,]
hist(top_CSD$tot_BP,breaks=100, main="Top CSD candidates", xlab="Genomic position", ylab="N hits >= 0.8", col="grey")
abline(v=chrom_sizes$start, lty=2,col="blue")
text(x = chrom_sizes$mid,y=17,labels = chrom_sizes$chrom)
ggplot(data=chrom, aes(x=tot_BP, y=CSD))+ geom_line() +
facet_wrap(~fam,drop = F) + #geom_text(data=highCSD,aes(label=pos, y=CSD), size=1.9)+
geom_vline(data=chrom_sizes, aes(xintercept=start), col="blue", lty=2) +
ylab("Prop.CSD")
ggplot(data=chrom, aes(x=tot_BP, y=CSD, col=fam))+ geom_line() +
#geom_text(data=highCSD,aes(label=pos, y=CSD), size=1.9)+
geom_vline(data=chrom_sizes, aes(xintercept=start), col="blue", lty=2) +
ylab("Prop.CSD")
View(sum_stat)
View(rec_hom)
ggplot(data=chrom, aes(x=tot_BP, y=CSD, col=fam))+ geom_line() +
#geom_text(data=highCSD,aes(label=pos, y=CSD), size=1.9)+
geom_vline(data=chrom_sizes, aes(xintercept=start), col="blue", lty=2) +
ylab("Prop.CSD")
library(dplyr)
library(readr)
library(ggplot2)
# Summarizing chromosome sizes
scaffolds <- read.table("../../data/ref_genome/ordered_genome/merged.fasta.ann", stringsAsFactors = F)
chrom_sizes <- data.frame(); chrom_names=c()
for(row in seq(1,nrow(scaffolds))){
if(length(grep('chr',scaffolds[row,2]))){
chrom_names <- append(chrom_names,as.character(scaffolds[row,2]))
chrom_sizes <- rbind(chrom_sizes, scaffolds[row+1,c(1,2)])
}
}
chrom_sizes <- cbind(chrom_names, chrom_sizes)
rownames(chrom_sizes) <- NULL
colnames(chrom_sizes) <- c("chrom","start","length")
chrom_sizes$length <- as.numeric(chrom_sizes$length)
chrom_sizes$mid <- chrom_sizes$start + (chrom_sizes$length/2)  # Middle position in chrom. used for plotting
hom_filt <- function(fam){
# Function for filtering loci homozygous in mother of given family
mother <- as.character(indv$Name[indv$Family==fam & indv$Generation=='F3'])
# Using mother's genotype from snps file
snp_gz <- gzfile(paste0('../../data/sstacks/',fam,'/',mother,'.snps.tsv.gz'),"rt")
# Uncompresing file (lengthy process)
snp_mother <- read.table(snp_gz); close(snp_gz)
# keeping all loci where all SNPs are hom
hom_loc <- snp_mother %>% group_by(V3) %>% filter(all(V5=='O'))
# Find loci which have only homozygous positions in pstacks snps file
hom_ID_local <- unique(hom_loc$V3)
match_gz <- gzfile(paste0('../../data/sstacks/',fam,'/',mother,'.matches.tsv.gz'),"rt")
# uncompressing...
match_mother <- read.table(match_gz); close(match_gz)
hom_ID_global <- unique(match_mother$V3[match_mother$V4 %in% hom_ID_local])
# Finding catalog locus IDs matching sample locus IDs using sstacks matches file
return(hom_ID_global)
}
`%not in%` <- function (x, table) is.na(match(x, table, nomatch=NA_integer_))
# Customized operator for convenience
# Genome statistics
stat_path <- '../../data/populations/d-20_r-80/'
indv <- read.table('../../data/individuals', header=T)
# phi_path <- commandArgs(TrailingOnly=T)[1]
rec_hom <- data.frame()
sum_stat <- data.frame()
for(fam in list.dirs(stat_path)[2:length(list.dirs(stat_path))]){  # Excluding first dir (parent)
tmp_stat <- read.csv(paste0(fam,'/batch_0.sumstats.tsv'),header=T,skip=2,sep='\t')
tmp_stat$fam <- rep(basename(fam))
try(mother_hom <- hom_filt(basename(fam)))
rec_hom <- rbind(rec_hom, tmp_stat[tmp_stat$Locus.ID %in% mother_hom,c("Chr","BP","fam")])
tmp_stat <- tmp_stat[tmp_stat$Locus.ID %not in% mother_hom,]
sum_stat <- rbind(sum_stat, tmp_stat)
mother_hom <- NULL
}
}
warnings()
View(tmp_stat)
library(dplyr)
library(readr)
library(ggplot2)
# Summarizing chromosome sizes
scaffolds <- read.table("../../data/ref_genome/ordered_genome/merged.fasta.ann", stringsAsFactors = F)
chrom_sizes <- data.frame(); chrom_names=c()
for(row in seq(1,nrow(scaffolds))){
if(length(grep('chr',scaffolds[row,2]))){
chrom_names <- append(chrom_names,as.character(scaffolds[row,2]))
chrom_sizes <- rbind(chrom_sizes, scaffolds[row+1,c(1,2)])
}
}
chrom_sizes <- cbind(chrom_names, chrom_sizes)
rownames(chrom_sizes) <- NULL
colnames(chrom_sizes) <- c("chrom","start","length")
chrom_sizes$length <- as.numeric(chrom_sizes$length)
chrom_sizes$mid <- chrom_sizes$start + (chrom_sizes$length/2)  # Middle position in chrom. used for plotting
hom_filt <- function(fam){
# Function for filtering loci homozygous in mother of given family
mother <- as.character(indv$Name[indv$Family==fam & indv$Generation=='F3'])
# Using mother's genotype from snps file
snp_gz <- gzfile(paste0('../../data/sstacks/',fam,'/',mother,'.snps.tsv.gz'),"rt")
# Uncompresing file (lengthy process)
snp_mother <- read.table(snp_gz); close(snp_gz)
# keeping all loci where all SNPs are hom
hom_loc <- snp_mother %>% group_by(V3) %>% filter(all(V5=='O'))
# Find loci which have only homozygous positions in pstacks snps file
hom_ID_local <- unique(hom_loc$V3)
match_gz <- gzfile(paste0('../../data/sstacks/',fam,'/',mother,'.matches.tsv.gz'),"rt")
# uncompressing...
match_mother <- read.table(match_gz); close(match_gz)
hom_ID_global <- unique(match_mother$V3[match_mother$V4 %in% hom_ID_local])
# Finding catalog locus IDs matching sample locus IDs using sstacks matches file
return(hom_ID_global)
}
`%not in%` <- function (x, table) is.na(match(x, table, nomatch=NA_integer_))
# Customized operator for convenience
# Genome statistics
stat_path <- '../../data/populations/d-20_r-80/'
indv <- read.table('../../data/individuals', header=T)
# phi_path <- commandArgs(TrailingOnly=T)[1]
if(FALSE){
rec_hom <- data.frame()
sum_stat <- data.frame()
for(fam in list.dirs(stat_path)[2:length(list.dirs(stat_path))]){  # Excluding first dir (parent)
tmp_stat <- read.csv(paste0(fam,'/batch_0.sumstats.tsv'),header=T,skip=2,sep='\t')
tmp_stat$fam <- rep(basename(fam))
try(mother_hom <- hom_filt(basename(fam)))
rec_hom <- rbind(rec_hom, tmp_stat[tmp_stat$Locus.ID %in% mother_hom,c("Chr","BP","fam")])
tmp_stat <- tmp_stat[tmp_stat$Locus.ID %not in% mother_hom,]
sum_stat <- rbind(sum_stat, tmp_stat)
mother_hom <- NULL
}
}
rec_hom <- read.csv("../../data/SNP_lists/fixed_hom_mother.txt",header=T)
sum_stat <- data.frame()
for(fam in list.dirs(stat_path)[2:length(list.dirs(stat_path))]){  # Excluding first dir (parent)
tmp_stat <- read.csv(paste0(fam,'/batch_0.sumstats.tsv'),header=T,skip=2,sep='\t')
tmp_stat$fam <- rep(basename(fam))
sum_stat <- rbind(sum_stat, tmp_stat)
mother_hom <- NULL
}
rec_hom$EXTRACOL <- 1 # use a column name that is not present among
# the original data.frame columns
merged <- merge(sum_stat,rec_hom,all=TRUE, by.x=c("Chr","BP","fam"), by.y=c("contig","bp","family"))
sum_stat <- merged[is.na(merged$EXTRACOL),]
sum_stat$EXTRACOL <- NULL
View(sum_stat)
library(dplyr)
library(readr)
library(ggplot2)
# Summarizing chromosome sizes
scaffolds <- read.table("../../data/ref_genome/ordered_genome/merged.fasta.ann", stringsAsFactors = F)
chrom_sizes <- data.frame(); chrom_names=c()
for(row in seq(1,nrow(scaffolds))){
if(length(grep('chr',scaffolds[row,2]))){
chrom_names <- append(chrom_names,as.character(scaffolds[row,2]))
chrom_sizes <- rbind(chrom_sizes, scaffolds[row+1,c(1,2)])
}
}
chrom_sizes <- cbind(chrom_names, chrom_sizes)
rownames(chrom_sizes) <- NULL
colnames(chrom_sizes) <- c("chrom","start","length")
chrom_sizes$length <- as.numeric(chrom_sizes$length)
chrom_sizes$mid <- chrom_sizes$start + (chrom_sizes$length/2)  # Middle position in chrom. used for plotting
stat_path <- '../../data/populations/d-20_r-80/'
indv <- read.table('../../data/individuals', header=T)
rec_hom <- read.csv("../../data/SNP_lists/fixed_hom_mother.txt",header=T)
for(fam in list.dirs(stat_path)[2:length(list.dirs(stat_path))]){  # Excluding first dir (parent)
tmp_stat <- read.csv(paste0(fam,'/batch_0.sumstats.tsv'),header=T,skip=2,sep='\t')
tmp_stat$fam <- rep(basename(fam))
sum_stat <- rbind(sum_stat, tmp_stat)
mother_hom <- NULL
}
rec_hom <- read.csv("../../data/SNP_lists/fixed_hom_mother.txt",header=T)
sum_stat <- data.frame()
for(fam in list.dirs(stat_path)[2:length(list.dirs(stat_path))]){  # Excluding first dir (parent)
tmp_stat <- read.csv(paste0(fam,'/batch_0.sumstats.tsv'),header=T,skip=2,sep='\t')
tmp_stat$fam <- rep(basename(fam))
sum_stat <- rbind(sum_stat, tmp_stat)
mother_hom <- NULL
}
sum_stat[-(sum_stat$Pop.ID=='M' & sum_stat$Q.Nuc=='-')]
sum_stat[-(sum_stat$Pop.ID=='M' & sum_stat$Q.Nuc=='-'),]
sum_stat[-(sum_stat$Pop.ID=='F' & sum_stat$Q.Nuc=='-'),]
sum_stat %>%
group_by(paste0(fam,Locus.ID)) %>%
summarise(sum(Pop.ID=='F' & Q.Nuc=='-'))
View(sum_stat)
sum_stat %>%
group_by(paste0(fam,Locus.ID,Col)) %>%
summarise(sum(Pop.ID=='F' & Q.Nuc=='-'))
sum_stat %>%
group_by(paste0(fam,Locus.ID,Col)) %>%
filter(summarise(hom_mot = sum(Pop.ID=='F' & Q.Nuc=='-')[,'hom_mot']>0)
)
sum_stat %>%
group_by(paste0(fam,Locus.ID,Col))
sum_stat %>%
group_by(fam,Locus.ID,Col) %>%
filter(summarise(hom_mot = sum(Pop.ID=='F' & Q.Nuc=='-')[,'hom_mot']>0))
sum_stat %>%
group_by(fam,Locus.ID,Col)
sum_stat %>%
group_by(fam,Locus.ID,Col) %>%
summarise(hom_mot = sum(Pop.ID=='F' & Q.Nuc=='-'))
View(sum_stat)
rm_snps<- sum_stat %>%
group_by(fam,Locus.ID,Col) %>%  # Each group contains one SNP (both male and female pop)
summarise(hom_mot = sum(Pop.ID=='F' & Q.Nuc=='-'))  # If all females are homozygous -> mother is homozygous
rm_snps
View(rm_snps)
rm_snps <- rm_snps[rm_snps$hom_mot>0,]
rm_snps
rm_snps <- rm_snps[rm_snps$hom_mot>0,1:3]
rm_snps
merge(sum_stat,rm_snps,by=c("Locus.ID","Col","fam"))
sum_stat <- merge(sum_stat,rm_snps,by=c("Locus.ID","Col","fam"))
male_stat <- sum_stat[sum_stat$Pop.ID=="M",c('Chr','BP','Obs.Hom', 'fam', 'N',"Locus.ID")]
female_stat <- sum_stat[sum_stat$Pop.ID=="F",c('Chr','BP','Obs.Het', 'fam', 'N')]
CSD_like <- merge(male_stat,female_stat,by=c('Chr','BP','fam'))
#CSD_like$CSD <- (CSD_like$Obs.Hom+CSD_like$Obs.Het)*(CSD_like$N.x+CSD_like$N.y)/2
CSD_like$CSD <- (CSD_like$Obs.Hom+CSD_like$Obs.Het)/2
CSD_like <- rename(CSD_like, Nm=N.x,Nf=N.y, Male.Hom=Obs.Hom, Fem.Het=Obs.Het)
#CSD_like <- CSD_like[CSD_like$Nf>1 & CSD_like$Nm>1,]
CSD_like <- CSD_like %>% arrange(Chr, BP)
chrom <- CSD_like[grep("chr.*", CSD_like$Chr),]
chrom$pos = paste(chrom$Chr,chrom$BP, sep="_")
chrom$Chr=droplevels(chrom$Chr)
# Finding genomic position of SNPs
genomic_pos <- function(snp){
# Computing total basepair position in genome as start(chrom)+bp
gen_pos <- as.numeric(snp["BP"]) + chrom_sizes[chrom_sizes$chr==snp["Chr"],"start"]
return(gen_pos)
}
chrom$tot_BP <-apply(X = chrom,MARGIN = 1, FUN=genomic_pos)
compact_chrom <- chrom %>%
group_by(Locus.ID) %>%
summarise(avg=mean(CSD), BP=mean(tot_BP)) %>%
arrange(BP)
plot(compact_chrom$BP, compact_chrom$avg, type="l", ylab='prop. CSD', xlab="genomic position",
main="Proportion of CSD individuals, averaged across families")
abline(v=chrom_sizes$start, lty=2,col="blue")
text(x = chrom_sizes$mid,y=0.2,labels = chrom_sizes$chrom)
highCSD <- chrom %>%
group_by(fam) %>%
filter(CSD==max(CSD))
top_CSD <- chrom[chrom$CSD>=0.8,]
hist(top_CSD$tot_BP,breaks=100, main="Top CSD candidates", xlab="Genomic position", ylab="N hits >= 0.8", col="grey")
abline(v=chrom_sizes$start, lty=2,col="blue")
text(x = chrom_sizes$mid,y=17,labels = chrom_sizes$chrom)
ggplot(data=chrom, aes(x=tot_BP, y=CSD))+ geom_line() +
facet_wrap(~fam,drop = F) + #geom_text(data=highCSD,aes(label=pos, y=CSD), size=1.9)+
geom_vline(data=chrom_sizes, aes(xintercept=start), col="blue", lty=2) +
ylab("Prop.CSD")
View(CSD_like)
rec_hom <- read.csv("../../data/SNP_lists/fixed_hom_mother.txt",header=T)
sum_stat <- data.frame()
for(fam in list.dirs(stat_path)[2:length(list.dirs(stat_path))]){  # Excluding first dir (parent)
tmp_stat <- read.csv(paste0(fam,'/batch_0.sumstats.tsv'),header=T,skip=2,sep='\t')
tmp_stat$fam <- rep(basename(fam))
sum_stat <- rbind(sum_stat, tmp_stat)
mother_hom <- NULL
}
rm_snps<- sum_stat %>%
group_by(fam,Locus.ID,Col) %>%  # Each group contains one SNP (both male and female pop)
summarise(hom_mot = sum(Pop.ID=='F' & Q.Nuc=='-'))  # If all females are homozygous -> mother is homozygous
rm_snps <- rm_snps[rm_snps$hom_mot==0, 1:3]
sum_stat <- merge(sum_stat,rm_snps,by=c("Locus.ID","Col","fam"))
male_stat <- sum_stat[sum_stat$Pop.ID=="M",c('Chr','BP','Obs.Hom', 'fam', 'N',"Locus.ID")]
female_stat <- sum_stat[sum_stat$Pop.ID=="F",c('Chr','BP','Obs.Het', 'fam', 'N')]
CSD_like <- merge(male_stat,female_stat,by=c('Chr','BP','fam'))
CSD_like$CSD <- (CSD_like$Obs.Hom+CSD_like$Obs.Het)/2
CSD_like <- rename(CSD_like, Nm=N.x,Nf=N.y, Male.Hom=Obs.Hom, Fem.Het=Obs.Het)
CSD_like <- CSD_like %>% arrange(Chr, BP)
chrom <- CSD_like[grep("chr.*", CSD_like$Chr),]
chrom$pos = paste(chrom$Chr,chrom$BP, sep="_")
chrom$Chr=droplevels(chrom$Chr)
genomic_pos <- function(snp){
# Computing total basepair position in genome as start(chrom)+bp
gen_pos <- as.numeric(snp["BP"]) + chrom_sizes[chrom_sizes$chr==snp["Chr"],"start"]
return(gen_pos)
}
chrom$tot_BP <-apply(X = chrom,MARGIN = 1, FUN=genomic_pos)
compact_chrom <- chrom %>%
group_by(Locus.ID) %>%
summarise(avg=mean(CSD), BP=mean(tot_BP)) %>%
arrange(BP)
plot(compact_chrom$BP, compact_chrom$avg, type="l", ylab='prop. CSD', xlab="genomic position",
main="Proportion of CSD individuals, averaged across families")
abline(v=chrom_sizes$start, lty=2,col="blue")
text(x = chrom_sizes$mid,y=0.2,labels = chrom_sizes$chrom)
highCSD <- chrom %>%
group_by(fam) %>%
filter(CSD==max(CSD))
top_CSD <- chrom[chrom$CSD>=0.8,]
hist(top_CSD$tot_BP,breaks=100, main="Top CSD candidates", xlab="Genomic position", ylab="N hits >= 0.8", col="grey")
abline(v=chrom_sizes$start, lty=2,col="blue")
text(x = chrom_sizes$mid,y=17,labels = chrom_sizes$chrom)
ggplot(data=chrom, aes(x=tot_BP, y=CSD))+ geom_line() +
facet_wrap(~fam,drop = F) + #geom_text(data=highCSD,aes(label=pos, y=CSD), size=1.9)+
geom_vline(data=chrom_sizes, aes(xintercept=start), col="blue", lty=2) +
ylab("Prop.CSD")
ggplot(data=chrom, aes(x=tot_BP, y=CSD, col=fam))+ geom_line() +
#geom_text(data=highCSD,aes(label=pos, y=CSD), size=1.9)+
geom_vline(data=chrom_sizes, aes(xintercept=start), col="blue", lty=2) +
ylab("Prop.CSD")
View(chrom)
head(chrom)
chrom %>%
group_by(fam) %>%
n()
chrom %>%
group_by(fam) %>%
n(.)
chrom %>%
group_by(fam) %>%
n
chrom %>%
group_by(fam) %>%
nrow
chrom %>%
group_by(fam) %>%
nrow()
chrom %>%
group_by(fam) %>%
mutate(rr=nrow())
table(chrom$fam)
data.frame(table(chrom$fam))
ggplot(data=chrom, aes(x=tot_BP, y=CSD, col=fam))+ geom_line() +
#geom_text(data=highCSD,aes(label=pos, y=CSD), size=1.9)+
geom_vline(data=chrom_sizes, aes(xintercept=start), col="blue", lty=2) +
ylab("Prop.CSD")
indv <- read.table("../../data/ploidy/thresholds/fixed")
diplo <- fixed[fixed$Generation=="F4" & fixed$Ploidy=='D',]
diplo <- indv[indv$Generation=="F4" & indv$Ploidy=='D',]
off_comp <- data.frame(table(diplo$Family, diplo$Sex))
colnames(off_comp) <- c("Family", "Sex", "Count")
off_comp
indv <- read.table("../../data/ploidy/thresholds/fixed")
indv <- read.table("../../data/ploidy/thresholds/fixed", header=T)
diplo <- indv[indv$Generation=="F4" & indv$Ploidy=='D',]
off_comp <- data.frame(table(diplo$Family, diplo$Sex))
off_comp
colnames(off_comp) <- c("Family", "Sex", "Count")
off_comp <- off_comp %>%
group_by(Family) %>%
mutate(prop_males=round(Count[Sex=='M']/sum(Count),3)) %>%
filter(Sex=='M') %>%
select(-Sex)
library(dplyr)
off_comp <- off_comp %>%
group_by(Family) %>%
mutate(prop_males=round(Count[Sex=='M']/sum(Count),3)) %>%
filter(Sex=='M') %>%
select(-Sex)
off_comp
hist(off_comp$prop_males,breaks=20, main="Male proportion in each family", xlab="Proportion of males", ylab="Number of families")
print(off_comp)
hist(off_comp$prop_males,breaks=30, main="Male proportion in each family", xlab="Proportion of males", ylab="Number of families")
View(off_comp)
hist(off_comp$prop_males,breaks=10, main="Male proportion in each family", xlab="Proportion of males", ylab="Number of families")
scaffolds <- read.table("../../data/ref_genome/ordered_genome/merged.fasta.ann", stringsAsFactors = F)
phi_path <- '../../data/populations/d-20_r-80/'
# phi_path <- '../../data/populations/haplo_d-20_r-80/'
# phi_path <- commandArgs(TrailingOnly=T)[1]
phi_stat <- data.frame()
for(fam in list.dirs(phi_path)[2:length(list.dirs(phi_path))]){  # Excluding first dir (parent)
tmp_phi <- read.csv(paste0(fam,'/batch_0.phistats_F-M.tsv'),header=T,skip=2,sep='\t')
tmp_phi$fam <- rep(basename(fam))
phi_stat <- rbind(phi_stat, tmp_phi)
}
View(phi_stat)
sum_stat <- data.frame()
for(fam in list.dirs(stat_path)[2:length(list.dirs(stat_path))]){  # Excluding first dir (parent)
tmp_stat <- read.csv(paste0(fam,'/batch_0.sumstats.tsv'),header=T,skip=2,sep='\t')
tmp_stat$fam <- rep(basename(fam))
sum_stat <- rbind(sum_stat, tmp_stat)
mother_hom <- NULL
}
stat_path <- '../../data/populations/d-20_r-80/'
indv <- read.table('../../data/individuals', header=T)
sum_stat <- data.frame()
for(fam in list.dirs(stat_path)[2:length(list.dirs(stat_path))]){  # Excluding first dir (parent)
tmp_stat <- read.csv(paste0(fam,'/batch_0.sumstats.tsv'),header=T,skip=2,sep='\t')
tmp_stat$fam <- rep(basename(fam))
sum_stat <- rbind(sum_stat, tmp_stat)
mother_hom <- NULL
}
rm_snps<- sum_stat %>%
group_by(fam,Locus.ID,Col) %>%  # Each group contains one SNP (both male and female pop)
summarise(hom_mot = sum(Pop.ID=='F' & Q.Nuc=='-'))  # If all females are homozygous -> mother is homozygous
rm_snps <- rm_snps[rm_snps$hom_mot==0, 1:3]
rm_snps<- sum_stat %>%
group_by(fam,Locus.ID,Col) %>%  # Each group contains one SNP (both male and female pop)
summarise(hom_mot = sum(Pop.ID=='F' & Q.Nuc=='-'))  # If all females are homozygous -> mother is homozygous
library(ggplot2); library(dplyr)
stat_path <- '../../data/populations/d-20_r-80/'
indv <- read.table('../../data/individuals', header=T)
sum_stat <- data.frame()
for(fam in list.dirs(stat_path)[2:length(list.dirs(stat_path))]){  # Excluding first dir (parent)
tmp_stat <- read.csv(paste0(fam,'/batch_0.sumstats.tsv'),header=T,skip=2,sep='\t')
tmp_stat$fam <- rep(basename(fam))
sum_stat <- rbind(sum_stat, tmp_stat)
mother_hom <- NULL
}
rm_snps<- sum_stat %>%
group_by(fam,Locus.ID,Col) %>%  # Each group contains one SNP (both male and female pop)
summarise(hom_mot = sum(Pop.ID=='F' & Q.Nuc=='-'))  # If all females are homozygous -> mother is homozygous
rm_snps <- rm_snps[rm_snps$hom_mot==0, 1:3]
sum_stat <- merge(sum_stat,rm_snps,by=c("Locus.ID","Col","fam"))
sum_stat
View(rm_snps)
View(sum_stat)
head(sum_stat)
sum_stat$N[sum_stat$Pop.ID=='F']
# Genome statistics
stat_path <- '../../data/populations/d-20_r-80/'
indv <- read.table('../../data/individuals', header=T)
# phi_path <- commandArgs(TrailingOnly=T)[1]
# removing SNPs homozygous in all females (consequently in mothers)
sum_stat <- data.frame()
for(fam in list.dirs(stat_path)[2:length(list.dirs(stat_path))]){  # Excluding first dir (parent)
tmp_stat <- read.csv(paste0(fam,'/batch_0.sumstats.tsv'),header=T,skip=2,sep='\t')
tmp_stat$fam <- rep(basename(fam))
sum_stat <- rbind(sum_stat, tmp_stat)
mother_hom <- NULL
}
rm_snps<- sum_stat %>%
group_by(fam,Locus.ID,Col) %>%  # Each group contains one SNP (both male and female pop)
summarise(hom_mot = sum(Pop.ID=='F' & Q.Nuc=='-'))  # If all females are homozygous -> mother is homozygous
rm_snps <- rm_snps[rm_snps$hom_mot==0, 1:3]
sum_stat <- merge(sum_stat,rm_snps,by=c("Locus.ID","Col","fam"))
sum_stat$N[sum_stat$Pop.ID=='F'] <- sum_stat$N[sum_stat$Pop.ID=='F']
sum_stat$weight <- 0
View(sum_stat)
sum_stat$weight <- sum_stat$N * sum_stat$Obs.Hom
View(sum_stat)
View(indv)
View(sum_stat)
sum_stat$weight <- round(sum_stat$N * sum_stat$Obs.Hom,1)
View(sum_stat)
# Genome statistics
stat_path <- '../../data/populations/d-20_r-80/'
indv <- read.table('../../data/individuals', header=T)
# phi_path <- commandArgs(TrailingOnly=T)[1]
# removing SNPs homozygous in all females (consequently in mothers)
sum_stat <- data.frame()
for(fam in list.dirs(stat_path)[2:length(list.dirs(stat_path))]){  # Excluding first dir (parent)
tmp_stat <- read.csv(paste0(fam,'/batch_0.sumstats.tsv'),header=T,skip=2,sep='\t')
tmp_stat$fam <- rep(basename(fam))
sum_stat <- rbind(sum_stat, tmp_stat)
mother_hom <- NULL
}
rm_snps<- sum_stat %>%
group_by(fam,Locus.ID,Col) %>%  # Each group contains one SNP (both male and female pop)
summarise(hom_mot = sum(Pop.ID=='F' & Q.Nuc=='-'))  # If all females are homozygous -> mother is homozygous
rm_snps <- rm_snps[rm_snps$hom_mot==0, 1:3]
sum_stat <- merge(sum_stat,rm_snps,by=c("Locus.ID","Col","fam"))
male_stat <- sum_stat[sum_stat$Pop.ID=="M",c('Chr','BP','Obs.Hom', 'fam', 'N',"Locus.ID")]
female_stat <- sum_stat[sum_stat$Pop.ID=="F",c('Chr','BP','Obs.Hom', 'fam', 'N')]
chrom_stat <- merge(male_stat,female_stat,by=c('Chr','BP','fam'))
View(chrom_stat)
(chrom_stat$Obs.Hom.x * N.x + chrom_stat$Obs.Hom.y * chrom_stat$N.y)
(chrom_stat$Obs.Hom.x * chrom_stat$N.x + chrom_stat$Obs.Hom.y * chrom_stat$N.y)/2
attach(chrom_stat)
hom
Obs.Hom.x
chrom_stat$hom <- (Obs.Hom.x * N.x + Obs.Hom.y * N.y)/(N.x + N.y)
chrom_stat$hom
chrom_stat <- rename(chrom_stat, Nm=N.x,Nf=N.y, Male.Hom=Obs.Hom.x, Fem.Hom=Obs.Hom.y)
chrom_stat$weight <- Nf + Nm
chrom_stat <- rename(chrom_stat, Nm=N.x,Nf=N.y, Male.Hom=Obs.Hom.x, Fem.Hom=Obs.Hom.y)
chrom_stat$weight <- Nf + Nm
chrom_stat$weight <- chrom_stat$Nf + chrom_stat$Nm
ggplot(chrom_stat, aes(x=BP, y=hom)) + facet_grid(~Chr) + geom_point()
chrom_stat <- chrom_stat[grep("chr.*", chrom_stat$Chr),]
ggplot(chrom_stat, aes(x=BP, y=hom)) + facet_grid(~Chr) + geom_point()
ggplot(chrom_stat, aes(x=BP, y=hom)) + facet_grid(~Chr) + geom_point() + geom_smooth(method = 'lm')
ggplot(chrom_stat, aes(x=BP, y=hom)) + facet_grid(~Chr, scales='free_x') + geom_point() + geom_smooth(method = 'lm')
ggplot(chrom_stat, aes(x=BP, y=hom)) + facet_grid(~Chr, scales='free_x') + geom_point() + geom_smooth(method = 'glm')
ggplot(chrom_stat, aes(x=BP, y=hom)) + facet_grid(~Chr, scales='free_x') + geom_point() + geom_smooth(method = 'gam')
ggplot(chrom_stat, aes(x=BP, y=hom)) + facet_grid(fam~Chr, scales='free_x') + geom_point() + geom_smooth(method = 'gam')
ggplot(chrom_stat, aes(x=BP, y=hom, fill=fam)) + facet_grid(~Chr, scales='free_x') + geom_point() + geom_smooth(method = 'gam')
ggplot(chrom_stat, aes(x=BP, y=hom, fill=fam)) + facet_grid(~Chr, scales='free_x') + geom_smooth(method = 'gam')
ggplot(chrom_stat, aes(x=BP, y=hom, col=fam)) + facet_grid(~Chr, scales='free_x') + geom_smooth(method = 'gam')
ggplot(chrom_stat, aes(x=BP, y=hom)) + facet_grid(~Chr, scales='free_x') + geom_smooth(method = 'gam')
ggplot(chrom_stat, aes(x=BP, y=hom)) + facet_grid(~Chr, scales='free_x') + geom_smooth(method = 'glm')
ggplot(chrom_stat, aes(x=BP, y=hom)) + facet_grid(~Chr, scales='free_x') + geom_smooth(method = 'lm')
ggplot(chrom_stat, aes(x=BP, y=hom)) + facet_grid(Chr~., scales='free_x') + geom_smooth(method = 'lm')
ggplot(chrom_stat, aes(x=BP, y=hom)) + facet_grid(~Chr, scales='free_x') + geom_smooth(method = 'lm')
