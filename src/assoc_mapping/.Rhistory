facet_grid(CHROM~., scales = 'free_x') + geom_point(size=0.3) +
geom_line(alpha=0.4) + theme_bw() + ggtitle("Coverage across genome, 1kb windows") +
xlab("Genomic position of SNP") + ylab("Mean coverage")
depth$POS <- round(depth$POS, digits=-4)
depth <- depth %>%
group_by(CHROM, POS, Family) %>%
mutate(avg=mean(MEAN_DEPTH)) %>%
select(-MEAN_DEPTH) %>%
rename(MEAN_DEPTH=avg)
depth <- subset(depth, !duplicated(subset(
depth, select=c(CHROM, POS, Family))))
sp_depth <- spread(depth,Family,MEAN_DEPTH)
sp_depth <- sp_depth[rowSums(!is.na(sp_depth[,3:14]))>0,]
ggplot(data=depth,aes(x=POS,y=MEAN_DEPTH,col=Family)) +
facet_grid(CHROM~., scales = 'free_x') + geom_point(size=0.3) +
geom_line(alpha=0.4) + theme_bw() + ggtitle("Coverage across genome, 1kb windows") +
xlab("Genomic position of SNP") + ylab("Mean coverage")
depth <- read.table("../../data/coverage/site_depth.txt", header=T)  # Loading data
depth <- depth[grep("chr*",depth$CHROM),]
depth$CHROM <- droplevels(depth$CHROM)
depth$POS <- round(depth$POS, digits=-5)
depth <- depth %>%
group_by(CHROM, POS, Family) %>%
mutate(avg=mean(MEAN_DEPTH)) %>%
select(-MEAN_DEPTH) %>%
rename(MEAN_DEPTH=avg)
depth <- subset(depth, !duplicated(subset(
depth, select=c(CHROM, POS, Family))))
sp_depth <- spread(depth,Family,MEAN_DEPTH)
sp_depth <- sp_depth[rowSums(!is.na(sp_depth[,3:14]))>0,]
ggplot(data=depth,aes(x=POS,y=MEAN_DEPTH,col=Family)) +
facet_grid(CHROM~., scales = 'free_x') + geom_point(size=0.3) +
geom_line(alpha=0.4) + theme_bw() + ggtitle("Coverage across genome, 1kb windows") +
xlab("Genomic position of SNP") + ylab("Mean coverage")
depth <- read.table("../../data/coverage/site_depth.txt", header=T)  # Loading data
depth <- depth[grep("chr*",depth$CHROM),]
depth$CHROM <- droplevels(depth$CHROM)
depth$POS <- round(depth$POS, digits=-3)
depth <- depth %>%
group_by(CHROM, POS, Family) %>%
mutate(avg=mean(MEAN_DEPTH)) %>%
select(-MEAN_DEPTH) %>%
rename(MEAN_DEPTH=avg)
depth <- subset(depth, !duplicated(subset(
depth, select=c(CHROM, POS, Family))))
sp_depth <- spread(depth,Family,MEAN_DEPTH)
sp_depth <- sp_depth[rowSums(!is.na(sp_depth[,3:14]))>0,]
ggplot(data=depth,aes(x=POS,y=MEAN_DEPTH,col=Family)) +
facet_grid(CHROM~., scales = 'free_x') + geom_point(size=0.3) +
geom_line(alpha=0.4) + theme_bw() + ggtitle("Coverage across genome, 1kb windows") +
xlab("Genomic position of SNP") + ylab("Mean coverage")
library(ggplot2)
library(dplyr)
library(tidyr)
depth <- read.table("../../data/coverage/site_depth.txt", header=T)  # Loading data
# Excluding unordered contigs
depth <- depth[grep("chr*",depth$CHROM),]
depth$CHROM <- droplevels(depth$CHROM)
# Grouping SNPs every 1kb
depth$POS <- round(depth$POS, digits=-3)
depth <- depth %>%
group_by(CHROM, POS, Family) %>%
mutate(avg=mean(MEAN_DEPTH)) %>%
select(-MEAN_DEPTH) %>%
rename(MEAN_DEPTH=avg)
depth <- subset(depth, !duplicated(subset(
depth, select=c(CHROM, POS, Family))))
# Spread families into columns
sp_depth <- spread(depth,Family,MEAN_DEPTH)
sp_depth <- sp_depth[rowSums(!is.na(sp_depth[,3:14]))>0,]
# Plotting coverage by family
ggplot(data=depth,aes(x=POS,y=MEAN_DEPTH,col=Family)) +
facet_grid(CHROM~., scales = 'free_x') + geom_point(size=0.3) +
geom_line(alpha=0.4) + theme_bw() + ggtitle("Coverage across genome, 1kb windows") +
xlab("Genomic position of SNP") + ylab("Mean coverage")
depth <- read.table("../../data/coverage/site_depth.txt", header=T)  # Loading data
depth
depth <- read.table("../../data/coverage/site_depth.txt", header=T)  # Loading data
depth <- depth[grep("chr*",depth$CHROM),]
depth$CHROM <- droplevels(depth$CHROM)
depth <- depth %>%
group_by(CHROM, POS, Family) %>%
mutate(avg=mean(MEAN_DEPTH)) %>%
select(-MEAN_DEPTH) %>%
rename(MEAN_DEPTH=avg)
depth <- subset(depth, !duplicated(subset(
depth, select=c(CHROM, POS, Family))))
sp_depth <- spread(depth,Family,MEAN_DEPTH)
sp_depth <- sp_depth[rowSums(!is.na(sp_depth[,3:14]))>0,]
ggplot(data=depth,aes(x=POS,y=MEAN_DEPTH,col=Family)) +
facet_grid(CHROM~., scales = 'free_x') + geom_point(size=0.3) +
geom_line(alpha=0.4) + theme_bw() + ggtitle("Coverage across genome, 1kb windows") +
xlab("Genomic position of SNP") + ylab("Mean coverage")
depth <- read.table("../../data/coverage/site_depth.txt", header=T)  # Loading data
depth <- depth[grep("chr*",depth$CHROM),]
depth$CHROM <- droplevels(depth$CHROM)
sp_depth <- spread(depth,Family,MEAN_DEPTH)
sp_depth <- sp_depth[rowSums(!is.na(sp_depth[,3:14]))>0,]
ggplot(data=depth,aes(x=POS,y=MEAN_DEPTH,col=Family)) +
facet_grid(CHROM~., scales = 'free_x') + geom_point(size=0.3) +
geom_line(alpha=0.4) + theme_bw() + ggtitle("Coverage across genome, 1kb windows") +
xlab("Genomic position of SNP") + ylab("Mean coverage")
library(zoo)
zoo(x = depth$MEAN_DEPTH)
dep_test <- zoo(x = depth$MEAN_DEPTH)
dep_win <- rollapply(dep_test, FUN=mean, width = 1000, by=1)
plot(dep_win)
plot(dep_win)
dep_win <- rollapply(dep_test, FUN=mean, width = 1000, by=10)
plot(dep_win)
dep_win <- rollapply(dep_test, FUN=mean, width = 100, by=10)
plot(dep_win)
dep_win <- rollapply(dep_test, FUN=mean, width = 10, by=1)
plot(dep_win)
dep_win <- rollapply(dep_test, FUN=mean, width = 30, by=1)
plot(dep_win)
dep_win <- rollapply(dep_test, FUN=mean, width = 30, by=10)
plot(dep_win)
depth <- read.table("../../data/coverage/site_depth.txt", header=T)  # Loading data
depth <- depth[grep("chr*",depth$CHROM),]
depth$CHROM <- droplevels(depth$CHROM)
depth$POS <- round(depth$POS, digits=-3)
depth <- depth %>%
group_by(CHROM, POS, Family) %>%
mutate(avg=mean(MEAN_DEPTH)) %>%
select(-MEAN_DEPTH) %>%
rename(MEAN_DEPTH=avg)
depth <- subset(depth, !duplicated(subset(
depth, select=c(CHROM, POS, Family))))
sp_depth <- spread(depth,Family,MEAN_DEPTH)
sp_depth <- sp_depth[rowSums(!is.na(sp_depth[,3:14]))>0,]
ggplot(data=depth,aes(x=POS,y=MEAN_DEPTH,col=Family)) +
facet_grid(CHROM~., scales = 'free_x') + geom_point(size=0.3) +
geom_line(alpha=0.4) + theme_bw() + ggtitle("Coverage across genome, 1kb windows") +
xlab("Genomic position of SNP") + ylab("Mean coverage")
indv <- read.table("../../data/ploidy/thresholds/fixed",header = T)
mother <- indv[indv$Generation=="F3",]
offspring <- indv[indv$Generation=="F4",]
hist(indv$N_SITES, breaks=20, main="Number of sites per individual (both 1n and 2n)", xlab="Number of sites")
hist(indv$MEAN_DEPTH,breaks=20, main="Mean depth per individual (both 1n and 2n)", xlab="Mean depth")
indv <- read.table("../../data/ploidy/thresholds/fixed_fam_d-20_r-80",header = T)
hist(indv$MEAN_DEPTH,breaks=20, main="Mean depth per individual (both 1n and 2n)", xlab="Mean depth")
indv <- read.table("../../data/ploidy/thresholds/fixed",header = T)
hist(indv$MEAN_DEPTH,breaks=20, main="Mean depth per individual (both 1n and 2n)", xlab="Mean depth")
indv[order(indv$MEAN_DEPTH),]
library(ggplot2)
indv <- read.table("../../data/ploidy/thresholds/fixed",header = T)
library(ggplot2); library(ggjoy)
ggplot(data=indv, aes(x=MEAN_DEPTH, y=Family)) + geom_joy()
indv <- read.table("../../data/ploidy/thresholds/fixed_fam_d-20_r-80",header = T)
ggplot(data=indv, aes(x=MEAN_DEPTH, y=Family)) + geom_joy()
indv <- read.table("../../data/ploidy/thresholds/fixed",header = T)
ggplot(data=indv, aes(x=MEAN_DEPTH, y=Family)) + geom_joy()
View(indv)
ggplot(data=indv, aes(x=HOM, y=Family)) + geom_joy()
ggplot(data=indv, aes(x=HOM, y=N_SITES)) + geom_joy()
ggplot(data=indv, aes(x=N_SITES, y=Family)) + geom_joy()
ggplot(data=indv, aes(x=MEAN_DEPTH, y=Family)) + geom_joy()
indv$lib <- "0"
indv
i="7"
indv <- read.table("../../data/ploidy/thresholds/fixed",header = T)
indv$lib <- "0"
for(i in c("7","7b","10","10b")){
tmp_lib <- read.table(paste0("../../data/barcodes/barcodes_radwasp", i))
indv$lib[indv$Name %in% tmp_lib[,2]] <- i
}
indv
indv <- read.table("../../data/ploidy/thresholds/fixed",header = T)
indv$lib <- "0"
for(i in c("6","7","7b","10","10b")){
tmp_lib <- read.table(paste0("../../data/barcodes/barcodes_radwasp", i))
indv$lib[indv$Name %in% tmp_lib[,2]] <- i
}
indv <- read.table("../../data/ploidy/thresholds/fixed",header = T)
indv$lib <- "0"
for(i in c("6","7","7b","10","10b")){
tmp_lib <- read.table(paste0("../../data/barcodes/barcodes_radwasp", i))
indv$lib[indv$Name %in% tmp_lib[,2]] <- i
}
indv
ggplot(data=indv, aes(x=MEAN_DEPTH, y=Family, fill=lib)) + geom_joy()
ggplot(data=indv, aes(x=MEAN_DEPTH, y=Family, fill=lib)) + geom_joy(stat = "binline", bins=20, scale=0.95, draw_baseline=F)
ggplot(data=indv, aes(x=MEAN_DEPTH, y=Family, fill=lib)) +
geom_joy(stat = "binline", bins=20, scale=0.95, draw_baseline=T)
ggplot(data=indv, aes(x=MEAN_DEPTH, y=lib)) +
geom_joy(stat = "binline", bins=20, scale=0.95, draw_baseline=T)
View(indv)
View(indv)
indv$lib <- "Mothers"
for(i in c("6","7","7b","10","10b")){
tmp_lib <- read.table(paste0("../../data/barcodes/barcodes_radwasp", i))
indv$lib[indv$Name %in% tmp_lib[,2]] <- i
}
ggplot(data=indv, aes(x=MEAN_DEPTH, y=lib)) +
geom_joy(stat = "binline", bins=20, scale=0.95, draw_baseline=T)
ggplot(data=indv, aes(x=MEAN_DEPTH, y=lib)) +
geom_joy(stat = "binline", bins=20, scale=0.95, draw_baseline=T)+
ylab("Library")
ggplot(data=indv, aes(x=MEAN_DEPTH, y=lib, fill=N_SITES)) +
geom_joy(stat = "binline", bins=20, scale=0.95, draw_baseline=T)+
ylab("Library")
ggplot(data=indv, aes(x=MEAN_DEPTH, y=lib, fill=N_SITES)) +
geom_joy(stat = "binline", bins=20, scale=0.95, draw_baseline=T)+
ylab("Library")
ggplot(data=indv, aes(x=MEAN_DEPTH, y=lib), fill=N_SITES)) +
geom_joy(stat = "binline", bins=20, scale=0.95, draw_baseline=T)+
ylab("Library")
ggplot(data=indv, aes(x=MEAN_DEPTH, y=lib), fill=N_SITES) +
geom_joy(stat = "binline", bins=20, scale=0.95, draw_baseline=T)+
ylab("Library")
ggplot(data=indv, aes(x=MEAN_DEPTH, y=lib)) +
geom_joy(stat = "binline", bins=20, scale=0.95, draw_baseline=T, fill=N_SITES)+
ylab("Library")
indv
ggplot(data=indv, aes(x=MEAN_DEPTH, y=lib)) +
geom_joy(stat = "binline", bins=20, scale=0.95, draw_baseline=T, fill=indv$N_SITES)+
ylab("Library")
ggplot(data=indv, aes(x=MEAN_DEPTH, y=lib)) +
geom_joy(stat = "binline", bins=20, scale=0.95, draw_baseline=T)+
ylab("Library")
ggplot(data=indv, aes(x=MEAN_DEPTH, y=lib, height=..density..)) +
geom_joy(stat = "binline", bins=20, scale=0.95, draw_baseline=T)+
ylab("Library")
ggplot(data=indv, aes(x=N_SITES, y=lib, height=..density..)) +
geom_joy(stat = "binline", bins=20, scale=0.95, draw_baseline=T)+
ylab("Library")
View(depth)
gen[,sampleID] <- apply(gen[,sampleID], 2, as.character)
pack <- c("stringr","dplyr", "readr")
lapply(pack, require, character.only = TRUE)
pop_path <- "../../data/populations/grouped_d-3_r-80"
sampleID <- read_tsv(paste(pop_path, 'batch_0.sumstats.tsv', sep='/'),
n_max = 2, col_names = F)
gen <- read_tsv(paste(pop_path, "batch_0.genomic.tsv", sep='/'),
skip = 1, col_names = F)
sampleID <- append(unlist(str_split(sampleID[1,2], ',')),
unlist(str_split(sampleID[2,2], ',')))
colnames(gen)[1:3] <- c("Locus.ID","Chr","BP")
colnames(gen)[4:length(colnames(gen))] <- sampleID
gen[,sampleID] <- apply(gen[,sampleID], 2, function(x) ifelse(x>10,yes = 0,no=x))
gen[,sampleID] <- apply(gen[,sampleID], 2, as.character)
geno <- list('0'='M')
for(g in as.character(1:10)){geno[[g]] <- ifelse(g %in% c('1','5','8','10'), yes='O', no='E')}
geno
gen[,sampleID] <- apply(gen[,sampleID], 2, function(x) geno[[x]])
gen[,sampleID] <- lapply(gen[,sampleID], function(x) geno[[x]])
lapply(gen[,sampleID], function(x) print(x))
test <- gen[,sampleID] %>%
mutate_each(funs(function(x) geno[[x]]))
test <- gen[,sampleID] %>%
mutate_each(funs(geno[[x]]))
test <- gen[,sampleID] %>%
mutate_each(funs(function(x){geno[[x]]}))
geno[[gen[,'C209']]]
gen[,'C209']
geno[[gen[1,'C209']]]
gen[1,'C209']
as.character(gen[1,'C209'])
geno[[as.character(gen[1,'C209'])]]
test <- gen[,sampleID] %>%
mutate_each(funs(function(x){geno[[as.character(x)]]}))
gen[,sampleID] <- lapply(gen[,sampleID], , function(x) geno[[as.character(x)]])
lapply(gen[,sampleID], function(x) geno[[as.character(x)]])
Vectorize(function(x) geno[[as.character(x)]])
vec_geno <- Vectorize(function(x) geno[[as.character(x)]])
gen[,sampleID] <- lapply(gen[,sampleID], FUN=vec_geno)
View(gen)
centro <- read_tsv("../../data/assoc_mapping/centro/centrolist.tsv")
centro
View(centro)
centro$start <- centro$pos - 100000
centro$end <- centro$pos + 100000
View(centro)
centrosize <- 100000
?switch
for ( chrom in levels(gen$Chr)){
print(chrom)
}
levels(gen$Chr)
for ( chrom in unique(gen$Chr)){
print(chrom)
}
gen <- gen[grep(pattern = "chr.*", x = gen$Chr),]
gen
View(gen)
# Path to folder containing STACKS populations output files
pop_path <- "../../data/populations/grouped_d-3_r-80"
# File with sample names ordered as in genomic output
sampleID <- read_tsv(paste(pop_path, 'batch_0.sumstats.tsv', sep='/'),
n_max = 2, col_names = F)
# Genomic output from populations
gen <- read_tsv(paste(pop_path, "batch_0.genomic.tsv", sep='/'),
skip = 1, col_names = F)
# Loading centromere list
centro <- read_tsv("../../data/assoc_mapping/centro/centrolist.tsv")
#==== PROCESSING ====#
# Concatenating sample names into a single vector
sampleID <- append(unlist(str_split(sampleID[1,2], ',')),
unlist(str_split(sampleID[2,2], ',')))
# Meaningful column names
colnames(gen)[1:3] <- c("Locus.ID","Chr","BP")
gen[grep(pattern = "chr.*", x = gen$Chr),]
gen %>%
filter(grep("chr.*", Chr))
grep("chr.*", Chr)
grep("chr.*", gen$Chr)
gen <- gen %>%
filter(str_detect(pattern = "chr.*"))
gen %>%
filter(str_detect(string= Chr,pattern = "chr.*"))
str_detect(string= gen$Chr,pattern = "chr.*")
t1 <- gen %>%
filter(str_detect(string= Chr,pattern = "chr.*"))
t2 <- gen[grep(pattern = "chr.*", x = gen$Chr),]
profvis::profvis({t1 <- gen %>%
filter(str_detect(string= Chr,pattern = "chr.*"))
t2 <- gen[grep(pattern = "chr.*", x = gen$Chr),]})
gen <- gen %>%
filter(str_detect(string= Chr,pattern = "chr.*"))
pack <- c("stringr","dplyr", "readr")
lapply(pack, require, character.only = TRUE)
centrosize <- 100000
pop_path <- "../../data/populations/grouped_d-3_r-80"
sampleID <- read_tsv(paste(pop_path, 'batch_0.sumstats.tsv', sep='/'),
n_max = 2, col_names = F)
gen <- read_tsv(paste(pop_path, "batch_0.genomic.tsv", sep='/'),
skip = 1, col_names = F)
centro <- read_tsv("../../data/assoc_mapping/centro/centrolist.tsv")
sampleID <- append(unlist(str_split(sampleID[1,2], ',')),
unlist(str_split(sampleID[2,2], ',')))
colnames(gen)[1:3] <- c("Locus.ID","Chr","BP")
gen <- gen %>%
filter(str_detect(string= Chr,pattern = "chr.*"))
colnames(gen)[4:length(colnames(gen))] <- sampleID
gen[,sampleID] <- apply(gen[,sampleID], 2, function(x) ifelse(x>10,yes = 0,no=x))
gen[,sampleID] <- apply(gen[,sampleID], 2, as.character)
geno <- list('0'='M')
for(g in as.character(1:10)){geno[[g]] <- ifelse(g %in% c('1','5','8','10'), yes='O', no='E')}
vec_geno <- Vectorize(function(x) geno[[as.character(x)]])
gen[,sampleID] <- lapply(gen[,sampleID], FUN=vec_geno)
centro$start <- centro$pos - centrosize
centro$end <- centro$pos + centrosize
unique(gen$Chr)
centro$start[centro$Chr == chrom]
chrom='chr1'
centro$start[centro$Chr == chrom]
gen %>%
filter(Chr == chrom & BP > chr_start & BP < chr_end)
chr_start <- centro$start[centro$Chr == chrom]
chr_end <- centro$end[centro$Chr == chrom]
gen %>%
filter(Chr == chrom & BP > chr_start & BP < chr_end)
cen_chr <- gen %>%
filter(Chr == chrom & BP > chr_start & BP < chr_end)
View(gen)
View(cen_chr)
vars(sampleID)
gen <- gen %>%
filter(vars(sampleID), is.character)
gen <- gen %>%
filter(vars(sampleID), any_vars(.=='E'))
gen <- gen %>%
filter(vars(sampleID), all_vars(.=='E'))
gen <- gen %>%
filter(vars(sampleID), .=='E')
gen %>%
filter(vars(sampleID), any(.=='E'))
version
install.packages(tidyverse)
install.packages("tidyverse")
detach("package:dplyr", unload=TRUE)
library("dplyr", lib.loc="~/R/x86_64-redhat-linux-gnu-library/3.3")
install.packages(c("acepack", "AER", "ape", "arm", "assertthat", "BH", "car", "chron", "coda", "colorspace", "corpcor", "cubature", "curl", "data.table", "DBI", "dendextend", "devtools", "digest", "dplyr", "evaluate", "factoextra", "FactoMineR", "flexmix", "formatR", "Formula", "ggjoy", "ggpubr", "ggsci", "git2r", "haven", "Hmisc", "htmltools", "htmlwidgets", "httpuv", "httr", "jsonlite", "knitr", "ks", "lme4", "lmerTest", "lmtest", "mapproj", "maps", "maptools", "markdown", "Matrix", "mclust", "MCMCglmm", "memoise", "modelr", "multicool", "mvtnorm", "nlme", "openssl", "pander", "pbkrtest", "proto", "purrr", "quantreg", "R6", "Rcpp", "RcppEigen", "reshape2", "rgl", "RgoogleMaps", "rmarkdown", "sandwich", "scales", "scatterplot3d", "shiny", "sp", "SparseM", "stringi", "stringr", "TH.data", "tibble", "tidyr", "viridis", "withr", "yaml", "zoo"))
library(tidyverse)
gen %>% filter(vars(sampleID), any_vars(.=='E'))
gen %>% filter_at(vars(sampleID), any_vars(.=='E'))
gen <- gen %>% filter_at(vars(sampleID), any_vars(.=='E'))
View(gen)
chr_start <- centro$start[centro$Chr == chrom]
chr_end <- centro$end[centro$Chr == chrom]
cen_chr <- gen %>%
filter(Chr == chrom & BP > chr_start & BP < chr_end) %>%
aggr
gen %>%
filter(Chr == chrom & BP > chr_start & BP < chr_end)
pack <- c("stringr","dplyr", "readr")
lapply(pack, require, character.only = TRUE)
gen %>%
filter(Chr == chrom & BP > chr_start & BP < chr_end) %>%
summarise_at(vars(sampleID), function(x) str_count('E')/str_count('[OE]'))
View(cen_chr)
cen_chr <- gen %>%
filter(Chr == chrom & BP > chr_start & BP < chr_end) %>%
summarise_at(vars(sampleID), function(x) str_count('E')/str_count('[OE]'))
View(cen_chr)
iris
starwars
iris
iris %>% group_by(Speices) %>% summarise_all(mean)
iris %>% group_by(Species) %>% summarise_all(mean)
iris %>% group_by(Species) %>% summarise_at(vars(c("Petal.Length","Petal.Width")),mean)
cen_chr
gen$C266
str_count(gen$C266, "E")
cen_chr <- gen %>%
filter(Chr == chrom & BP > chr_start & BP < chr_end) %>%
summarise_at(vars(sampleID), function(x) sum(str_count('E'))/sum(str_count('[OE]')))
cen_chr
View(centro)
View(cen_chr)
sum(str_count(gen$C266, "E"))
sum(str_count(gen$C266, "[OE]"))
sum(str_count(gen$C266, "E"))/sum(str_count(gen$C266, "[OE]"))
sum(str_count(gen$C209, "E"))/sum(str_count(gen$C266, "[OE]"))
cen_chr <- gen %>%
filter(Chr == chrom & BP > chr_start & BP < chr_end) %>%
summarise_at(vars(sampleID), function(x){sum(str_count('E'))/sum(str_count('[OE]'))})
cen_chr
cen_chr <- gen %>%
filter(Chr == chrom & BP > chr_start & BP < chr_end) %>%
summarise_at(vars(sampleID), mean)
warnings()
View(cen_chr)
cen_chr <- gen %>%
filter(Chr == chrom & BP > chr_start & BP < chr_end) %>%
summarise_all(vars(sampleID), function(x){sum(str_count('E'))/sum(str_count('[OE]'))})
cen_chr <- gen %>%
filter(Chr == chrom & BP > chr_start & BP < chr_end) %>%
summarise_at(vars(sampleID), .funs=function(x){sum(str_count('E'))/sum(str_count('[OE]'))})
cen_chr
cen_chr <- gen %>%
filter(Chr == chrom & BP > chr_start & BP < chr_end) %>%
summarise_at(vars(sampleID), .funs=function(x){sum(str_count('E'))})
cen_chr
cen_chr <- gen %>%
filter(Chr == chrom & BP > chr_start & BP < chr_end) %>%
summarise_at(vars(sampleID), .funs=function(x){sum(str_count('[OE]'))})
cen_chr
cen_chr <- gen %>%
filter(Chr == chrom & BP > chr_start & BP < chr_end)
View(cen_chr)
cen_chr <- gen %>%
filter(Chr == chrom & BP > chr_start & BP < chr_end) %>%
summarise_at(vars(sampleID), function(x){sum(x=='E')})
cen_chr
cen_chr <- gen %>%
filter(Chr == chrom & BP > chr_start & BP < chr_end) %>%
summarise_at(vars(sampleID), function(x){sum(x=='E')/sum(x %in% c('E','O'))})
cen_chr
View(cen_chr)
centrosize <- 1000000
centro$start <- centro$pos - centrosize
centro$end <- centro$pos + centrosize
chr_start <- centro$start[centro$Chr == chrom]
chr_end <- centro$end[centro$Chr == chrom]
cen_chr <- gen %>%
filter(Chr == chrom & BP > chr_start & BP < chr_end) %>%
summarise_at(vars(sampleID), function(x){sum(x=='E')/sum(x %in% c('E','O'))})
View(cen_chr)
pack <- c("stringr","dplyr", "readr")
lapply(pack, require, character.only = TRUE)
centrosize <- 1000000
#==== LOADING DATA ====#
# Path to folder containing STACKS populations output files
pop_path <- "../../data/populations/grouped_d-3_r-80"
# File with sample names ordered as in genomic output
sampleID <- read_tsv(paste(pop_path, 'batch_0.sumstats.tsv', sep='/'),
n_max = 2, col_names = F)
# Genomic output from populations
gen <- read_tsv(paste(pop_path, "batch_0.genomic.tsv", sep='/'),
skip = 1, col_names = F)
# Loading centromere list
centro <- read_tsv("../../data/assoc_mapping/centro/centrolist.tsv")
#==== PROCESSING ====#
# Concatenating sample names into a single vector
sampleID <- append(unlist(str_split(sampleID[1,2], ',')),
unlist(str_split(sampleID[2,2], ',')))
# Meaningful column names
colnames(gen)[1:3] <- c("Locus.ID","Chr","BP")
gen <- gen %>%
filter(str_detect(string= Chr,pattern = "chr.*"))
# Replacing numeric headers with sample names
colnames(gen)[4:length(colnames(gen))] <- sampleID
# If populations error yielded high number, replace with missing code
gen[,sampleID] <- apply(gen[,sampleID], 2, function(x) ifelse(x>10,yes = 0,no=x))
# Get sample columns into character format
gen[,sampleID] <- apply(gen[,sampleID], 2, as.character)
# Constructing genotype dictionary to match numeric genotype with hetero/homozygous/missing
geno <- list('0'='M')
for(g in as.character(1:10)){geno[[g]] <- ifelse(g %in% c('1','5','8','10'), yes='O', no='E')}
# Replacing numeric encoding with matching genotype letter
vec_geno <- Vectorize(function(x) geno[[as.character(x)]])
gen[,sampleID] <- lapply(gen[,sampleID], FUN=vec_geno)
centro$start <- centro$pos - centrosize
centro$end <- centro$pos + centrosize
chr_start <- centro$start[centro$Chr == chrom]
chr_end <- centro$end[centro$Chr == chrom]
cen_chr <- gen %>%
filter(Chr == chrom & BP > chr_start & BP < chr_end) %>%
summarise_at(vars(sampleID), function(x){sum(x=='E')/sum(x %in% c('E','O'))})
View(cen_chr)
centrosize <- 2000000
centro$start <- centro$pos - centrosize
centro$end <- centro$pos + centrosize
chr_start <- centro$start[centro$Chr == chrom]
chr_end <- centro$end[centro$Chr == chrom]
cen_chr <- gen %>%
filter(Chr == chrom & BP > chr_start & BP < chr_end) %>%
summarise_at(vars(sampleID), function(x){sum(x=='E')/sum(x %in% c('E','O'))})
View(cen_chr)
hist(t(cen_chr))
