in_data <- read_tsv(paste0(in_folder,in_file),col_names = T)
in_data
in_data %<>%   # Erasing original variable
mutate(state=paste0(Generation,Sex,Ploidy)) %>%  # New column containing state information
rename(Fis=F)  # Renaming inbreeding coefficient column (F is colliding with 'FALSE')
in_data %<>%   # Erasing original variable
mutate(state=paste0(Generation,Sex,Ploidy)) %>%  # New column containing state information
rename(Fis=F)  # Renaming inbreeding coefficient column (F is colliding with 'FALSE')
in_data
in_data <- read_tsv(paste0(in_folder,in_file),col_names = T)  # Reading files sequentially
in_data
in_data %<>%   # Erasing original variable
mutate(state=paste0(Generation,Sex,Ploidy)) %>%  # New column containing state information
rename(Fis=F)  # Renaming inbreeding coefficient column (F is colliding with 'FALSE')
in_data$state <-recode_factor(in_data$state, "F3FD" = "Mothers",
"F4FD" = "Daughters",
"F4MH" = "1N Sons",
"F4MD" = "2N Sons")
ploidy_plot(in_data,basename(in_file))  # Calling plotting function
ploid_tbl = in_data; thresh = basename(in_file)
group_stats <- ploid_tbl %>%  # Computing summary stats for each family
filter(Generation == 'F4' & Sex == 'F') %>%  # Computing from daughters only
group_by(Family) %>%
summarise_at(.cols=c("Fis"),.funs = c("mean","sd")) %>%
mutate(state = "Daughters") %>%  # These are all daughters (used for plotting)
mutate(mid_x = n()/2)  # Graphical parameter for plots
group_stats
group_stats$sd[is.na(group_stats$sd)] <- 0
group_stats
group_stats <- ploid_tbl %>%  # Computing summary stats for each family
filter(Generation == 'F4' & Sex == 'F') %>%  # Computing from daughters only
group_by(Family) %>%
summarise_at(.cols=c("HOM"),.funs = c("mean","sd")) %>%
mutate(state = "Daughters") %>%  # These are all daughters (used for plotting)
mutate(mid_x = n()/2)  # Graphical parameter for plots
View(group_stats)
group_stats$sd[is.na(group_stats$sd)] <- 0
ggplot(data = ploid_tbl, aes(x = HOM))+
geom_density(data = ploid_tbl[ploid_tbl$state!="Mothers",], alpha = 0.3,aes(fill=Sex)) +  # Daughters vs Sons as density area
#geom_density(alpha = 0.1, col="green") +  # All individuals in family showed by green density curve
geom_point(data = ploid_tbl[ploid_tbl$state=="Mothers",], aes(y=0, col=state)) +  # Showing mother as a dot
geom_vline(data = group_stats, aes(xintercept = (mean + 2* sd)), col='red', lty=2) +
theme(axis.text.x = element_blank()) + facet_wrap(~Family,drop=T, scale='free') +
xlab("Homozygosity") + ylab("Density") + ggtitle(paste("Threshold ", thresh, sep=" "))
require(tidyverse)
detach("package:purrr", unload=TRUE)
detach("package:readr", unload=TRUE)
detach("package:tidyverse", unload=TRUE)
detach("package:tidyr", unload=TRUE)
detach("package:tibble", unload=TRUE)
detach("package:ggplot2", unload=TRUE)
detach("package:dplyr", unload=TRUE)
if not require(suppressMessages(tidyversee)){
stopifnot(
suppressMessages(
require(ggplot2);
require(tidyr);
require(dplyr)
)
)
}
stopifnot(
require(ggplot2);
require(tidyr);
require(dplyr)
)
stopifnot(require(ggplot2);require(tidyr);require(dplyr))
load_packages <- function(){require(ggplot2);require(tidyr), require(dplyr)}
load_packages <- function(){require(ggplot2);require(tidyr); require(dplyr)}
if(! require(suppressMessages(tidyversee))){
stopifnot(load_packages)
}
if(! require(tidyversee)){
stopifnot(load_packages)
}
if(!require(tidyversee)){
stopifnot(load_packages)
}
require(tidyversee)
if(!require(tidyversee)){
print("lol")
stopifnot(load_packages)
}
min(require(ggplot2),require(tidyr), require(dplyr))
load_packages <- function(){min(require(ggplot2),require(tidyr), require(dplyr))}
if(!require(tidyversee)){
print("lol")
stopifnot(load_packages)
}
load_packages <- function(){all(require(ggplot2),require(tidyr), require(dplyr))}
load_packages
if(!require(tidyversee)){
print("lol")
stopifnot(load_packages())
}
if(!require(tidyversee)){
print("lol")
stopifnot(load_packages())
}
all(require(ggplot2),require(tidyr), require(dplyr))
detach("package:ggplot2", unload=TRUE)
load_packages <- function(){all(require(ggplot2),require(tidyr), require(dplyr))}
if(!require(tidyversee)){
print("lol")
stopifnot(load_packages())
}
load_packages <- function(){all(require(ggplot2),require(tidyr), require(dplyr))}
if(!require(tidyverse)){
stopifnot(load_packages())
}
if(!suppressMessages(require(tidyverse))){
stopifnot(load_packages())
}
library(dplyr)
library(readr)
library(ggplot2)
scaffolds <- read.table("../../data/ref_genome/ordered_genome/merged.fasta.ann", stringsAsFactors = F)
chrom_sizes <- data.frame(); chrom_names=c()
for(row in seq(1,nrow(scaffolds))){
if(length(grep('chr',scaffolds[row,2]))){
chrom_names <- append(chrom_names,as.character(scaffolds[row,2]))
chrom_sizes <- rbind(chrom_sizes, scaffolds[row+1,c(1,2)])
}
}
chrom_sizes <- cbind(chrom_names, chrom_sizes)
rownames(chrom_sizes) <- NULL
colnames(chrom_sizes) <- c("chrom","start","length")
chrom_sizes$length <- as.numeric(chrom_sizes$length)
chrom_sizes$mid <- chrom_sizes$start + (chrom_sizes$length/2)
stat_path <- '../../data/populations/d-20_r-80/'
sum_stat <- data.frame()
for(fam in list.dirs(stat_path)[2:length(list.dirs(stat_path))]){  # Excluding first dir (parent)
tmp_stat <- read.csv(paste0(fam,'/batch_0.sumstats.tsv'),header=T,skip=2,sep='\t')
tmp_stat$fam <- rep(basename(fam))
sum_stat <- rbind(sum_stat, tmp_stat)
}
male_stat <- sum_stat[sum_stat$Pop.ID=="M",c('Chr','BP','Obs.Hom', 'fam', 'N',"Locus.ID")]
female_stat <- sum_stat[sum_stat$Pop.ID=="F",c('Chr','BP','Obs.Het', 'fam', 'N')]
CSD_like <- merge(male_stat,female_stat,by=c('Chr','BP','fam'))
CSD_like$CSD <- (CSD_like$Obs.Hom+CSD_like$Obs.Het)/2
CSD_like <- rename(CSD_like, Nm=N.x,Nf=N.y, Male.Hom=Obs.Hom, Fem.Het=Obs.Het)
CSD_like
View(CSD_like)
View(tmp_stat)
View(tmp_stat)
indv <- '../../data/individuals'
indv <- read.table('../../data/individuals', header=T)
View(indv)
View(indv)
mother <- indv$Name[indv$Family==fam & indv$Generation=='F3']
mother
fam
mother <- indv$Name[indv$Family==basename(fam) & indv$Generation=='F3']
mother
mother <- as.character(indv$Name[indv$Family==basename(fam) & indv$Generation=='F3'])
mother
basename(fam)
paste0('../../data/sstacks/', basename(fam))
paste('../../data/sstacks',basename(fam),mother,sep='/')
match_mother <- gzfile(paste0('../../data/sstacks/',basename(fam),'/',mother,'.snps.tsv.gz'),"rt")
match_mother
read.table(match_mother)
match_mother <- read.table(match_mother)
snp_mother <- read.table(match_mother)
match_mother <- gzfile(paste0('../../data/sstacks/',basename(fam),'/',mother,'.snps.tsv.gz'),"rt")
snp_mother <- read.table(match_mother)
snp_mother
close(match_mother)
View(snp_mother)
snp_mother %>% group_by(V3) %>% filter(!all(V5=='O'))
test <- snp_mother %>% group_by(V3) %>% filter(!all(V5=='O'))
View(test)
hom_loc <- snp_mother %>% group_by(V3) %>% filter(all(V5=='O'))
match_gz <- gzfile(paste0('../../data/stacks/',fam,'/',mother,'.matches.tsv.gz'),"rt")
match_gz <- gzfile(paste0('../../data/sstacks/',fam,'/',mother,'.matches.tsv.gz'),"rt")
fam
fam <- basename(fam)
match_gz <- gzfile(paste0('../../data/sstacks/',fam,'/',mother,'.matches.tsv.gz'),"rt")
match_mother <- read.table(match_gz); close(match_gz)
match_mother
snp_gz <- gzfile(paste0('../../data/sstacks/',fam,'/',mother,'.snps.tsv.gz'),"rt")
snp_mother <- read.table(snp_gz); close(snp_gz)
hom_loc <- snp_mother %>% group_by(V3) %>% filter(all(V5=='O'))
hom_loc
unique(hom_loc$V3)
hom_ID_local <- unique(hom_loc$V3)
hom_ID_global <- match_mother$V3[match_mother$V4 %in% hom_ID_local]
hom_ID_global
length(hom_ID_global)
length(hom_ID_local)
hom_ID_global <- unique(match_mother$V3[match_mother$V4 %in% hom_ID_local])
hom_ID_global
length(hom_ID_global)
length(hom_ID_global)
length(hom_ID_local)
hom_filt <- function(fam){
# Function for filtering loci homozygous in mother of given family
mother <- as.character(indv$Name[indv$Family==fam & indv$Generation=='F3'])
# Using mother's genotype from snps file
snp_gz <- gzfile(paste0('../../data/sstacks/',fam,'/',mother,'.snps.tsv.gz'),"rt")
snp_mother <- read.table(snp_gz); close(snp_gz)
# keeping all loci where all SNPs are hom
hom_loc <- snp_mother %>% group_by(V3) %>% filter(all(V5=='O'))
hom_ID_local <- unique(hom_loc$V3)
match_gz <- gzfile(paste0('../../data/sstacks/',fam,'/',mother,'.matches.tsv.gz'),"rt")
match_mother <- read.table(match_gz); close(match_gz)
hom_ID_global <- unique(match_mother$V3[match_mother$V4 %in% hom_ID_local])
return(hom_ID_global)
}
`%not in%` <- function (x, table) is.na(match(x, table, nomatch=NA_integer_))
# This scripts is used to visualize the CSD-ness of SNPs along the genome.
# This is measured as [Obs.Hom(M)+Obs.Het(F)]/2
# 09.07.2017
# Cyril Matthey-Doret
# Loading and formatting data
library(dplyr)
library(readr)
library(ggplot2)
# Chromosome sizes
scaffolds <- read.table("../../data/ref_genome/ordered_genome/merged.fasta.ann", stringsAsFactors = F)
chrom_sizes <- data.frame(); chrom_names=c()
for(row in seq(1,nrow(scaffolds))){
if(length(grep('chr',scaffolds[row,2]))){
chrom_names <- append(chrom_names,as.character(scaffolds[row,2]))
chrom_sizes <- rbind(chrom_sizes, scaffolds[row+1,c(1,2)])
}
}
chrom_sizes <- cbind(chrom_names, chrom_sizes)
rownames(chrom_sizes) <- NULL
colnames(chrom_sizes) <- c("chrom","start","length")
chrom_sizes$length <- as.numeric(chrom_sizes$length)
chrom_sizes$mid <- chrom_sizes$start + (chrom_sizes$length/2)
hom_filt <- function(fam){
# Function for filtering loci homozygous in mother of given family
mother <- as.character(indv$Name[indv$Family==fam & indv$Generation=='F3'])
# Using mother's genotype from snps file
snp_gz <- gzfile(paste0('../../data/sstacks/',fam,'/',mother,'.snps.tsv.gz'),"rt")
snp_mother <- read.table(snp_gz); close(snp_gz)
# keeping all loci where all SNPs are hom
hom_loc <- snp_mother %>% group_by(V3) %>% filter(all(V5=='O'))
hom_ID_local <- unique(hom_loc$V3)
match_gz <- gzfile(paste0('../../data/sstacks/',fam,'/',mother,'.matches.tsv.gz'),"rt")
match_mother <- read.table(match_gz); close(match_gz)
hom_ID_global <- unique(match_mother$V3[match_mother$V4 %in% hom_ID_local])
return(hom_ID_global)
}
`%not in%` <- function (x, table) is.na(match(x, table, nomatch=NA_integer_))
# Customized operator for convenience
# Genome statistics
stat_path <- '../../data/populations/d-20_r-80/'
indv <- read.table('../../data/individuals', header=T)
# phi_path <- commandArgs(TrailingOnly=T)[1]
sum_stat <- data.frame()
for(fam in list.dirs(stat_path)[2:length(list.dirs(stat_path))]){  # Excluding first dir (parent)
tmp_stat <- read.csv(paste0(fam,'/batch_0.sumstats.tsv'),header=T,skip=2,sep='\t')
tmp_stat$fam <- rep(basename(fam))
mother_hom <- hom_filt(basename(fam))
tmp_stat <- tmp_stat[tmp_stat$Locus.ID %not in% mother_hom]
sum_stat <- rbind(sum_stat, tmp_stat)
}
library(dplyr)
library(readr)
library(ggplot2)
# Chromosome sizes
scaffolds <- read.table("../../data/ref_genome/ordered_genome/merged.fasta.ann", stringsAsFactors = F)
chrom_sizes <- data.frame(); chrom_names=c()
for(row in seq(1,nrow(scaffolds))){
if(length(grep('chr',scaffolds[row,2]))){
chrom_names <- append(chrom_names,as.character(scaffolds[row,2]))
chrom_sizes <- rbind(chrom_sizes, scaffolds[row+1,c(1,2)])
}
}
chrom_sizes <- cbind(chrom_names, chrom_sizes)
rownames(chrom_sizes) <- NULL
colnames(chrom_sizes) <- c("chrom","start","length")
chrom_sizes$length <- as.numeric(chrom_sizes$length)
chrom_sizes$mid <- chrom_sizes$start + (chrom_sizes$length/2)
hom_filt <- function(fam){
# Function for filtering loci homozygous in mother of given family
mother <- as.character(indv$Name[indv$Family==fam & indv$Generation=='F3'])
# Using mother's genotype from snps file
snp_gz <- gzfile(paste0('../../data/sstacks/',fam,'/',mother,'.snps.tsv.gz'),"rt")
snp_mother <- read.table(snp_gz); close(snp_gz)
# keeping all loci where all SNPs are hom
hom_loc <- snp_mother %>% group_by(V3) %>% filter(all(V5=='O'))
hom_ID_local <- unique(hom_loc$V3)
match_gz <- gzfile(paste0('../../data/sstacks/',fam,'/',mother,'.matches.tsv.gz'),"rt")
match_mother <- read.table(match_gz); close(match_gz)
hom_ID_global <- unique(match_mother$V3[match_mother$V4 %in% hom_ID_local])
return(hom_ID_global)
}
`%not in%` <- function (x, table) is.na(match(x, table, nomatch=NA_integer_))
# Customized operator for convenience
# Genome statistics
stat_path <- '../../data/populations/d-20_r-80/'
indv <- read.table('../../data/individuals', header=T)
# phi_path <- commandArgs(TrailingOnly=T)[1]
sum_stat <- data.frame()
for(fam in list.dirs(stat_path)[2:length(list.dirs(stat_path))]){  # Excluding first dir (parent)
tmp_stat <- read.csv(paste0(fam,'/batch_0.sumstats.tsv'),header=T,skip=2,sep='\t')
tmp_stat$fam <- rep(basename(fam))
mother_hom <- hom_filt(basename(fam))
tmp_stat <- tmp_stat[tmp_stat$Locus.ID %not in% mother_hom,]
sum_stat <- rbind(sum_stat, tmp_stat)
}
library(dplyr)
library(readr)
library(ggplot2)
# Chromosome sizes
scaffolds <- read.table("../../data/ref_genome/ordered_genome/merged.fasta.ann", stringsAsFactors = F)
chrom_sizes <- data.frame(); chrom_names=c()
for(row in seq(1,nrow(scaffolds))){
if(length(grep('chr',scaffolds[row,2]))){
chrom_names <- append(chrom_names,as.character(scaffolds[row,2]))
chrom_sizes <- rbind(chrom_sizes, scaffolds[row+1,c(1,2)])
}
}
chrom_sizes <- cbind(chrom_names, chrom_sizes)
rownames(chrom_sizes) <- NULL
colnames(chrom_sizes) <- c("chrom","start","length")
chrom_sizes$length <- as.numeric(chrom_sizes$length)
chrom_sizes$mid <- chrom_sizes$start + (chrom_sizes$length/2)
hom_filt <- function(fam){
# Function for filtering loci homozygous in mother of given family
mother <- as.character(indv$Name[indv$Family==fam & indv$Generation=='F3'])
# Using mother's genotype from snps file
snp_gz <- gzfile(paste0('../../data/sstacks/',fam,'/',mother,'.snps.tsv.gz'),"rt")
snp_mother <- read.table(snp_gz); close(snp_gz)
# keeping all loci where all SNPs are hom
hom_loc <- snp_mother %>% group_by(V3) %>% filter(all(V5=='O'))
hom_ID_local <- unique(hom_loc$V3)
match_gz <- gzfile(paste0('../../data/sstacks/',fam,'/',mother,'.matches.tsv.gz'),"rt")
match_mother <- read.table(match_gz); close(match_gz)
hom_ID_global <- unique(match_mother$V3[match_mother$V4 %in% hom_ID_local])
return(hom_ID_global)
}
`%not in%` <- function (x, table) is.na(match(x, table, nomatch=NA_integer_))
# Customized operator for convenience
# Genome statistics
stat_path <- '../../data/populations/d-20_r-80/'
indv <- read.table('../../data/individuals', header=T)
# phi_path <- commandArgs(TrailingOnly=T)[1]
sum_stat <- data.frame()
for(fam in list.dirs(stat_path)[2:length(list.dirs(stat_path))]){  # Excluding first dir (parent)
tmp_stat <- read.csv(paste0(fam,'/batch_0.sumstats.tsv'),header=T,skip=2,sep='\t')
tmp_stat$fam <- rep(basename(fam))
try(mother_hom <- hom_filt(basename(fam)))
tmp_stat <- tmp_stat[tmp_stat$Locus.ID %not in% mother_hom,]
sum_stat <- rbind(sum_stat, tmp_stat)
mother_hom <- ""
}
View(sum_stat)
fam <- basename(fam)
mother <- as.character(indv$Name[indv$Family==fam & indv$Generation=='F3'])
snp_gz <- gzfile(paste0('../../data/sstacks/',fam,'/',mother,'.snps.tsv.gz'),"rt")
snp_mother <- read.table(snp_gz); close(snp_gz)
hom_loc <- snp_mother %>% group_by(V3) %>% filter(all(V5=='O'))
hom_ID_local <- unique(hom_loc$V3)
match_gz <- gzfile(paste0('../../data/sstacks/',fam,'/',mother,'.matches.tsv.gz'),"rt")
match_mother <- read.table(match_gz); close(match_gz)
hom_ID_global <- unique(match_mother$V3[match_mother$V4 %in% hom_ID_local])
hom_ID_global
View(tmp_stat)
View(sum_stat)
# Computing CSD-ness
male_stat <- sum_stat[sum_stat$Pop.ID=="M",c('Chr','BP','Obs.Hom', 'fam', 'N',"Locus.ID")]
female_stat <- sum_stat[sum_stat$Pop.ID=="F",c('Chr','BP','Obs.Het', 'fam', 'N')]
CSD_like <- merge(male_stat,female_stat,by=c('Chr','BP','fam'))
#CSD_like$CSD <- (CSD_like$Obs.Hom+CSD_like$Obs.Het)*(CSD_like$N.x+CSD_like$N.y)/2
CSD_like$CSD <- (CSD_like$Obs.Hom+CSD_like$Obs.Het)/2
CSD_like <- rename(CSD_like, Nm=N.x,Nf=N.y, Male.Hom=Obs.Hom, Fem.Het=Obs.Het)
#CSD_like <- CSD_like[CSD_like$Nf>1 & CSD_like$Nm>1,]
# Keeping only chromosomes (removing contigs)
CSD_like <- CSD_like %>% arrange(Chr, BP)
chrom <- CSD_like[grep("chr.*", CSD_like$Chr),]
chrom$pos = paste(chrom$Chr,chrom$BP, sep="_")
chrom$Chr=droplevels(chrom$Chr)
genomic_pos <- function(snp){
# Computing total basepair position in genome as start(chrom)+bp
gen_pos <- as.numeric(snp["BP"]) + chrom_sizes[chrom_sizes$chr==snp["Chr"],"start"]
return(gen_pos)
}
chrom$tot_BP <-apply(X = chrom,MARGIN = 1, FUN=genomic_pos)
compact_chrom <- chrom %>%
group_by(Locus.ID) %>%
summarise(avg=mean(CSD), BP=mean(tot_BP)) %>%
arrange(BP)
plot(compact_chrom$BP, compact_chrom$avg, type="l", ylab='prop. CSD', xlab="genomic position",
main="Proportion of CSD individuals, averaged across families")
abline(v=chrom_sizes$start, lty=2,col="blue")
text(x = chrom_sizes$mid,y=0.2,labels = chrom_sizes$chrom)
highCSD <- chrom %>%
group_by(fam) %>%
filter(CSD==max(CSD))
top_CSD <- chrom[chrom$CSD>=0.8,]
hist(top_CSD$tot_BP,breaks=100, main="Top CSD candidates", xlab="Genomic position", ylab="N hits >= 0.8", col="grey")
abline(v=chrom_sizes$start, lty=2,col="blue")
text(x = chrom_sizes$mid,y=17,labels = chrom_sizes$chrom)
ggplot(data=chrom, aes(x=tot_BP, y=CSD))+ geom_line() +
facet_wrap(~fam,drop = F) + #geom_text(data=highCSD,aes(label=pos, y=CSD), size=1.9)+
geom_vline(data=chrom_sizes, aes(xintercept=start), col="blue", lty=2) +
ylab("Prop.CSD")
ggplot(data=chrom, aes(x=tot_BP, y=CSD, col=fam))+ geom_line() +
#geom_text(data=highCSD,aes(label=pos, y=CSD), size=1.9)+
geom_vline(data=chrom_sizes, aes(xintercept=start), col="blue", lty=2) +
ylab("Prop.CSD")
View(sum_stat)
load_packages <- function(){all(require(ggplot2), require(dplyr), require(readr))}
if(!suppressMessages(require(tidyverse))){
stopifnot(load_packages())
}
in_file <- '../../data/ploidy/thresholds/m2'
load_packages <- function(){all(require(ggplot2), require(dplyr), require(readr))}
if(!suppressMessages(require(tidyverse))){
stopifnot(load_packages())
}
in_file <- commandArgs(trailingOnly = TRUE)  # Folder containing input tables
#' ploidy_plot
#' Produces one barplot per families representing the proportion of homozygous SNPs
#' for of all individuals, along with their state (mother, daughter, haploid son,
#' diploid son)
#' @param ploid_tbl input table containing all individuals
#' @param thresh filename of the table, showing threshold multiplier and transformation
#'
#' @return Nothing, saves a plot into a folder
ploidy_plot <- function(ploid_tbl,thresh, type='bar'){
group_stats <- ploid_tbl %>%  # Computing summary stats for each family
filter(Generation == 'F4' & Sex == 'F') %>%  # Computing from daughters only
group_by(Family) %>%
summarise_at(.cols=c("HOM"),.funs = c("mean","sd")) %>%
mutate(state = "Daughters") %>%  # These are all daughters (used for plotting)
mutate(mid_x = n()/2)  # Graphical parameter for plots
group_stats$sd[is.na(group_stats$sd)] <- 0
# Producing barplot faceted by family, with mean and standard deviation displayed
# as segments. Colors represent individuals' states.
if(type=='bar'){
gg <- ggplot(data = ploid_tbl, aes(x = factor(HOM), y = HOM,fill = state))+
geom_bar(stat = 'identity') +
geom_hline(data = group_stats, aes(yintercept = mean)) +
geom_segment(data = group_stats,aes(x=mid_x,xend=mid_x,y=mean-sd,yend=mean+sd)) +
theme(axis.text.x = element_blank()) + facet_wrap(~Family,drop=T, scale='free') +
xlab("Individuals") + ylab("Homozygosity") + ggtitle(thresh)
out_folder <- 'barplots'
} else{
gg <- ggplot(data = ploid_tbl, aes(x = HOM))+
geom_density(data = ploid_tbl[ploid_tbl$state!="Mothers",], alpha = 0.3,aes(fill=Sex)) +  # Daughters vs Sons as density area
#geom_density(alpha = 0.1, col="green") +  # All individuals in family showed by green density curve
geom_point(data = ploid_tbl[ploid_tbl$state=="Mothers",], aes(y=0, col=state)) +  # Showing mother as a dot
geom_vline(data = group_stats, aes(xintercept = (mean + 2* sd)), col='red', lty=2) +
theme(axis.text.x = element_blank()) + facet_wrap(~Family,drop=T, scale='free') +
xlab("Homozygosity") + ylab("Density") + ggtitle(paste("Threshold ", thresh, sep=" "))
out_folder <- 'density'
}
pdf(paste0('data/ploidy/plots/', out_folder,'/',thresh,'.pdf'))  # Opening pdf connection
print(gg)  # Saving plot
dev.off()  # Closing connection
}
in_data <- read_tsv(in_file,col_names = T)  # Reading files sequentially
in_data %<>%   # Erasing original variable
mutate(state=paste0(Generation,Sex,Ploidy)) %>%  # New column containing state information
rename(Fis=F)  # Renaming inbreeding coefficient column (F is colliding with 'FALSE')
in_data$state <-recode_factor(in_data$state, "F3FD" = "Mothers",
"F4FD" = "Daughters",
"F4MH" = "1N Sons",
"F4MD" = "2N Sons")
ploidy_plot(in_data,basename(in_file))  # Calling plotting function
load_packages <- function(){all(require(ggplot2), require(dplyr), require(readr))}
if(!suppressMessages(require(tidyverse))){
stopifnot(load_packages())
}
in_file <- '../../data/ploidy/thresholds/m2'
ploidy_plot <- function(ploid_tbl,thresh, type='bar'){
group_stats <- ploid_tbl %>%  # Computing summary stats for each family
filter(Generation == 'F4' & Sex == 'F') %>%  # Computing from daughters only
group_by(Family) %>%
summarise_at(.cols=c("HOM"),.funs = c("mean","sd")) %>%
mutate(state = "Daughters") %>%  # These are all daughters (used for plotting)
mutate(mid_x = n()/2)  # Graphical parameter for plots
group_stats$sd[is.na(group_stats$sd)] <- 0
# Producing barplot faceted by family, with mean and standard deviation displayed
# as segments. Colors represent individuals' states.
if(type=='bar'){
gg <- ggplot(data = ploid_tbl, aes(x = factor(HOM), y = HOM,fill = state))+
geom_bar(stat = 'identity') +
geom_hline(data = group_stats, aes(yintercept = mean)) +
geom_segment(data = group_stats,aes(x=mid_x,xend=mid_x,y=mean-sd,yend=mean+sd)) +
theme(axis.text.x = element_blank()) + facet_wrap(~Family,drop=T, scale='free') +
xlab("Individuals") + ylab("Homozygosity") + ggtitle(thresh)
out_folder <- 'barplots'
} else{
gg <- ggplot(data = ploid_tbl, aes(x = HOM))+
geom_density(data = ploid_tbl[ploid_tbl$state!="Mothers",], alpha = 0.3,aes(fill=Sex)) +  # Daughters vs Sons as density area
#geom_density(alpha = 0.1, col="green") +  # All individuals in family showed by green density curve
geom_point(data = ploid_tbl[ploid_tbl$state=="Mothers",], aes(y=0, col=state)) +  # Showing mother as a dot
geom_vline(data = group_stats, aes(xintercept = (mean + 2* sd)), col='red', lty=2) +
theme(axis.text.x = element_blank()) + facet_wrap(~Family,drop=T, scale='free') +
xlab("Homozygosity") + ylab("Density") + ggtitle(paste("Threshold ", thresh, sep=" "))
out_folder <- 'density'
}
pdf(paste0('data/ploidy/plots/', out_folder,'/',thresh,'.pdf'))  # Opening pdf connection
print(gg)  # Saving plot
dev.off()  # Closing connection
}
in_data <- read_tsv(in_file,col_names = T)  # Reading files sequentially
in_data %<>%   # Erasing original variable
mutate(state=paste0(Generation,Sex,Ploidy)) %>%  # New column containing state information
rename(Fis=F)  # Renaming inbreeding coefficient column (F is colliding with 'FALSE')
in_data$state <-recode_factor(in_data$state, "F3FD" = "Mothers",
"F4FD" = "Daughters",
"F4MH" = "1N Sons",
"F4MD" = "2N Sons")
ploidy_plot(in_data,basename(in_file))  # Calling plotting function
