ploidy_plot(.,basename(in_file))
View(ploid_tbl)
View(in_data)
ploid_tbl = in_data
ploidy_plot <- function(ploid_tbl,thresh){
print(ploid_tbl)
group_stats <- ploid_tbl %>%
filter(Generation == 'F4' & Sex == 'F') %>%
group_by(Family) %>%
summarise_at(.cols=c("Fis"),.funs = c("mean","sd")) %>%
mutate(state = F4FD)
gg <- ggplot(data = ploid_tbl, aes(x = factor(Fis), y = Fis,fill = state))+
geom_bar(stat = 'identity') +
geom_hline(data = group_stats, aes(yintercept = mean)) +
geom_segment(data = group_stats,aes(x=0,xend=0,y=mean-sd,yend=mean+sd,color="#00ff00")) +
theme(axis.text.x = element_blank()) + facet_wrap(~Family,drop=T, scale='free') +
xlab("Individuals") + ylab("Inbreeding coefficient") + ggtitle(thresh)
gg
return(print(gg))
}
in_data %>%
mutate(state=paste0(Generation,Sex,Ploidy)) %>%
rename(Fis=F) %>%
ploidy_plot(.,basename(in_file))
View(ploid_tbl)
ploidy_plot <- function(ploid_tbl,thresh){
print(ploid_tbl)
group_stats <- ploid_tbl %>%
filter(Generation == 'F4' & Sex == 'F') %>%
group_by(Family) %>%
summarise_at(.cols=c("Fis"),.funs = c("mean","sd")) %>%
mutate(state = "F4FD")
gg <- ggplot(data = ploid_tbl, aes(x = factor(Fis), y = Fis,fill = state))+
geom_bar(stat = 'identity') +
geom_hline(data = group_stats, aes(yintercept = mean)) +
geom_segment(data = group_stats,aes(x=0,xend=0,y=mean-sd,yend=mean+sd,color="#00ff00")) +
theme(axis.text.x = element_blank()) + facet_wrap(~Family,drop=T, scale='free') +
xlab("Individuals") + ylab("Inbreeding coefficient") + ggtitle(thresh)
gg
return(print(gg))
}
in_data %>%
mutate(state=paste0(Generation,Sex,Ploidy)) %>%
rename(Fis=F) %>%
ploidy_plot(.,basename(in_file))
ploidy_plot <- function(ploid_tbl,thresh){
group_stats <- ploid_tbl %>%
filter(Generation == 'F4' & Sex == 'F') %>%
group_by(Family) %>%
summarise_at(.cols=c("Fis"),.funs = c("mean","sd")) %>%
mutate(state = "F4FD")
gg <- ggplot(data = ploid_tbl, aes(x = factor(Fis), y = Fis,fill = state))+
geom_bar(stat = 'identity') +
geom_hline(data = group_stats, aes(yintercept = mean)) +
geom_segment(data = group_stats,aes(x=length(levels(factor(Fis)))/2,xend=0,y=mean-sd,yend=mean+sd)) +
theme(axis.text.x = element_blank()) + facet_wrap(~Family,drop=T, scale='free') +
xlab("Individuals") + ylab("Inbreeding coefficient") + ggtitle(thresh)
gg
return(print(gg))
}
in_data %>%
mutate(state=paste0(Generation,Sex,Ploidy)) %>%
rename(Fis=F) %>%
ploidy_plot(.,basename(in_file))
ploidy_plot <- function(ploid_tbl,thresh){
group_stats <- ploid_tbl %>%
filter(Generation == 'F4' & Sex == 'F') %>%
group_by(Family) %>%
summarise_at(.cols=c("Fis"),.funs = c("mean","sd")) %>%
mutate(state = "F4FD")
gg <- ggplot(data = ploid_tbl, aes(x = factor(Fis), y = Fis,fill = state))+
geom_bar(stat = 'identity') +
geom_hline(data = group_stats, aes(yintercept = mean)) +
geom_segment(data = group_stats,aes(x=length(levels(factor(ploid_tbl$Fis)))/2,xend=0,y=mean-sd,yend=mean+sd)) +
theme(axis.text.x = element_blank()) + facet_wrap(~Family,drop=T, scale='free') +
xlab("Individuals") + ylab("Inbreeding coefficient") + ggtitle(thresh)
gg
return(print(gg))
}
in_data %>%
mutate(state=paste0(Generation,Sex,Ploidy)) %>%
rename(Fis=F) %>%
ploidy_plot(.,basename(in_file))
ploidy_plot <- function(ploid_tbl,thresh){
group_stats <- ploid_tbl %>%
filter(Generation == 'F4' & Sex == 'F') %>%
group_by(Family) %>%
summarise_at(.cols=c("Fis"),.funs = c("mean","sd")) %>%
mutate(state = "F4FD")
gg <- ggplot(data = ploid_tbl, aes(x = factor(Fis), y = Fis,fill = state))+
geom_bar(stat = 'identity') +
geom_hline(data = group_stats, aes(yintercept = mean)) +
geom_segment(data = group_stats,aes(x=length(levels(factor(ploid_tbl$Fis)))/2,xend=length(levels(factor(ploid_tbl$Fis)))/2,y=mean-sd,yend=mean+sd)) +
theme(axis.text.x = element_blank()) + facet_wrap(~Family,drop=T, scale='free') +
xlab("Individuals") + ylab("Inbreeding coefficient") + ggtitle(thresh)
gg
return(print(gg))
}
in_data %>%
mutate(state=paste0(Generation,Sex,Ploidy)) %>%
rename(Fis=F) %>%
ploidy_plot(.,basename(in_file))
ploidy_plot <- function(ploid_tbl,thresh){
group_stats <- ploid_tbl %>%
filter(Generation == 'F4' & Sex == 'F') %>%
group_by(Family) %>%
summarise_at(.cols=c("Fis"),.funs = c("mean","sd")) %>%
mutate(state = "F4FD") %>%
mutate(mid_x = n(.)/2)
gg <- ggplot(data = ploid_tbl, aes(x = factor(Fis), y = Fis,fill = state))+
geom_bar(stat = 'identity') +
geom_hline(data = group_stats, aes(yintercept = mean)) +
geom_segment(data = group_stats,aes(x=mid_x,xend=mid_x,y=mean-sd,yend=mean+sd)) +
theme(axis.text.x = element_blank()) + facet_wrap(~Family,drop=T, scale='free') +
xlab("Individuals") + ylab("Inbreeding coefficient") + ggtitle(thresh)
gg
return(print(gg))
}
in_data %>%
mutate(state=paste0(Generation,Sex,Ploidy)) %>%
rename(Fis=F) %>%
ploidy_plot(.,basename(in_file))
n()
ploidy_plot <- function(ploid_tbl,thresh){
group_stats <- ploid_tbl %>%
filter(Generation == 'F4' & Sex == 'F') %>%
group_by(Family) %>%
summarise_at(.cols=c("Fis"),.funs = c("mean","sd")) %>%
mutate(state = "F4FD") %>%
mutate(mid_x = n()/2)
gg <- ggplot(data = ploid_tbl, aes(x = factor(Fis), y = Fis,fill = state))+
geom_bar(stat = 'identity') +
geom_hline(data = group_stats, aes(yintercept = mean)) +
geom_segment(data = group_stats,aes(x=mid_x,xend=mid_x,y=mean-sd,yend=mean+sd)) +
theme(axis.text.x = element_blank()) + facet_wrap(~Family,drop=T, scale='free') +
xlab("Individuals") + ylab("Inbreeding coefficient") + ggtitle(thresh)
gg
return(print(gg))
}
in_data %>%
mutate(state=paste0(Generation,Sex,Ploidy)) %>%
rename(Fis=F) %>%
ploidy_plot(.,basename(in_file))
ploidy_plot <- function(ploid_tbl,thresh){
group_stats <- ploid_tbl %>%
filter(Generation == 'F4' & Sex == 'F') %>%
group_by(Family) %>%
summarise_at(.cols=c("Fis"),.funs = c("mean","sd")) %>%
mutate(state = "Daughters") %>%
mutate(mid_x = n()/2)
gg <- ggplot(data = ploid_tbl, aes(x = factor(Fis), y = Fis,fill = state))+
geom_bar(stat = 'identity') +
geom_hline(data = group_stats, aes(yintercept = mean)) +
geom_segment(data = group_stats,aes(x=mid_x,xend=mid_x,y=mean-sd,yend=mean+sd)) +
theme(axis.text.x = element_blank()) + facet_wrap(~Family,drop=T, scale='free') +
xlab("Individuals") + ylab("Inbreeding coefficient") + ggtitle(thresh)
#pdf(paste0('data/ploidy/plots/',thresh,'.pdf'))
gg
#dev.off()
}
in_data %>%
mutate(state=paste0(Generation,Sex,Ploidy)) %>%
rename(Fis=F) %>%
mutate(state = fct_recode(state, "F3FD" = "Mothers",
"F4FD" = "Daughters",
"F4MH" = "1N Sons",
"F4MD" = "2N Sons")) %>%
ploidy_plot(.,basename(in_file))
library(tidyverse)
in_data %>%
mutate(state=paste0(Generation,Sex,Ploidy)) %>%
rename(Fis=F) %>%
recode(state, "F3FD" = "Mothers",
"F4FD" = "Daughters",
"F4MH" = "1N Sons",
"F4MD" = "2N Sons") %>%
ploidy_plot(.,basename(in_file))
in_data %>%
mutate(state=paste0(Generation,Sex,Ploidy)) %>%
rename(Fis=F) %>%
recode_factor(state, "F3FD" = "Mothers",
"F4FD" = "Daughters",
"F4MH" = "1N Sons",
"F4MD" = "2N Sons") %>%
ploidy_plot(.,basename(in_file))
in_data %>%
mutate(state=paste0(Generation,Sex,Ploidy)) %>%
rename(Fis=F) %>%
recode_factor(state, "F3FD" = "Mothers",
"F4FD" = "Daughters",
"F4MH" = "1N Sons",
"F4MD" = "2N Sons")
in_data %>%
mutate(state=as.factor(paste0(Generation,Sex,Ploidy))) %>%
rename(Fis=F) %>%
recode_factor(state, "F3FD" = "Mothers",
"F4FD" = "Daughters",
"F4MH" = "1N Sons",
"F4MD" = "2N Sons") %>%
ploidy_plot(.,basename(in_file))
in_data %>%
mutate(state=as.factor(paste0(Generation,Sex,Ploidy))) %>%
rename(Fis=F) %>%
recode_factor(.,state, "F3FD" = "Mothers",
"F4FD" = "Daughters",
"F4MH" = "1N Sons",
"F4MD" = "2N Sons") %>%
ploidy_plot(.,basename(in_file))
in_data %>%
mutate(state=paste0(Generation,Sex,Ploidy)) %>%
rename(Fis=F) %>%
recode_factor(state, c("F3FD" = "Mothers",
"F4FD" = "Daughters",
"F4MH" = "1N Sons",
"F4MD" = "2N Sons")) %>%
)
in_data %>%
mutate(state=paste0(Generation,Sex,Ploidy)) %>%
rename(Fis=F) %>%
recode_factor(state, c("F3FD" = "Mothers",
"F4FD" = "Daughters",
"F4MH" = "1N Sons",
"F4MD" = "2N Sons"))
in_data %<>%
mutate(state=paste0(Generation,Sex,Ploidy)) %>%
rename(Fis=F)
in_data
recode_factor(in_data$state, "F3FD" = "Mothers",
"F4FD" = "Daughters",
"F4MH" = "1N Sons",
"F4MD" = "2N Sons")
in_data$state <-recode_factor(in_data$state, "F3FD" = "Mothers",
"F4FD" = "Daughters",
"F4MH" = "1N Sons",
"F4MD" = "2N Sons")
ploidy_plot(.,basename(in_file))
ploidy_plot(in_data,basename(in_file))
ploidy_plot(in_data,basename(in_file))
in_folder <- '../../data/ploidy/'
haplo_prop <- tibble(threshold = numeric(0),
Daughters = numeric(0),
Mothers = numeric(0)
)
library(tidyverse)
haplo_prop <- tibble(threshold = numeric(0),
Daughters = numeric(0),
Mothers = numeric(0)
)
group_stats <- ploid_tbl %>%  # Computing summary stats for each family
filter(Generation == 'F4' & Sex == 'F') %>%  # Computing from daughters only
group_by(Family) %>%
summarise_at(.cols=c("Fis"),.funs = c("mean","sd")) %>%
mutate(state = "Daughters") %>%  # These are all daughters (used for plotting)
mutate(mid_x = n()/2)  # Graphical parameter for plots
# Producing barplot faceted by family, with mean and standard deviation displayed
# as segments. Colors represent individuals' states.
gg <- ggplot(data = ploid_tbl, aes(x = factor(Fis), y = Fis,fill = state))+
geom_bar(stat = 'identity') +
geom_hline(data = group_stats, aes(yintercept = mean)) +
geom_segment(data = group_stats,aes(x=mid_x,xend=mid_x,y=mean-sd,yend=mean+sd)) +
theme(axis.text.x = element_blank()) + facet_wrap(~Family,drop=T, scale='free') +
xlab("Individuals") + ylab("Inbreeding coefficient") + ggtitle(thresh)
pdf(paste0('data/ploidy/plots/',thresh,'.pdf'))  # Opening pdf connection
print(gg)  # Saving plot
dev.off()  # Closing connection
}
ploidy_plot <- function(ploid_tbl,thresh){
group_stats <- ploid_tbl %>%  # Computing summary stats for each family
filter(Generation == 'F4' & Sex == 'F') %>%  # Computing from daughters only
group_by(Family) %>%
summarise_at(.cols=c("Fis"),.funs = c("mean","sd")) %>%
mutate(state = "Daughters") %>%  # These are all daughters (used for plotting)
mutate(mid_x = n()/2)  # Graphical parameter for plots
# Producing barplot faceted by family, with mean and standard deviation displayed
# as segments. Colors represent individuals' states.
gg <- ggplot(data = ploid_tbl, aes(x = factor(Fis), y = Fis,fill = state))+
geom_bar(stat = 'identity') +
geom_hline(data = group_stats, aes(yintercept = mean)) +
geom_segment(data = group_stats,aes(x=mid_x,xend=mid_x,y=mean-sd,yend=mean+sd)) +
theme(axis.text.x = element_blank()) + facet_wrap(~Family,drop=T, scale='free') +
xlab("Individuals") + ylab("Inbreeding coefficient") + ggtitle(thresh)
pdf(paste0('data/ploidy/plots/',thresh,'.pdf'))  # Opening pdf connection
print(gg)  # Saving plot
dev.off()  # Closing connection
}
for(in_file in list.files(in_folder)){  # Iterating over input lists
in_data <- read_tsv(paste0(in_folder,in_file),col_names = T)  # Reading files sequentially
# Preparing data:
in_data %<>%   # Erasing original variable
mutate(state=paste0(Generation,Sex,Ploidy)) %>%  # New column containing state information
rename(Fis=F)  # Renaming inbreeding coefficient column (F is colliding with 'FALSE')
# Changing individual states by Human-friendly names
in_data$state <-recode_factor(in_data$state, "F3FD" = "Mothers",  #
"F4FD" = "Daughters",
"F4MH" = "1N Sons",
"F4MD" = "2N Sons")
ploidy_plot(in_data,basename(in_file))  # Calling plotting function
}
list.files(in_folder)
in_file <- 'm1'
in_data %<>%   # Erasing original variable
mutate(state=paste0(Generation,Sex,Ploidy)) %>%  # New column containing state information
rename(Fis=F)  # Renaming inbreeding coefficient column (F is colliding with 'FALSE')
# Changing individual states by Human-friendly names
in_data <- read_tsv(paste0(in_folder,in_file),col_names = T)  # Reading files sequentially
in_data <- read_tsv(paste0(in_folder,in_file),col_names = T)  # Reading files sequentially
View(in_data)
library(tidyverse)
in_path <- "../../data/ploidy/thresholds/m2"
# in_path <- commandArgs(trailingOnly = T)[1]
in_table <- read.table(in_path, header=T)
sum_table <- in_table %>%
filter(Generation=='F4') %>%
select(Sex, Family, Ploidy) %>%
group_by(Family) %>%
unite(identity, c(Family, Sex, Ploidy), remove=T, sep="_") %>%
table(.)
extr_ID <- function(family, sex, ploidy){
ID_count <- sum_table[names(sum_table)==paste(family, sex, ploidy, sep='_')]
return(ifelse(test = length(ID_count)>0, yes = ID_count, no = 0))
}
par(mfrow=c(2, 6))
for(i in LETTERS){
if(i %in% levels(in_table$Family)){
fam_count <- rep(0, 3)
fam_count[1] <- extr_ID(i, 'M', 'D')
fam_count[2] <- extr_ID(i, 'M', 'H')
fam_count[3] <- extr_ID(i, 'F', 'D')
tmp_table <- data.frame(identity = c('Daughter', 'Haploid Son', 'Diploid Son'),
count = fam_count)
print(tmp_table)
pie(x = tmp_table$count, labels = tmp_table$identity, main=i)
}
}
store_fam_ploidy <- data.frame(c(Family=numeric(0), daughters=numeric(0), haploid_sons=numeric(0), diploid_sons=numeric(0)))
store_fam_ploidy
append(i,fam_count)
extr_ID(i, 'M', 'D')
fam_count
tmp_table
rbind(store_fam_ploidy, append(i,fam_count))
store_fam_ploidy <- data.frame(c(Family=numeric(0), daughters=numeric(0), haploid_sons=numeric(0), diploid_sons=numeric(0)))
par(mfrow=c(2, 6))
for(i in LETTERS){
if(i %in% levels(in_table$Family)){
fam_count <- rep(0, 3)
fam_count[1] <- extr_ID(i, 'M', 'D')
fam_count[2] <- extr_ID(i, 'M', 'H')
fam_count[3] <- extr_ID(i, 'F', 'D')
tmp_table <- data.frame(identity = c('Diploid Son', 'Haploid Son', 'Daughter'),
count = fam_count)
store_fam_ploidy <- rbind(store_fam_ploidy, append(i,fam_count))
pie(x = tmp_table$count, labels = tmp_table$identity, main=i)
}
}
warnings()
store_fam_ploidy
t
store_fam_ploidy <- data.frame(c(Family=numeric(0), daughters=numeric(0), haploid_sons=numeric(0), diploid_sons=numeric(0)))
par(mfrow=c(2, 6))
for(i in LETTERS){
if(i %in% levels(in_table$Family)){
fam_count <- rep(0, 3)
fam_count[1] <- extr_ID(i, 'M', 'D')
fam_count[2] <- extr_ID(i, 'M', 'H')
fam_count[3] <- extr_ID(i, 'F', 'D')
tmp_table <- data.frame(identity = c('Diploid Son', 'Haploid Son', 'Daughter'),
count = fam_count)
store_fam_ploidy <- rbind(store_fam_ploidy, append(i,fam_count))
pie(x = tmp_table$count, labels = tmp_table$identity, main=i)
}
}
warnings()
par(mfrow=c(2, 6))
for(i in LETTERS){
if(i %in% levels(in_table$Family)){
fam_count <- rep(0, 3)
fam_count[1] <- extr_ID(i, 'M', 'D')
fam_count[2] <- extr_ID(i, 'M', 'H')
fam_count[3] <- extr_ID(i, 'F', 'D')
tmp_table <- data.frame(identity = c('Diploid Son', 'Haploid Son', 'Daughter'),
count = fam_count)
store_fam_ploidy <- rbind(store_fam_ploidy, as.numeric(append(i,fam_count)))
pie(x = tmp_table$count, labels = tmp_table$identity, main=i)
}
}
warnings()
length(levels(in_table$Family))
store_fam_ploidy <- matrix(nrow=length(levels(in_table$Family)), ncol = 3)
store_fam_ploidy
as.data.frame(store_fam_ploidy)
colnames(store_fam_ploidy)
colnames(store_fam_ploidy) <- c('Family', 'diploid_son', 'haploid_son', 'daughter')
store_fam_ploidy <- as.data.frame(matrix(nrow=length(levels(in_table$Family)), ncol = f))
store_fam_ploidy <- as.data.frame(matrix(nrow=length(levels(in_table$Family)), ncol = 4))
colnames(store_fam_ploidy) <- c('Family', 'diploid_son', 'haploid_son', 'daughter')
store_fam_ploidy
rownames(store_fam_ploidy) <- as.character(levels(in_table$Family))
store_fam_ploidy
store_fam_ploidy <- as.data.frame(matrix(nrow=length(levels(in_table$Family)), ncol = 4))
colnames(store_fam_ploidy) <- c('Family', 'diploid_son', 'haploid_son', 'daughter')
rownames(store_fam_ploidy) <- as.character(levels(in_table$Family))
par(mfrow=c(2, 6))
for(i in LETTERS){
if(i %in% levels(in_table$Family)){
fam_count <- rep(0, 3)
fam_count[1] <- extr_ID(i, 'M', 'D')
fam_count[2] <- extr_ID(i, 'M', 'H')
fam_count[3] <- extr_ID(i, 'F', 'D')
tmp_table <- data.frame(identity = c('Diploid Son', 'Haploid Son', 'Daughter'),
count = fam_count)
store_fam_ploidy[i,] <- append(i,fam_count)
pie(x = tmp_table$count, labels = tmp_table$identity, main=i)
}
}
store_fam_ploidy
basename(in_path)
in_path <- "../../data/ploidy/thresholds/m2"
in_path <- commandArgs(trailingOnly = T)[1]  # Taking ploidy list as CL argument
in_table <- read.table(in_path, header=T)
sum_table <- in_table %>%
filter(Generation=='F4') %>%  # Excluding mothers (F3 generation)
select(Sex, Family, Ploidy) %>%  # Subsetting only factors of interest
group_by(Family) %>%
unite(identity, c(Family, Sex, Ploidy), remove=T, sep="_") %>%  # uniting 3 columns into 1 containing 3 informations
table(.)  # Getting counts for each combination (all individuals together)
extr_ID <- function(family, sex, ploidy){
# Function for extracting counts of haploid males/diploid males/females per family
ID_count <- sum_table[names(sum_table)==paste(family, sex, ploidy, sep='_')]
return(ifelse(test = length(ID_count)>0, yes = ID_count, no = 0))
}
store_fam_ploidy <- as.data.frame(matrix(nrow=length(levels(in_table$Family)), ncol = 4))
colnames(store_fam_ploidy) <- c('Family', 'diploid_son', 'haploid_son', 'daughter')
rownames(store_fam_ploidy) <- as.character(levels(in_table$Family))
pdf(paste0('reports/lab_book/ploidy_per_fam/', basename(in_path), .pdf))
par(mfrow=c(2, 6))
for(i in LETTERS){  # Producing a piechart for each family
if(i %in% levels(in_table$Family)){
fam_count <- rep(0, 3)
fam_count[1] <- extr_ID(i, 'M', 'D')
fam_count[2] <- extr_ID(i, 'M', 'H')
fam_count[3] <- extr_ID(i, 'F', 'D')
tmp_table <- data.frame(identity = c('Diploid Son', 'Haploid Son', 'Daughter'),
count = fam_count)
store_fam_ploidy[i,] <- append(i,fam_count)
pie(x = tmp_table$count, labels = tmp_table$identity, main=i)
}
}
def.off()
pdf(paste0('reports/lab_book/ploidy_per_fam/', basename(in_path), .pdf))
par(mfrow=c(2, 6))
for(i in LETTERS){  # Producing a piechart for each family
if(i %in% levels(in_table$Family)){
fam_count <- rep(0, 3)
fam_count[1] <- extr_ID(i, 'M', 'D')
fam_count[2] <- extr_ID(i, 'M', 'H')
fam_count[3] <- extr_ID(i, 'F', 'D')
tmp_table <- data.frame(identity = c('Diploid Son', 'Haploid Son', 'Daughter'),
count = fam_count)
store_fam_ploidy[i,] <- append(i,fam_count)
pie(x = tmp_table$count, labels = tmp_table$identity, main=i)
}
}
dev.off()
pdf(paste0('reports/lab_book/ploidy_per_fam/', basename(in_path), .pdf))
par(mfrow=c(2, 6))
for(i in LETTERS){  # Producing a piechart for each family
if(i %in% levels(in_table$Family)){
fam_count <- rep(0, 3)
fam_count[1] <- extr_ID(i, 'M', 'D')
fam_count[2] <- extr_ID(i, 'M', 'H')
fam_count[3] <- extr_ID(i, 'F', 'D')
tmp_table <- data.frame(identity = c('Diploid Son', 'Haploid Son', 'Daughter'),
count = fam_count)
store_fam_ploidy[i,] <- append(i,fam_count)
pie(x = tmp_table$count, labels = tmp_table$identity, main=i)
}
}
dev.off()
in_path <- "../../data/ploidy/thresholds/m2"
in_path <- commandArgs(trailingOnly = T)[1]  # Taking ploidy list as CL argument
in_path <- "../../data/ploidy/thresholds/m2"
in_table <- read.table(in_path, header=T)
sum_table <- in_table %>%
filter(Generation=='F4') %>%  # Excluding mothers (F3 generation)
select(Sex, Family, Ploidy) %>%  # Subsetting only factors of interest
group_by(Family) %>%
unite(identity, c(Family, Sex, Ploidy), remove=T, sep="_") %>%  # uniting 3 columns into 1 containing 3 informations
table(.)  # Getting counts for each combination (all individuals together)
extr_ID <- function(family, sex, ploidy){
# Function for extracting counts of haploid males/diploid males/females per family
ID_count <- sum_table[names(sum_table)==paste(family, sex, ploidy, sep='_')]
return(ifelse(test = length(ID_count)>0, yes = ID_count, no = 0))
}
store_fam_ploidy <- as.data.frame(matrix(nrow=length(levels(in_table$Family)), ncol = 4))
colnames(store_fam_ploidy) <- c('Family', 'diploid_son', 'haploid_son', 'daughter')
rownames(store_fam_ploidy) <- as.character(levels(in_table$Family))
pdf(paste0('reports/lab_book/ploidy_per_fam/', basename(in_path), ".pdf"))
par(mfrow=c(2, 6))
for(i in LETTERS){  # Producing a piechart for each family
if(i %in% levels(in_table$Family)){
fam_count <- rep(0, 3)
fam_count[1] <- extr_ID(i, 'M', 'D')
fam_count[2] <- extr_ID(i, 'M', 'H')
fam_count[3] <- extr_ID(i, 'F', 'D')
tmp_table <- data.frame(identity = c('Diploid Son', 'Haploid Son', 'Daughter'),
count = fam_count)
store_fam_ploidy[i,] <- append(i,fam_count)
pie(x = tmp_table$count, labels = tmp_table$identity, main=i)
}
}
dev.off()
