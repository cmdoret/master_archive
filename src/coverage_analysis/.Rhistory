ggplot(data=fixed, aes(x=MEAN_DEPTH,fill=Family))+geom_histogram()
fixed$Family <- as.character(fixed$Family)
fam_sites <- fixed %>%
select(Family,N_SITES) %>%
group_by(Family) %>%
summarise(avg=mean(N_SITES))
fixed$Family <- factor(fixed$Family,levels = fam_sites$Family[order(fam_depth$avg)],ordered = T)
ggplot(data=fixed,aes(x=N_SITES,y=Family))+geom_joy2(col = "grey10", fill = "grey70")+ggtitle("Number of sites per sample, by family (all samples)") + theme_minimal()
library(ggplot2);library(ggjoy)
fixed <- read.table("../../../data/ploidy/thresholds/fixed",header=T)
fixed$Family <- as.character(fixed$Family)
fam_sites <- fixed %>%
select(Family,N_SITES) %>%
group_by(Family) %>%
summarise(avg=mean(N_SITES))
fixed$Family <- factor(fixed$Family,levels = fam_sites$Family[order(fam_depth$avg)],ordered = T)
ggplot(data=fixed,aes(x=N_SITES,y=Family))+geom_joy2(col = "grey10", fill = "grey70")+ggtitle("Number of sites per sample, by family (all samples)") + theme_minimal()
fixed$Family <- factor(fixed$Family,levels = fam_sites$Family[order(fam_sites$avg)],ordered = T)
ggplot(data=fixed,aes(x=N_SITES,y=Family))+geom_joy2(col = "grey10", fill = "grey70")+ggtitle("Number of sites per sample, by family (all samples)") + theme_minimal()
fam_sites <- fixed %>%
select(Family,N_SITES) %>%
group_by(Family) %>%
summarise(avg=mean(N_SITES))
library(ggplot2);library(ggjoy);library(tidyr)
fixed <- read.table("../../../data/ploidy/thresholds/fixed",header=T)
fixed$Family <- as.character(fixed$Family)
fam_sites <- fixed %>%
select(Family,N_SITES) %>%
group_by(Family) %>%
summarise(avg=mean(N_SITES))
library(ggplot2);library(ggjoy);library(dplyr)
fixed <- read.table("../../../data/ploidy/thresholds/fixed",header=T)
fixed$Family <- as.character(fixed$Family)
fam_sites <- fixed %>%
select(Family,N_SITES) %>%
group_by(Family) %>%
summarise(avg=mean(N_SITES))
fixed$Family <- factor(fixed$Family,levels = fam_sites$Family[order(fam_sites$avg)],ordered = T)
ggplot(data=fixed,aes(x=N_SITES,y=Family))+geom_joy2(col = "grey10", fill = "grey70")+ggtitle("Number of sites per sample, by family (all samples)") + theme_minimal()
fam_sites <- fixed %>%
select(Family,MEAN_DEPTH) %>%
group_by(Family) %>%
summarise(avg=mean(MEAN_DEPTH))
fixed$Family <- factor(fixed$Family,levels = fam_depth$Family[order(fam_depth$avg)],ordered = T)
fam_depth <- fixed %>%
select(Family,MEAN_DEPTH) %>%
group_by(Family) %>%
summarise(avg=mean(MEAN_DEPTH))
fixed$Family <- factor(fixed$Family,levels = fam_depth$Family[order(fam_depth$avg)],ordered = T)
ggplot(data=fixed, aes(x=MEAN_DEPTH,fill=Family))+geom_histogram()
ggplot(data=fixed, aes(x=N_SITES, y=MEAN_DEPTH,col=Ploidy))+geom_point()+facet_wrap(~Family)
ggplot(data=fixed,aes(x=MEAN_DEPTH,y=Family))+geom_joy2(col = "grey10", fill = "grey70")+ggtitle("Mean depth per sample, by family (all samples)") + theme_minimal()
ggplot(data=fixed,aes(x=MEAN_DEPTH,y=Family))+geom_joy2(col = "grey10", fill = fam_depth$avg)+ggtitle("Mean depth per sample, by family (all samples)") + theme_minimal()
ggplot(data=fixed,aes(x=MEAN_DEPTH,y=Family))+geom_joy2(col = "grey10", fill = "grey70")+ggtitle("Mean depth per sample, by family (all samples)") + theme_minimal()
ggplot(data=fixed,aes(x=MEAN_DEPTH,y=Family, heaight=..count..))+geom_joy2(stat='binline',draw_baseline=F,col = "grey10", fill = "grey70")+ggtitle("Mean depth per sample, by family (all samples)") + theme_minimal()
ggplot(data=fixed,aes(x=MEAN_DEPTH,y=Family, heaight=..count..))+geom_joy2(stat='binline',draw_baseline=F,col = Sex, fill = "grey70")+ggtitle("Mean depth per sample, by family (all samples)") + theme_minimal()
ggplot(data=fixed,aes(x=MEAN_DEPTH,y=Family, heaight=..count..))+geom_joy2(stat='binline',draw_baseline=F, fill = Sex)+ggtitle("Mean depth per sample, by family (all samples)") + theme_minimal()
fixed
ggplot(data=fixed,aes(x=MEAN_DEPTH,y=Family, heaight=..count..))+geom_joy2(stat='binline',draw_baseline=F, fill = fixed$Sex)+ggtitle("Mean depth per sample, by family (all samples)") + theme_minimal()
ggplot(data=fixed,aes(x=MEAN_DEPTH,y=Family, heaight=..count.., fill=Sex))+geom_joy2(stat='binline',draw_baseline=F)+ggtitle("Mean depth per sample, by family (all samples)") + theme_minimal()
ggplot(data=fixed,aes(x=MEAN_DEPTH,y=Family, heaight=..count.., fill=Sex))+geom_joy2(stat='binline')+ggtitle("Mean depth per sample, by family (all samples)") + theme_minimal()
ggplot(data=fixed,aes(x=MEAN_DEPTH,y=Family, heaight=..count.., fill=Family))+geom_joy2(stat='binline')+ggtitle("Mean depth per sample, by family (all samples)") + theme_minimal()
ggplot(data=fixed,aes(x=MEAN_DEPTH,y=Family, heaight=..density.., fill=Family))+geom_joy2(stat='binline')+ggtitle("Mean depth per sample, by family (all samples)") + theme_minimal()
ggplot(data=fixed,aes(x=MEAN_DEPTH,y=Family, heaight=..count.., fill=Family))+geom_joy2(stat='binline')+ggtitle("Mean depth per sample, by family (all samples)") + theme_minimal()
fixed %>% group_by(Family) %>% mutate(avg=mean(MEAN_DEPTH))
ggplot(data=fixed,aes(x=MEAN_DEPTH,y=Family, height=..count.., fill=avg_depth))+geom_joy2(stat='binline')+ggtitle("Mean depth per sample, by family (all samples)") + theme_minimal()
fixed <- fixed %>%
group_by(Family) %>%
mutate(avg_depth=mean(MEAN_DEPTH))
ggplot(data=fixed,aes(x=MEAN_DEPTH,y=Family, height=..count.., fill=avg_depth))+geom_joy2(stat='binline')+ggtitle("Mean depth per sample, by family (all samples)") + theme_minimal()
library(viridis)
ggplot(data=fixed,aes(x=MEAN_DEPTH,y=Family, height=..count.., fill=avg_depth))+geom_joy2(stat='binline')+ggtitle("Mean depth per sample, by family (all samples)") + theme_minimal() + scale_fill_brewer(palette='viridis)
ggplot(data=fixed, aes(x=N_SITES, y=MEAN_DEPTH,col=Ploidy))+geom_point()+facet_wrap(~Family) +
ggtitle("Coverage versus number of sites per individual (all samples)")
ggplot(data=fixed,aes(x=MEAN_DEPTH,y=Family, height=..count.., fill=avg_depth))+geom_joy2(stat='binline')+ggtitle("Mean depth per sample, by family (all samples)") + theme_minimal() + scale_fill_brewer(palette='viridis')
ggplot(data=fixed,aes(x=MEAN_DEPTH,y=Family, height=..count.., fill=avg_depth))+geom_joy2(stat='binline')+ggtitle("Mean depth per sample, by family (all samples)") + theme_minimal() + scale_fill_brewer(palette='viridis')
ggplot(data=fixed,aes(x=MEAN_DEPTH,y=Family, height=..count.., fill=avg_depth))+geom_joy2(stat='binline')+ggtitle("Mean depth per sample, by family (all samples)") + theme_minimal() + scale_fill_viridis())
ggplot(data=fixed,aes(x=MEAN_DEPTH,y=Family, height=..count.., fill=avg_depth))+geom_joy2(stat='binline')+ggtitle("Mean depth per sample, by family (all samples)") + theme_minimal() + scale_fill_viridis()
ggplot(data=fixed,aes(x=MEAN_DEPTH,y=Family, height=..count.., fill=avg_depth))+geom_joy2(stat='binline',alpha=0.3)+ggtitle("Mean depth per sample, by family (all samples)") + theme_minimal() + scale_fill_viridis()
ggplot(data=fixed,aes(x=MEAN_DEPTH,y=Family, height=..count.., fill=avg_depth))+geom_joy2(stat='binline',alpha=0.34
ggplot(data=fixed, aes(x=N_SITES, y=MEAN_DEPTH,col=Ploidy))+geom_point()+facet_wrap(~Family) +
ggplot(data=fixed,aes(x=MEAN_DEPTH,y=Family, height=..count.., fill=avg_depth))+geom_joy2(stat='binline',alpha=0.4)+ggtitle("Mean depth per sample, by family (all samples)") + theme_minimal() + scale_fill_viridis()
ggplot(data=fixed,aes(x=MEAN_DEPTH,y=Family, height=..density.., fill=avg_depth))+geom_joy2(stat='binline',alpha=0.4)+ggtitle("Mean depth per sample, by family (all samples)") + theme_minimal() + scale_fill_viridis()
pdf("cov_per_sample.pdf")
ggplot(data=fixed,aes(x=MEAN_DEPTH,y=Family, height=..density.., fill=avg_depth))+geom_joy2(stat='binline',alpha=0.4)+ggtitle("Mean sample depth by family (all samples)") + theme_minimal() + scale_fill_viridis()
dev.off()
fixed$MEAN_DEPTH
hist(fixed$MEAN_DEPTH)
mean(fixed$MEAN_DEPTH)
sd(fixed$MEAN_DEPTH)
sort(fixed$MEAN_DEPTH)
View(fixed)
ggplot(data=fixed,aes(x=MEAN_DEPTH,y=Family, height=..density.., fill=Ploidy))+geom_joy2(stat='binline',alpha=0.4)+ggtitle("Mean sample depth by family (all samples)") + theme_minimal() + scale_fill_viridis()
ggplot(data=fixed,aes(x=MEAN_DEPTH,y=Family, height=..density.., fill=Ploidy))+geom_joy2(stat='binline',alpha=0.4)+ggtitle("Mean sample depth by family (all samples)") + theme_minimal()
ggplot(data=fixed,aes(x=MEAN_DEPTH,y=Family, height=..density.., fill=Sex))+geom_joy2(stat='binline',alpha=0.4)+ggtitle("Mean sample depth by family (all samples)") + theme_minimal()
library(ggplot2)
library(dplyr)
library(tidyr)
depth <- read.table("../../data/coverage/site_depth.txt", header=T)  # Loading data
depth <- depth[grep("chr*",depth$CHROM),]
depth$CHROM <- droplevels(depth$CHROM)
depth$POS <- round(depth$POS, digits=-3)
depth <- depth %>%
group_by(CHROM, POS, Family) %>%
mutate(avg=mean(MEAN_DEPTH)) %>%
select(-MEAN_DEPTH) %>%
rename(MEAN_DEPTH=avg)
depth <- subset(depth, !duplicated(subset(
depth, select=c(CHROM, POS, Family))))
sp_depth <- spread(depth,Family,MEAN_DEPTH)
sp_depth <- sp_depth[rowSums(!is.na(sp_depth[,3:14]))>0,]
sp_depth <- spread(depth,Family,MEAN_DEPTH)
depth <- subset(depth, !duplicated(subset(
depth, select=c(CHROM, POS, Family))))
depth <- depth %>%
group_by(CHROM, POS, Family) %>%
mutate(avg=mean(MEAN_DEPTH)) %>%
select(-MEAN_DEPTH) %>%
rename(MEAN_DEPTH=avg)
depth <- read.table("../../data/coverage/site_depth.txt", header=T)  # Loading data
setwd(dir = "../../../src/coverage_analysis/")
depth <- read.table("../../data/coverage/site_depth.txt", header=T)  # Loading data
depth <- depth[grep("chr*",depth$CHROM),]
depth$CHROM <- droplevels(depth$CHROM)
depth$POS <- round(depth$POS, digits=-3)
depth <- depth %>%
group_by(CHROM, POS, Family) %>%
mutate(avg=mean(MEAN_DEPTH)) %>%
select(-MEAN_DEPTH) %>%
rename(MEAN_DEPTH=avg)
depth <- subset(depth, !duplicated(subset(
depth, select=c(CHROM, POS, Family))))
sp_depth <- spread(depth,Family,MEAN_DEPTH)
sp_depth <- sp_depth[rowSums(!is.na(sp_depth[,3:14]))>0,]
ggplot(data=depth,aes(x=POS,y=MEAN_DEPTH,col=Family)) +
facet_grid(CHROM~., scales = 'free_x') + geom_point(size=0.3) +
geom_line(alpha=0.4) + theme_bw() + ggtitle("Coverage across genome, 1kb windows") +
xlab("Genomic position of SNP") + ylab("Mean coverage")
library(ggplot2)
library(dplyr)
library(tidyr)
depth <- read.table("../../data/coverage/site_depth.txt", header=T)  # Loading data
depth <- depth[grep("chr*",depth$CHROM),]
depth$CHROM <- droplevels(depth$CHROM)
depth$POS <- round(depth$POS, digits=-3)
depth <- depth %>%
group_by(CHROM, POS, Family) %>%
mutate(avg=mean(MEAN_DEPTH)) %>%
select(-MEAN_DEPTH) %>%
rename(MEAN_DEPTH=avg)
depth <- subset(depth, !duplicated(subset(
depth, select=c(CHROM, POS, Family))))
sp_depth <- spread(depth,Family,MEAN_DEPTH)
sp_depth <- sp_depth[rowSums(!is.na(sp_depth[,3:14]))>0,]
ggplot(data=depth,aes(x=POS,y=MEAN_DEPTH,col=Family)) +
facet_grid(CHROM~., scales = 'free_x') + geom_point(size=0.3) +
geom_line(alpha=0.4) + theme_bw() + ggtitle("Coverage across genome, 1kb windows") +
xlab("Genomic position of SNP") + ylab("Mean coverage")
mergecov <- depth
ggplot(data=depth,(aes(x=POS,y=MEAN_DEPTH,col=Family))) +
facet_grid(~CHROM,scales = 'free_x') + geom_point(alpha=0.3)
slide <- data.frame()
for(chr in levels(mergecov$CHROM)){
for(bp in unique(mergecov$POS[mergecov$CHROM==chr])){
curr <- data.frame(chr,bp,round(mean(mergecov$MEAN_DEPTH[mergecov$POS==bp & mergecov$CHROM==chr]),3))
slide <- rbind(slide,curr)
}
}
colnames(slide) <- c("CHROM","POS","DEPTH")
ggplot(data=slide,aes(x=POS,y=DEPTH)) + geom_line() + facet_wrap(~CHROM,scales = 'free_x')
View(depth)
hist(depth$MEAN_DEPTH)
hist(depth$MEAN_DEPTH, breaks=300)
hist(depth$MEAN_DEPTH, breaks=3000)
hist(log(depth$MEAN_DEPTH), breaks=300)
hist(log10(depth$MEAN_DEPTH), breaks=300)
abline(v=log10(50))
abline(v=log10(500))
abline(v=log10(100))
hist(log10(depth$MEAN_DEPTH), breaks=3000)
hist(log10(depth$MEAN_DEPTH), breaks=1000)
hist(log10(depth$VAR_DEPTH), breaks=1000)
hist(depth$VAR_DEPTH, breaks=1000)
hist(depth$VAR_DEPTH, breaks=100)
hist(depth$VAR_DEPTH, breaks=10)
hist(sqrt(depth$VAR_DEPTH), breaks=10)
hist(sqrt(depth$VAR_DEPTH), breaks=1000)
View(sp_depth)
library(ggplot2)
library(dplyr)
library(tidyr)
depth <- read.table("../../data/coverage/site_depth.txt", header=T)  # Loading data
depth <- depth[grep("chr*",depth$CHROM),]
depth$CHROM <- droplevels(depth$CHROM)
depth$POS <- round(depth$POS, digits=-3)
depth <- depth %>%
group_by(CHROM, POS, Family) %>%
mutate(avg=mean(MEAN_DEPTH)) %>%
select(-MEAN_DEPTH) %>%
rename(MEAN_DEPTH=avg)
depth <- subset(depth, !duplicated(subset(
depth, select=c(CHROM, POS, Family))))
sp_depth <- spread(depth,Family,MEAN_DEPTH)
sp_depth <- sp_depth[rowSums(!is.na(sp_depth[,3:14]))>0,]
sp_depth <- sp_depth[rowSums(!is.na(sp_depth[,3:14]))>1,]
sp_depth <- sp_depth[rowSums(!is.na(sp_depth[,3:14]))>2,]
sp_depth <- sp_depth[rowSums(!is.na(sp_depth[,3:14]))>1,]
sp_depth <- spread(depth,Family,MEAN_DEPTH)
sp_depth <- sp_depth[rowSums(!is.na(sp_depth[,3:14]))>2,]
sp_depth <- spread(depth,Family,MEAN_DEPTH)
sp_depth <- sp_depth[rowSums(!is.na(sp_depth[,3:14]))>1,]
View(sp_depth)
ggplot(data=depth,aes(x=POS,y=MEAN_DEPTH,col=Family)) +
facet_grid(CHROM~., scales = 'free_x') + geom_point(size=0.3) +
geom_line(alpha=0.4) + theme_bw() + ggtitle("Coverage across genome, 1kb windows") +
xlab("Genomic position of SNP") + ylab("Mean coverage")
ggplot(data=depth,aes(x=POS,y=MEAN_DEPTH,col=Family)) +
facet_grid(CHROM~., scales = 'free_x') + geom_point(size=0.3) +
geom_line(alpha=0.4) + theme_bw() + ggtitle("Coverage across genome, 1kb windows") +
xlab("Genomic position of SNP") + ylab("Mean coverage") + geom_smooth()
ggplot(data=depth,aes(x=POS,y=MEAN_DEPTH,col=Family)) +
facet_grid(CHROM~., scales = 'free_x') + theme_bw() + ggtitle("Coverage across genome, 1kb windows") +
xlab("Genomic position of SNP") + ylab("Mean coverage") + geom_smooth()
ggplot(data=depth,aes(x=POS,y=MEAN_DEPTH)) +
facet_grid(CHROM~., scales = 'free_x') + theme_bw() + ggtitle("Coverage across genome, 1kb windows") +
xlab("Genomic position of SNP") + ylab("Mean coverage") + geom_smooth()
sp_depth <- spread(depth,Family,MEAN_DEPTH)
sp_depth <- sp_depth[rowSums(!is.na(sp_depth[,3:14]))>0,]
ggplot(data=depth,aes(x=POS,y=MEAN_DEPTH)) +
facet_grid(CHROM~., scales = 'free_x') + theme_bw() + ggtitle("Coverage across genome, 1kb windows") +
xlab("Genomic position of SNP") + ylab("Mean coverage") + geom_smooth(span=0.05)
ggplot(data=depth,aes(x=POS,y=MEAN_DEPTH)) +
facet_grid(CHROM~., scales = 'free_x') + theme_bw() + ggtitle("Coverage across genome, 1kb windows") +
xlab("Genomic position of SNP") + ylab("Mean coverage") + geom_smooth(span=0.5)
ggplot(data=depth,aes(x=POS,y=MEAN_DEPTH)) +
facet_grid(CHROM~., scales = 'free_x') + theme_bw() + ggtitle("Coverage across genome, 1kb windows") +
xlab("Genomic position of SNP") + ylab("Mean coverage") + geom_smooth(span=5)
ggplot(data=depth,aes(x=POS,y=MEAN_DEPTH)) +
facet_grid(CHROM~., scales = 'free_x') + theme_bw() + ggtitle("Coverage across genome, 1kb windows") +
xlab("Genomic position of SNP") + ylab("Mean coverage") + geom_smooth(span=0.01)
ggplot(data=depth,aes(x=POS,y=MEAN_DEPTH)) +
facet_grid(CHROM~., scales = 'free_x') + theme_bw() + ggtitle("Coverage across genome, 1kb windows") +
xlab("Genomic position of SNP") + ylab("Mean coverage") + geom_smooth(method='loess',span=0.01)
warnings()
ggplot(data=depth,aes(x=POS,y=MEAN_DEPTH)) +
facet_grid(CHROM~., scales = 'free_x') + theme_bw() + ggtitle("Coverage across genome, 1kb windows") +
xlab("Genomic position of SNP") + ylab("Mean coverage") + geom_smooth(method='loess',span=0.1)
ggplot(data=depth,aes(x=POS,y=MEAN_DEPTH)) +
facet_grid(CHROM~., scales = 'free_x') + theme_bw() + ggtitle("Coverage across genome, 1kb windows") +
xlab("Genomic position of SNP") + ylab("Mean coverage") + geom_smooth(method='loess',span=0.06)
ggplot(data=depth,aes(x=POS,y=MEAN_DEPTH)) +
facet_grid(CHROM~., scales = 'free_x') + theme_bw() + ggtitle("Coverage across genome, 1kb windows") +
xlab("Genomic position of SNP") + ylab("Mean coverage") + geom_smooth(method='loess',span=0.2)
ggplot(data=depth,aes(x=POS,y=MEAN_DEPTH)) +
facet_grid(CHROM~., scales = 'free_x') + theme_bw() + ggtitle("Coverage across genome, 1kb windows") +
xlab("Genomic position of SNP") + ylab("Mean coverage") + geom_smooth(method='loess',span=0.2) + geom_hline(aes(yintercept=100))
ggplot(data=depth,aes(x=POS,y=MEAN_DEPTH)) +
facet_grid(CHROM~., scales = 'free_x') + theme_bw() + ggtitle("Coverage across genome, 1kb windows") +
xlab("Genomic position of SNP") + ylab("Mean coverage") + geom_smooth(method='loess',span=0.1) + geom_hline(aes(yintercept=100))
ggplot(data=depth,aes(x=POS,y=MEAN_DEPTH)) +
facet_grid(CHROM~., scales = 'free_x') + theme_bw() + ggtitle("Coverage across genome, 1kb windows") +
xlab("Genomic position of SNP") + ylab("Mean coverage") + geom_smooth(method='loess',span=0.5) + geom_hline(aes(yintercept=100))
ggplot(data=depth,aes(x=POS,y=MEAN_DEPTH)) +
facet_grid(CHROM~., scales = 'free_x') + theme_bw() + ggtitle("Coverage across genome, 1kb windows") +
xlab("Genomic position of SNP") + ylab("Mean coverage") + geom_smooth(method='loess',span=0.005) + geom_hline(aes(yintercept=100))
ggplot(data=depth,aes(x=POS,y=MEAN_DEPTH)) +
facet_grid(CHROM~., scales = 'free_x') + theme_bw() + ggtitle("Coverage across genome, 1kb windows") +
xlab("Genomic position of SNP") + ylab("Mean coverage") + geom_smooth(method='loess',span=0.15) + geom_hline(aes(yintercept=100))
ggplot(data=depth,aes(x=POS,y=MEAN_DEPTH, col=Family)) +
facet_grid(CHROM~., scales = 'free_x') + theme_bw() + ggtitle("Coverage across genome, 1kb windows") +
xlab("Genomic position of SNP") + ylab("Mean coverage") + geom_smooth(method='loess',span=0.15) + geom_hline(aes(yintercept=100))
ggplot(data=depth,aes(x=POS,y=MEAN_DEPTH, col=Family)) +
facet_grid(CHROM~., scales = 'free_x') + theme_bw() + ggtitle("Coverage across genome, 1kb windows") +
xlab("Genomic position of SNP") + ylab("Mean coverage") + geom_smooth(method='loess',span=0.2) + geom_hline(aes(yintercept=100))
ggplot(data=depth,aes(x=POS,y=MEAN_DEPTH, col=Family)) +
facet_grid(CHROM~., scales = 'free_x') + theme_bw() + ggtitle("Coverage across genome, 1kb windows") +
xlab("Genomic position of SNP") + ylab("Mean coverage") + geom_smooth(method='loess',span=0.3) + geom_hline(aes(yintercept=100))
ggplot(data=depth,aes(x=POS,y=MEAN_DEPTH, col=Family)) +
facet_grid(CHROM~., scales = 'free_x') + theme_bw() + ggtitle("Coverage across genome, 1kb windows") +
xlab("Genomic position of SNP") + ylab("Mean coverage") + geom_smooth(method='loess') + geom_hline(aes(yintercept=100))
library(ggplot2); library(dplyr)
stat_path <- '../../data/populations/d-5_r-10/'
indv <- read.table('../../data/individuals', header=T)
sum_stat <- data.frame()
for(fam in list.dirs(stat_path)[2:length(list.dirs(stat_path))]){  # Excluding first dir (parent)
tmp_stat <- read.csv(paste0(fam,'/batch_0.sumstats.tsv'),header=T,skip=2,sep='\t')
tmp_stat$fam <- rep(basename(fam))
sum_stat <- rbind(sum_stat, tmp_stat)
mother_hom <- NULL
}
rm_snps<- sum_stat %>%
group_by(fam,Locus.ID,Col) %>%  # Each group contains one SNP (both male and female pop)
summarise(hom_mot = sum(Pop.ID=='F' & Q.Nuc=='-'))  # If all females are homozygous -> mother is homozygous
rm_snps <- rm_snps[rm_snps$hom_mot==0, 1:3]
sum_stat <- merge(sum_stat,rm_snps,by=c("Locus.ID","Col","fam"))
male_stat <- sum_stat[sum_stat$Pop.ID=="M",c('Chr','BP','Obs.Hom', 'fam', 'N',"Locus.ID")]
female_stat <- sum_stat[sum_stat$Pop.ID=="F",c('Chr','BP','Obs.Hom', 'fam', 'N')]
chrom_stat <- merge(male_stat,female_stat,by=c('Chr','BP','fam'))
attach(chrom_stat)
chrom_stat$hom <- (Obs.Hom.x * N.x + Obs.Hom.y * N.y)/(N.x + N.y)
chrom_stat <- rename(chrom_stat, Nm=N.x,Nf=N.y, Male.Hom=Obs.Hom.x, Fem.Hom=Obs.Hom.y)
chrom_stat$weight <- chrom_stat$Nf + chrom_stat$Nm
chrom_stat <- chrom_stat[grep("chr.*", chrom_stat$Chr),]
chrom_stat$Chr <- droplevels(chrom_stat$Chr)
ggplot(chrom_stat, aes(x=BP, y=hom, weight=weight)) + facet_grid(~Chr, scales='free_x') +
geom_point(col='grey70') + stat_smooth(fill='steelblue', method='loess', fullrange = F, span=0.4)
chr_models <- list()
for(chrom in levels(chrom_stat$Chr)){
chr_models[[chrom]] <- loess(data=chrom_stat[chrom_stat$Chr==chrom,],
formula=hom~BP, weights=weight, span=1, model=T)
}
if(FALSE){
par(mfrow=c(3,2))
for(mod in chr_models){
plot(mod$x[order(mod$x)],mod$fitted[order(mod$x)], ylim=c(-0.05,1), type='l')
points(mod$x[mod$fitted==min(mod$fitted)],rep(-0.01,length(mod$x[mod$fitted==min(mod$fitted)])),
xlim=c(min(mod$x),max(mod$x)), col='red')
abline(h=-0.01)
}
}
library(viridis)
sp_range <- seq(0.2,1,0.05)
virilist <- viridis(n=length(sp_range))
colindex <- 1
par(mfrow=c(3,2))
for(chrom in levels(chrom_stat$Chr)){
plot(x=c(),y=c(),xlim=c(0,max(chrom_stat$BP[chrom_stat$Chr==chrom])), ylim=c(-0.05,1))
abline(h=-0.01)
for(sp in sp_range){
mod <- loess(data=chrom_stat[chrom_stat$Chr==chrom,], degree=1,
formula=hom~BP, weights=weight, span=sp, model=T)
points(mod$x[order(mod$x)],mod$fitted[order(mod$x)], type='l',col=alpha(virilist[colindex],0.4))
points(mod$x[mod$fitted==min(mod$fitted)],rep(-0.01,length(mod$x[mod$fitted==min(mod$fitted)])),
col=alpha(virilist[colindex],0.4),pch=16, cex=1.5)
colindex <- colindex+1
}
colindex <- 1
}
loessGCV <- function (x) {
## Modified from code by Michael Friendly
## http://tolstoy.newcastle.edu.au/R/help/05/11/15899.html
if (!(inherits(x,"loess"))) stop("Error: argument must be a loess object")
## extract values from loess object
span <- x$pars$span
n <- x$n
traceL <- x$trace.hat
sigma2 <- sum(resid(x)^2) / (n-1)
gcv  <- n*sigma2 / (n-traceL)^2
result <- list(span=span, gcv=gcv)
result
}
estLoess <- function(model, spans = c(.1, .95)) {
f <- function(span) {
mod <- update(model, span = span)
loessGCV(mod)[["gcv"]]
}
result <- optimize(f, spans)
result
}
library(viridis)
sp_range <- seq(0.2,1,0.05)
par(mfrow=c(3,2))
for(chrom in levels(chrom_stat$Chr)){
plot(x=c(),y=c(),xlim=c(0,max(chrom_stat$BP[chrom_stat$Chr==chrom])), ylim=c(-0.05,1))
abline(h=-0.01)
mod <- loess(data = chrom_stat[chrom_stat$Chr==chrom,], hom ~ BP,
weights = weight)
mod.best <- estLoess(mod)
mod.cv <- loess(data = chrom_stat[chrom_stat$Chr==chrom,], formula=hom~BP,
degree=2, weights=weight, span=mod.best$minimum, model=T)
points(mod.cv$x[order(mod.cv$x)],mod.cv$fitted[order(mod.cv$x)], type='l')
points(mod.cv$x[mod.cv$fitted==min(mod.cv$fitted)],rep(-0.01,length(mod.cv$x[mod.cv$fitted==min(mod.cv$fitted)])),
pch=16, cex=1.5)
}
library(ggplot2); library(dplyr)
stat_path <- '../../data/populations/d-5_r-10/'
indv <- read.table('../../data/individuals', header=T)
sum_stat <- data.frame()
for(fam in list.dirs(stat_path)[2:length(list.dirs(stat_path))]){  # Excluding first dir (parent)
tmp_stat <- read.csv(paste0(fam,'/batch_0.sumstats.tsv'),header=T,skip=2,sep='\t')
tmp_stat$fam <- rep(basename(fam))
sum_stat <- rbind(sum_stat, tmp_stat)
mother_hom <- NULL
}
male_stat <- sum_stat[sum_stat$Pop.ID=="M",c('Chr','BP','Obs.Hom', 'fam', 'N',"Locus.ID")]
female_stat <- sum_stat[sum_stat$Pop.ID=="F",c('Chr','BP','Obs.Hom', 'fam', 'N')]
chrom_stat <- merge(male_stat,female_stat,by=c('Chr','BP','fam'))
attach(chrom_stat)
chrom_stat$hom <- (Obs.Hom.x * N.x + Obs.Hom.y * N.y)/(N.x + N.y)
chrom_stat <- rename(chrom_stat, Nm=N.x,Nf=N.y, Male.Hom=Obs.Hom.x, Fem.Hom=Obs.Hom.y)
chrom_stat$weight <- chrom_stat$Nf + chrom_stat$Nm
chrom_stat <- chrom_stat[grep("chr.*", chrom_stat$Chr),]
chrom_stat$Chr <- droplevels(chrom_stat$Chr)
ggplot(chrom_stat, aes(x=BP, y=hom, weight=weight)) + facet_grid(~Chr, scales='free_x') +
geom_point(col='grey70') + stat_smooth(fill='steelblue', method='loess', fullrange = F, span=0.4)
chr_models <- list()
for(chrom in levels(chrom_stat$Chr)){
chr_models[[chrom]] <- loess(data=chrom_stat[chrom_stat$Chr==chrom,],
formula=hom~BP, weights=weight, span=1, model=T)
}
if(FALSE){
par(mfrow=c(3,2))
for(mod in chr_models){
plot(mod$x[order(mod$x)],mod$fitted[order(mod$x)], ylim=c(-0.05,1), type='l')
points(mod$x[mod$fitted==min(mod$fitted)],rep(-0.01,length(mod$x[mod$fitted==min(mod$fitted)])),
xlim=c(min(mod$x),max(mod$x)), col='red')
abline(h=-0.01)
}
}
library(viridis)
sp_range <- seq(0.2,1,0.05)
virilist <- viridis(n=length(sp_range))
colindex <- 1
par(mfrow=c(3,2))
for(chrom in levels(chrom_stat$Chr)){
plot(x=c(),y=c(),xlim=c(0,max(chrom_stat$BP[chrom_stat$Chr==chrom])), ylim=c(-0.05,1))
abline(h=-0.01)
for(sp in sp_range){
mod <- loess(data=chrom_stat[chrom_stat$Chr==chrom,], degree=1,
formula=hom~BP, weights=weight, span=sp, model=T)
points(mod$x[order(mod$x)],mod$fitted[order(mod$x)], type='l',col=alpha(virilist[colindex],0.4))
points(mod$x[mod$fitted==min(mod$fitted)],rep(-0.01,length(mod$x[mod$fitted==min(mod$fitted)])),
col=alpha(virilist[colindex],0.4),pch=16, cex=1.5)
colindex <- colindex+1
}
colindex <- 1
}
loessGCV <- function (x) {
## Modified from code by Michael Friendly
## http://tolstoy.newcastle.edu.au/R/help/05/11/15899.html
if (!(inherits(x,"loess"))) stop("Error: argument must be a loess object")
## extract values from loess object
span <- x$pars$span
n <- x$n
traceL <- x$trace.hat
sigma2 <- sum(resid(x)^2) / (n-1)
gcv  <- n*sigma2 / (n-traceL)^2
result <- list(span=span, gcv=gcv)
result
}
estLoess <- function(model, spans = c(.1, .95)) {
f <- function(span) {
mod <- update(model, span = span)
loessGCV(mod)[["gcv"]]
}
result <- optimize(f, spans)
result
}
library(viridis)
sp_range <- seq(0.2,1,0.05)
par(mfrow=c(3,2))
for(chrom in levels(chrom_stat$Chr)){
plot(x=c(),y=c(),xlim=c(0,max(chrom_stat$BP[chrom_stat$Chr==chrom])), ylim=c(-0.05,1))
abline(h=-0.01)
mod <- loess(data = chrom_stat[chrom_stat$Chr==chrom,], hom ~ BP,
weights = weight)
mod.best <- estLoess(mod)
mod.cv <- loess(data = chrom_stat[chrom_stat$Chr==chrom,], formula=hom~BP,
degree=2, weights=weight, span=mod.best$minimum, model=T)
points(mod.cv$x[order(mod.cv$x)],mod.cv$fitted[order(mod.cv$x)], type='l')
points(mod.cv$x[mod.cv$fitted==min(mod.cv$fitted)],rep(-0.01,length(mod.cv$x[mod.cv$fitted==min(mod.cv$fitted)])),
pch=16, cex=1.5)
}
View(sum_stat)
View(chrom_stat)
chrom_stat <- chrom_stat[chrom_stat$Male.Hom==1 & chrom_stat$Fem.Hom==0,]
ggplot(chrom_stat, aes(x=BP, y=hom, weight=weight)) + facet_grid(~Chr, scales='free_x') +
geom_point(col='grey70') + stat_smooth(fill='steelblue', method='loess', fullrange = F, span=0.4)
chrom_stat$hom <- (Obs.Hom.x * N.x + (1-Obs.Hom.y) * N.y)/(N.x + N.y)
library(ggplot2); library(dplyr)
# Genome statistics
stat_path <- '../../data/populations/d-20_r-80/'
indv <- read.table('../../data/individuals', header=T)
# phi_path <- commandArgs(TrailingOnly=T)[1]
# removing SNPs homozygous in all females (consequently in mothers)
sum_stat <- data.frame()
for(fam in list.dirs(stat_path)[2:length(list.dirs(stat_path))]){  # Excluding first dir (parent)
tmp_stat <- read.csv(paste0(fam,'/batch_0.sumstats.tsv'),header=T,skip=2,sep='\t')
tmp_stat$fam <- rep(basename(fam))
sum_stat <- rbind(sum_stat, tmp_stat)
mother_hom <- NULL
}
# Computing total homozygousity and number of individuals per SNP
male_stat <- sum_stat[sum_stat$Pop.ID=="M",c('Chr','BP','Obs.Hom', 'fam', 'N',"Locus.ID")]
female_stat <- sum_stat[sum_stat$Pop.ID=="F",c('Chr','BP','Obs.Hom', 'fam', 'N')]
chrom_stat <- merge(male_stat,female_stat,by=c('Chr','BP','fam'))
attach(chrom_stat)
chrom_stat$hom <- (Obs.Hom.x * N.x + (1-Obs.Hom.y) * N.y)/(N.x + N.y)
chrom_stat <- rename(chrom_stat, Nm=N.x,Nf=N.y, Male.Hom=Obs.Hom.x, Fem.Hom=Obs.Hom.y)
chrom_stat$weight <- chrom_stat$Nf + chrom_stat$Nm
chrom_stat <- chrom_stat[grep("chr.*", chrom_stat$Chr),]
chrom_stat$Chr <- droplevels(chrom_stat$Chr)
ggplot(chrom_stat, aes(x=BP, y=hom, weight=weight)) + facet_grid(~Chr, scales='free_x') +
geom_point(col='grey70') + stat_smooth(fill='steelblue', method='loess', fullrange = F, span=0.4)
chrom_stat <- chrom_stat[chrom_stat$Male.Hom==1 & chrom_stat$Fem.Hom==0,]
ggplot(chrom_stat, aes(x=BP, y=hom, weight=weight)) + facet_grid(~Chr, scales='free_x') +
geom_point(col='grey70') + stat_smooth(fill='steelblue', method='loess', fullrange = F, span=0.4)
View(chrom_stat)
ggplot(chrom_stat, aes(x=BP, y=hom, size=weight)) + facet_grid(~Chr, scales='free_x') +
geom_point(col='grey70')
ggplot(chrom_stat, aes(x=BP, y=hom, weight=weight)) + facet_grid(~Chr, scales='free_x') +
geom_histogram()
ggplot(chrom_stat, aes(x=BP, y=hom, weight=weight)) + facet_grid(~Chr, scales='free_x') +
geom_density()
ggplot(chrom_stat, aes(x=BP, weight=weight)) + facet_grid(~Chr, scales='free_x') +
geom_density()
ggplot(chrom_stat, aes(x=BP)) + facet_grid(~Chr, scales='free_x') +
geom_density()
ggplot(chrom_stat, aes(x=BP)) + facet_grid(~Chr, scales='free_x') +
geom_histogram()
ggplot(chrom_stat, aes(x=BP)) + facet_grid(~Chr, scales='free_x') +
geom_histogram(bins=10)
