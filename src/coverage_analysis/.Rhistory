library(vcfR)
dna <- ape::read.dna("../../data/ref_genome/ordered_genome/oneline_merged.fasta", format='fasta')
dna <- ape::read.dna("../../data/ref_genome/ordered_genome/merged.fasta", format='fasta')
dna
dna["chr1"]
for( chrom in dna){ print chrom}
for( chrom in dna){ print(chrom)}
library(ape)
test_fam <- read.vcfR("../../data/populations/d-20_r-80/A/batch_0.vcf")
test_fam@meta
test_fam@fix
for(chrom in ref_genome){print(chrom)}
ref_genome <- ape::read.dna("../../data/ref_genome/ordered_genome/merged.fasta", format='fasta')
ref_genome
for(i in ref_genome){print(i)}
str(ref_genome)
names(ref_genome)
for(chrom in names(ref_genome)){print(chrom)}
str(vcf)
vcf_fam_fam <- read.vcfR("../../data/populations/d-20_r-80/A/batch_0.vcf")
vcf_fam_fam <- read.vcfR("../../data/populations/d-20_r-80/A/batch_0.vcf")
vcf_fam <- read.vcfR("../../data/populations/d-20_r-80/A/batch_0.vcf")
View(vcf_fam@gt)
vcf_fam <- read.vcfR("dummy.vcf")
getwd()
vcf_fam <- read.vcfR("dummy.vcf")
ref_genome <- read.dna("dummy.fasta", format='fasta')
chrom_test <- create.chromR(vcf=vcf_fam,seq=ref_genome)
plot(chrom_test)
library(ggplot2)
library(dplyr)
depth <- read.table("../../data/coverage/site_depth.txt", header=T)
depth <- depth[grep("chr*",depth$CHROM),]
depth$CHROM <- droplevels(depth$CHROM)
mergecov <- depth
mergecov$POS <- round(mergecov$POS,digits=-4)
ggplot(data=depth,(aes(x=POS,y=MEAN_DEPTH,col=Family))) +
facet_grid(~CHROM,scales = 'free_x') + geom_point(alpha=0.3)
library(ggplot2)
ggplot(data=fixed,aes(x=N_SITES,fill=Family))+geom_histogram(binwidth = 10)+ggtitle("Number of sites per sample, by ploidy (all samples)")
fixed <- read.table("../../../data/ploidy/thresholds/fixed",header=T)
ggplot(data=fixed,aes(x=N_SITES,fill=Family))+geom_histogram(binwidth = 10)+ggtitle("Number of sites per sample, by ploidy (all samples)")
ggplot(data=fixed,aes(x=N_SITES,fill=Ploidy))+geom_histogram(binwidth = 10)+ggtitle("Number of sites per sample, by ploidy (all samples)")
ggplot(data=fixed[fixed$Ploidy=='D',],aes(x=N_SITES,fill=Family))+geom_histogram(binwidth = 10)+ggtitle("Number of sites per sample, by ploidy (all samples)")
ggplot(data=fixed,aes(x=N_SITES,fill=Family))+geom_histogram(binwidth = 10)+ggtitle("Number of sites per sample, by ploidy (all samples)")
slide <- data.frame()
for(chr in levels(mergecov$CHROM)){
for(bp in levels(as.factor(mergecov$POS))){
curr <- c(bp,mean(mergecov$MEAN_DEPTH[mergecov$POS==bp & mergecov$CHROM==chr]))
slide <- rbind(slide,curr)
}
}
mergecov <- depth
mergecov$POS <- round(mergecov$POS,digits=-4)
slide <- data.frame()
for(chr in levels(mergecov$CHROM)){
for(bp in levels(as.factor(mergecov$POS))){
curr <- c(bp,mean(mergecov$MEAN_DEPTH[mergecov$POS==bp & mergecov$CHROM==chr]))
slide <- rbind(slide,curr)
}
}
suppressMessages(library(dplyr))
colnames(off_comp) <- c("Family", "Sex", "Count")
warnings()
str(mergecov)
as.factor(mergecov$PSO)
as.factor(mergecov$POS)
View(slide)
bp
mergecov$MEAN_DEPTH[mergecov$POS==bp & mergecov$CHROM==chr]
mergecov$MEAN_DEPTH[as.factor(mergecov$POS)==bp & mergecov$CHROM==chr]
as.numeric(bp)
mergecov$MEAN_DEPTH[mergecov$POS==as.numeric(bp) & mergecov$CHROM==chr]
curr <- c(bp,mean(mergecov$MEAN_DEPTH[mergecov$POS==as.numeric(bp) & mergecov$CHROM==chr]))
mergecov$MEAN_DEPTH
mergecov$MEAN_DEPTH[mergecov$POS==as.numeric(bp)]
mergecov$CHROM
chr
mergecov$POS[mergecov$CHROM==chr]
mergecov$MEAN_DEPTH[mergecov$POS==as.numeric(bp) & mergecov$CHROM==chr]
View(slide)
slide <- data.frame()
for(chr in levels(mergecov$CHROM)){
for(bp in levels(as.factor(mergecov$POS[mergecov$CHROM==chr]))){
curr <- c(bp,mean(mergecov$MEAN_DEPTH[mergecov$POS==as.numeric(bp) & mergecov$CHROM==chr]))
slide <- rbind(slide,curr)
}
}
warnings()
View(slide)
bp
mergecov$MEAN_DEPTH[mergecov$POS==as.numeric(bp) & mergecov$CHROM==chr]
View(depth)
matrix(c(bp,mean(mergecov$MEAN_DEPTH[mergecov$POS==as.numeric(bp) & mergecov$CHROM==chr])),nrow=1)
slide <- data.frame()
for(chr in levels(mergecov$CHROM)){
for(bp in levels(as.factor(mergecov$POS[mergecov$CHROM==chr]))){
curr <- matrix(c(bp,mean(mergecov$MEAN_DEPTH[mergecov$POS==as.numeric(bp) & mergecov$CHROM==chr])),nrow=1)
slide <- rbind(slide,curr)
}
}
View(slide)
slide <- data.frame()
for(chr in levels(mergecov$CHROM)){
for(bp in levels(as.factor(mergecov$POS[mergecov$CHROM==chr]))){
curr <- matrix(c(bp,round(mean(mergecov$MEAN_DEPTH[mergecov$POS==as.numeric(bp) & mergecov$CHROM==chr]),3)),nrow=1)
slide <- rbind(slide,curr)
}
}
View(slide)
ggplot(data=slide,aes(x=V1,y=V2)) + geom_line()
ggplot(data=slide,aes(x=V1,y=V2)) + geom_point()
colnames(slide) <- c(pos,depth)
View(slide)
slide <- data.frame()
for(chr in levels(mergecov$CHROM)){
for(bp in levels(as.factor(mergecov$POS[mergecov$CHROM==chr]))){
curr <- matrix(c(chr,bp,round(mean(mergecov$MEAN_DEPTH[mergecov$POS==as.numeric(bp) & mergecov$CHROM==chr]),3)),nrow=1)
slide <- rbind(slide,curr)
}
}
colnames(slide) <- c("CHROM","POS","DEPTH")
ggplot(data=slide,aes(x=POS,y=DEPTH)) + geom_point() + facet_wrap(~CHROM)
str(slide)
mergecov$MEAN_DEPTH[mergecov$POS==as.numeric(bp) & mergecov$CHROM==chr])
mergecov$MEAN_DEPTH[mergecov$POS==as.numeric(bp) & mergecov$CHROM==chr]
mean(mergecov$MEAN_DEPTH[mergecov$POS==as.numeric(bp) & mergecov$CHROM==chr])
slide$POS <- as.numeric(slide$POS)
slide$DEPTH <- as.numeric(slide$DEPTH)
ggplot(data=slide,aes(x=POS,y=DEPTH)) + geom_point() + facet_wrap(~CHROM)
View(slide)
unique(mergecov$POS
)
slide <- data.frame()
for(chr in levels(mergecov$CHROM)){
for(bp in unique(mergecov$POS[mergecov$CHROM==chr])){
curr <- matrix(c(chr,bp,round(mean(mergecov$MEAN_DEPTH[mergecov$POS==bp & mergecov$CHROM==chr]),3)),nrow=1)
slide <- rbind(slide,curr)
}
}
mergecov <- depth
mergecov$POS <- round(mergecov$POS,digits=-4)
slide <- data.frame()
for(chr in levels(mergecov$CHROM)){
for(bp in unique(mergecov$POS[mergecov$CHROM==chr])){
curr <- matrix(c(chr,bp,round(mean(mergecov$MEAN_DEPTH[mergecov$POS==bp & mergecov$CHROM==chr]),3)),nrow=1)
slide <- rbind(slide,curr)
}
}
colnames(slide) <- c("CHROM","POS","DEPTH")
slide$POS <- as.numeric(slide$POS)
slide$DEPTH <- as.numeric(slide$DEPTH)
View(slide)
bp
mergecov$POS==bp
str(mergecov)
slide <- data.frame()
for(chr in levels(mergecov$CHROM)){
for(bp in unique(mergecov$POS[mergecov$CHROM==chr])){
curr <- matrix(c(chr,as.numeric(bp),round(mean(as.numeric(mergecov$MEAN_DEPTH[mergecov$POS==bp & mergecov$CHROM==chr])),3)),nrow=1)
slide <- rbind(slide,curr)
}
}
View(slide)
ggplot(data=slide,aes(x=POS,y=DEPTH)) + geom_point() + facet_wrap(~CHROM)
colnames(slide) <- c("CHROM","POS","DEPTH")
ggplot(data=slide,aes(x=POS,y=DEPTH)) + geom_point() + facet_wrap(~CHROM)
ggplot(data=slide,aes(x=POS,y=DEPTH)) + geom_point() + facet_wrap(~CHROM)
View(slide)
slide <- data.frame(c(CHROM=numeric(0),POS=numeric(0),DEPTH=numeric(0)))
slide <- data.frame(c(CHROM=numeric(0),POS=numeric(0),DEPTH=numeric(0)))
for(chr in levels(mergecov$CHROM)){
for(bp in unique(mergecov$POS[mergecov$CHROM==chr])){
curr <- matrix(c(chr,as.numeric(bp),round(mean(as.numeric(mergecov$MEAN_DEPTH[mergecov$POS==bp & mergecov$CHROM==chr])),3)),nrow=1)
slide <- rbind(slide,curr)
}
}
unique(mergecov$POS[mergecov$CHROM==chr])
slide <- data.frame(c(CHROM=numeric(0),POS=numeric(0),DEPTH=numeric(0)))
for(chr in levels(mergecov$CHROM)){
for(bp in unique(mergecov$POS[mergecov$CHROM==chr])){
curr <- c(chr,bp,round(mean(mergecov$MEAN_DEPTH[mergecov$POS==bp & mergecov$CHROM==chr]),3))
slide <- rbind(slide,curr)
}
}
colnames(slide) <- c("CHROM","POS","DEPTH")
warnings()
slide <- data.frame(c(CHROM=numeric(0),POS=numeric(0),DEPTH=numeric(0)))
for(chr in levels(mergecov$CHROM)){
for(bp in unique(mergecov$POS[mergecov$CHROM==chr])){
curr <- c(chr,as.numeric(bp),as.numeric(round(mean(mergecov$MEAN_DEPTH[mergecov$POS==bp & mergecov$CHROM==chr])),3))
slide <- rbind(slide,curr)
}
}
c(1,"A")
[[1,"A"]]
list(1,"A")
slide <- data.frame(c(CHROM=numeric(0),POS=numeric(0),DEPTH=numeric(0)))
for(chr in levels(mergecov$CHROM)){
for(bp in unique(mergecov$POS[mergecov$CHROM==chr])){
curr <- list(chr,bp,round(mean(mergecov$MEAN_DEPTH[mergecov$POS==bp & mergecov$CHROM==chr]),3))
slide <- rbind(slide,curr)
}
}
ggplot(data=slide,aes(x=POS,y=DEPTH)) + geom_point() + facet_wrap(~CHROM)
colnames(slide) <- c("CHROM","POS","DEPTH")
ggplot(data=slide,aes(x=POS,y=DEPTH)) + geom_point() + facet_wrap(~CHROM)
slide <- data.frame()
for(chr in levels(mergecov$CHROM)){
for(bp in unique(mergecov$POS[mergecov$CHROM==chr])){
curr <- list(chr,bp,round(mean(mergecov$MEAN_DEPTH[mergecov$POS==bp & mergecov$CHROM==chr]),3))
slide <- rbind(slide,curr)
}
}
View(slide)
View(fixed)
data.frame(chr,bp,round(mean(mergecov$MEAN_DEPTH[mergecov$POS==bp & mergecov$CHROM==chr]),3))
slide <- data.frame()
for(chr in levels(mergecov$CHROM)){
for(bp in unique(mergecov$POS[mergecov$CHROM==chr])){
curr <- data.frame(chr,bp,round(mean(mergecov$MEAN_DEPTH[mergecov$POS==bp & mergecov$CHROM==chr]),3))
slide <- rbind(slide,curr)
}
}
colnames(slide) <- c("CHROM","POS","DEPTH")
ggplot(data=slide,aes(x=POS,y=DEPTH)) + geom_point() + facet_wrap(~CHROM)
ggplot(data=slide,aes(x=POS,y=DEPTH)) + geom_line() + facet_wrap(~CHROM)
ggplot(data=slide,aes(x=POS,y=DEPTH)) + geom_line() + facet_wrap(~CHROM,scales = 'free_x')
mergecov$POS <- round(mergecov$POS,digits=-5)
mergecov <- depth
mergecov$POS <- round(mergecov$POS,digits=-5)
slide <- data.frame()
for(chr in levels(mergecov$CHROM)){
for(bp in unique(mergecov$POS[mergecov$CHROM==chr])){
curr <- data.frame(chr,bp,round(mean(mergecov$MEAN_DEPTH[mergecov$POS==bp & mergecov$CHROM==chr]),3))
slide <- rbind(slide,curr)
}
}
colnames(slide) <- c("CHROM","POS","DEPTH")
ggplot(data=slide,aes(x=POS,y=DEPTH)) + geom_line() + facet_wrap(~CHROM,scales = 'free_x')
mergecov <- depth
mergecov$POS <- round(mergecov$POS,digits=-6)
ggplot(data=depth,(aes(x=POS,y=MEAN_DEPTH,col=Family))) +
facet_grid(~CHROM,scales = 'free_x') + geom_point(alpha=0.3)
slide <- data.frame()
for(chr in levels(mergecov$CHROM)){
for(bp in unique(mergecov$POS[mergecov$CHROM==chr])){
curr <- data.frame(chr,bp,round(mean(mergecov$MEAN_DEPTH[mergecov$POS==bp & mergecov$CHROM==chr]),3))
slide <- rbind(slide,curr)
}
}
colnames(slide) <- c("CHROM","POS","DEPTH")
ggplot(data=slide,aes(x=POS,y=DEPTH)) + geom_line() + facet_wrap(~CHROM,scales = 'free_x')
library(dplyr)
library(readr)
library(ggplot2)
# Summarizing chromosome sizes
scaffolds <- read.table("../../data/ref_genome/ordered_genome/merged.fasta.ann", stringsAsFactors = F)
chrom_sizes <- data.frame(); chrom_names=c()
for(row in seq(1,nrow(scaffolds))){
if(length(grep('chr',scaffolds[row,2]))){
chrom_names <- append(chrom_names,as.character(scaffolds[row,2]))
chrom_sizes <- rbind(chrom_sizes, scaffolds[row+1,c(1,2)])
}
}
chrom_sizes <- cbind(chrom_names, chrom_sizes)
rownames(chrom_sizes) <- NULL
colnames(chrom_sizes) <- c("chrom","start","length")
chrom_sizes$length <- as.numeric(chrom_sizes$length)
chrom_sizes$mid <- chrom_sizes$start + (chrom_sizes$length/2)  # Middle position in chrom. used for plotting
hom_filt <- function(fam){
# Function for filtering loci homozygous in mother of given family
mother <- as.character(indv$Name[indv$Family==fam & indv$Generation=='F3'])
# Using mother's genotype from snps file
snp_gz <- gzfile(paste0('../../data/sstacks/',fam,'/',mother,'.snps.tsv.gz'),"rt")
# Uncompresing file (lengthy process)
snp_mother <- read.table(snp_gz); close(snp_gz)
# keeping all loci where all SNPs are hom
hom_loc <- snp_mother %>% group_by(V3) %>% filter(all(V5=='O'))
# Find loci which have only homozygous positions in pstacks snps file
hom_ID_local <- unique(hom_loc$V3)
match_gz <- gzfile(paste0('../../data/sstacks/',fam,'/',mother,'.matches.tsv.gz'),"rt")
# uncompressing...
match_mother <- read.table(match_gz); close(match_gz)
hom_ID_global <- unique(match_mother$V3[match_mother$V4 %in% hom_ID_local])
# Finding catalog locus IDs matching sample locus IDs using sstacks matches file
return(hom_ID_global)
}
`%not in%` <- function (x, table) is.na(match(x, table, nomatch=NA_integer_))
# Customized operator for convenience
# Genome statistics
stat_path <- '../../data/populations/d-20_r-80/'
indv <- read.table('../../data/individuals', header=T)
# phi_path <- commandArgs(TrailingOnly=T)[1]
rec_hom$EXTRACOL <- 1 # use a column name that is not present among
# the original data.frame columns
merged <- merge(sum_stat,rec_hom,all=TRUE, by.x=c("Chr","BP","fam"), by.y=c("contig","bp","family"))
sum_stat <- merged[is.na(merged$EXTRACOL),]
sum_stat$EXTRACOL <- NULL
}
rec_hom <- read.csv("../../data/SNP_lists/fixed_hom_mother.txt",header=T)
sum_stat <- data.frame()
for(fam in list.dirs(stat_path)[2:length(list.dirs(stat_path))]){  # Excluding first dir (parent)
tmp_stat <- read.csv(paste0(fam,'/batch_0.sumstats.tsv'),header=T,skip=2,sep='\t')
tmp_stat$fam <- rep(basename(fam))
sum_stat <- rbind(sum_stat, tmp_stat)
mother_hom <- NULL
}
rm_snps<- sum_stat %>%
group_by(fam,Locus.ID,Col) %>%  # Each group contains one SNP (both male and female pop)
summarise(hom_mot = sum(Pop.ID=='F' & Q.Nuc=='-'))  # If all females are homozygous -> mother is homozygous
rm_snps <- rm_snps[rm_snps$hom_mot==0, 1:3]
sum_stat <- merge(sum_stat,rm_snps,by=c("Locus.ID","Col","fam"))
View(sum_stat)
# Computing CSD-ness
male_stat <- sum_stat[sum_stat$Pop.ID=="M",c('Chr','BP','Obs.Hom', 'fam', 'N',"Locus.ID")]
female_stat <- sum_stat[sum_stat$Pop.ID=="F",c('Chr','BP','Obs.Het', 'fam', 'N')]
CSD_like <- merge(male_stat,female_stat,by=c('Chr','BP','fam'))
#CSD_like$CSD <- (CSD_like$Obs.Hom+CSD_like$Obs.Het)*(CSD_like$N.x+CSD_like$N.y)/2
CSD_like$CSD <- (CSD_like$Obs.Hom+CSD_like$Obs.Het)/2
CSD_like <- rename(CSD_like, Nm=N.x,Nf=N.y, Male.Hom=Obs.Hom, Fem.Het=Obs.Het)
# Keeping only chromosomes (removing contigs)
CSD_like <- CSD_like %>% arrange(Chr, BP)
chrom <- CSD_like[grep("chr.*", CSD_like$Chr),]
chrom$pos = paste(chrom$Chr,chrom$BP, sep="_")
chrom$Chr=droplevels(chrom$Chr)
# Finding genomic position of SNPs
genomic_pos <- function(snp){
# Computing total basepair position in genome as start(chrom)+bp
gen_pos <- as.numeric(snp["BP"]) + chrom_sizes[chrom_sizes$chr==snp["Chr"],"start"]
return(gen_pos)
}
chrom$tot_BP <-apply(X = chrom,MARGIN = 1, FUN=genomic_pos)
View(chrom)
ggplot(data=chrom,aes(x=pos,y=((1-Fem.Het)+Male.Hom))) + facet_grid(~Chr)
ggplot(data=chrom,aes(x=BP,y=((1-Fem.Het)+Male.Hom))) + facet_grid(~Chr)
ggplot(data=chrom,aes(x=BP,y=((1-Fem.Het)+Male.Hom))) + geom_line() +facet_grid(~Chr)
ggplot(data=chrom,aes(x=BP,y=((1-Fem.Het)+Male.Hom))) + geom_point() +facet_grid(~Chr)
ggplot(data=chrom,aes(x=BP,y=((1-Fem.Het)+Male.Hom))) + geom_point() +facet_grid(Family~Chr)
ggplot(data=chrom,aes(x=BP,y=((1-Fem.Het)+Male.Hom))) + geom_point() +facet_grid(fam~Chr)
ggplot(data=chrom,aes(x=BP,y=((1-Fem.Het)+Male.Hom))) + geom_point() +facet_grid(fam~Chr, scales = "free_x")
ggplot(data=chrom,aes(x=BP,y=((1-Fem.Het)+Male.Hom))) + geom_point() +facet_grid(Chr, scales = "free_x")
ggplot(data=chrom,aes(x=BP,y=((1-Fem.Het)+Male.Hom))) + geom_point() +facet_grid(~Chr, scales = "free_x")
View(indv)
ggplot(data=fixed,aes(x=N_SITES,fill=Generation))+geom_histogram(binwidth = 10)+ggtitle("Number of sites per sample, by family (all samples)") + facet_grid(~Family)
fixed <- read.table("../../../data/ploidy/thresholds/fixed",header=T)
ggplot(data=fixed,aes(x=N_SITES,fill=Generation))+geom_histogram(binwidth = 10)+ggtitle("Number of sites per sample, by family (all samples)") + facet_grid(~Family)
ggplot(data=fixed,aes(x=N_SITES,fill=Generation))+geom_histogram(binwidth = 10)+ggtitle("Number of sites per sample, by family (all samples)") + facet_grid(Family~)
off_comp
diplo_off <- fixed[fixed$Generation=="F4" & fixed$Ploidy=='D',]
off_comp <- data.frame(table(diplo_off$Family, diplo_off$Sex))
colnames(off_comp) <- c("Family", "Sex", "Count")
off_comp <- off_comp %>%
group_by(Family) %>%
mutate(prop_males=round(Count[Sex=='M']/sum(Count),3)) %>%
filter(Sex=='M') %>%
select(-Sex)
off_comp
fixed
colnames(off_comp)
table(diplo_off$Family, diplo_off$Sex)
